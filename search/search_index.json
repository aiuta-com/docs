{"config": {"lang": ["en"], "separator": "[\\s\\-]+", "pipeline": ["stopWordFilter"]}, "docs": [{"location": "", "title": "Shaping the future of fashionAIUTA is a modular AI innovation platform designed to help fashion brands transform how people shop, discover, and connect with fashion.", "text": "<p> Aiuta.com</p>"}, {"location": "#our-products-documentation", "title": "Our Products Documentation", "text": "StudioVirtual Try-On <p>Produce and enhance studio-grade product visuals for online stores and marketing</p> <ul> <li>Cut costs</li> <li>Shorten production cycles</li> <li>Keep your product visuals consistent</li> </ul> <p></p> <p>Let your customers visualize how clothes look on them \u2014 instantly and accurately</p> <ul> <li>High quality visualisation</li> <li>Up to 7x faster than the average competitor</li> <li>Preserve pose and body shape</li> </ul>"}, {"location": "#available-as", "title": "Available as", "text": "<ul> <li> <p> API</p> <p> Getting Started </p> </li> <li> <p> Web APP</p> <p>Coming soon    </p> </li> </ul>"}, {"location": "#available-as_1", "title": "Available as", "text": "<ul> <li> <p> Android SDK</p> <p><pre><code>minSdk: 23\ntargetSdk: 36\n</code></pre> Overview Developer </p> </li> <li> <p> iOS SDK</p> <p><pre><code>iOS: 13+\nswift: 5.10\n</code></pre> Overview Developer </p> </li> <li> <p> Flutter SDK  Android  iOS</p> <p><pre><code>sdk: &gt;=3.1.0 &lt;4.0.0\nflutter: &gt;= 3.19.6\n</code></pre> Overview Developer </p> </li> <li> <p> Web SDK</p> <p>Coming soon</p> </li> <li> <p> Shopify APP</p> <p> Overview </p> </li> <li> <p> API</p> <p> Getting Started </p> </li> </ul>"}, {"location": "api/", "title": "Enhance your productswith Aiuta APIs", "text": "<p>Use Aiuta APIs to give yourself a competitive advantage by embedding the power of our API products within your own sales journey.</p>"}, {"location": "api/#studio", "title": "Studio", "text": "<p>Produce and enhance studio-grade product visuals for online stores and marketing</p> <p> Workflow Reference </p>"}, {"location": "api/#virtual-try-on", "title": "Virtual Try-On", "text": "<p>Let your customers visualize how clothes look on them \u2014 instantly and accurately</p> <p> Workflow Reference </p>"}, {"location": "api/#api-portal", "title": "API Portal", "text": "<p>Create an account to access the API and obtain your credentials.</p> <ul> <li> <p> Open API Portal</p> <p> Getting started guide</p> </li> <li> <p> View status and incidents</p> <p>Check availability and generation latency</p> </li> </ul>"}, {"location": "api/getting-started/", "title": "Getting Startedwith Aiuta API Portal", "text": ""}, {"location": "api/getting-started/#creating-an-account", "title": "Creating an Account", "text": "<p>To create an account, start by selecting either the <code>Sign Up</code> or <code>Login</code>  option from the top header. A pop-up window will appear with tabbed options, allowing you to either log in with an existing account or sign up for a new one. If you choose the \"Sign Up\" link, the pop-up will automatically display the corresponding tab.</p> <p>To complete the sign-up process, simply follow the on-screen instructions, and your account will be ready in no time. </p> <p>Verify your email address</p> <p>After registering, you will receive an email prompting you to verify your email address.</p>"}, {"location": "api/getting-started/#obtaining-credentials", "title": "Obtaining credentials", "text": "Just registeredAlready subscribed <p>To obtain credentials for accessing an API product, you must first subscribe to at least one of its plans . Subscribing to a plan is straightforward: simply select the desired product and click \"Subscribe,\" following the prompts on the page.</p> <p>After subscribing to the API product of your choice, you will be able to obtain your credentials from the subscription details. Upon completing the subscription process, you will be immediately redirected to a page displaying all the necessary details of the product, including the required credentials.</p> <p>To retrieve the credentials for a product you have previously subscribed to, navigate to the <code>My Subscriptions</code>  section at the top of the page, and select the product for which you want to view the credentials.</p> <p></p> <p>There you will be able to find</p> API keySubscription IDJWT <p>On the subcription Details tab, under the Overview section</p> <p></p> <p>In the URL address of the subscription details page</p> <pre><code>https://developer.aiuta.com/subscriptions/{SUBSCRIPTION_ID}/Details\n</code></pre> <p>On the subcription Details tab, under the Overview section</p> <p></p> <p>To be used on your implementation of the server side auth component</p>"}, {"location": "api/getting-started/#authentication", "title": "Authentication", "text": "<p>Authentication is mandatory for some calls such as starting the image generation and is optional for the others trivial calls such as checking the status of the operation. </p> <p>Optional authentication</p> <p>You may use <code>x-user-id</code> header instead of authentication header with a secret value for the trivial calls. The value of <code>x-user-id</code> header should be your subscription ID (such as <code>66ec1726e728c1405e5ebca2</code>). You can find the subscription ID in the URL of a subscription you have.</p> Using API keyUsing JWT <p>The API key authentication method is used for server-side integrations with the Aiuta API. It involves a static key that must be included in each API request within the <code>X-API-Key</code> HTTP header.</p> <p>Using JSON Web Tokens (JWT) is the most flexible and secure way to access the Aiuta API. Once you have the secret, the tokens can be issued by your backend and then verified by Aiuta to ensure that the request originated from your application and to check the integrity of the request.</p> <p>Also you manage the expiration time of the tokens you generate by setting <code>exp</code> claim. Setting the expiration time will prevent misuse of compromised tokens.</p> <p>The flow is as follows:</p> <ul> <li>The client requests a token from your backend service using your internal client-server communication. The client can provide an arbitrary set of arguments to be included in the payload to be signed.</li> <li>Your application backend validates the parameters provided by the client (e.g., input image to generate, SKU ID, etc.) and issues a JWT using the private key configured during the Obtaining credentials step. All parameters significant to security and cost efficiency should be included in the JWT payload. You can also control the token\u2019s expiration time.</li> <li>The JWT can then be used by your application client to access the Aiuta API until it expires.</li> </ul> <p>Refer to the documentation for detailed instructions on implementing the backend component</p> <p>To make requests to the Aiuta API, use the Bearer Authentication HTTP scheme with the issued token: <pre><code>Authorization: Bearer &lt;token&gt;\n</code></pre></p>"}, {"location": "api/getting-started/#api-products", "title": "API Products", "text": "<p>Continue with our API Products</p>"}, {"location": "api/getting-started/#studio", "title": "Studio", "text": "<p>Produce and enhance studio-grade product visuals for online stores and marketing</p> <p> Workflow Reference </p>"}, {"location": "api/getting-started/#virtual-try-on", "title": "Virtual Try-On", "text": "<p>Let your customers visualize how clothes look on them \u2014 instantly and accurately</p> <p> Workflow Reference </p>"}, {"location": "api/server-side-auth-component/", "title": "JWT server-side auth example", "text": "<p>Here is the example of the required backend logic that needs to be implemented to support JWT authentication scheme.</p> <p>Using this scheme, you can issue an authentication token for your client using your private key after properly validating the request parameters. This allows you to decide whether the client still has the ability to use the Aiuta product, enabling you to enforce any per-client limits. Additionally, you can include specific parameters in the JWT payload to ensure that the client uses these exact values when making requests to Aiuta. For example, you can include parameters required for image generation to ensure that the issued token will be used for this generation only.</p> <p>See the sequence diagram showing how Aiuta SDK uses the JWT to authenticate requests</p> Python <p>You need to install the following dependencies:</p> <pre><code>pip install PyJWT\n</code></pre> <p>And then implement API handle like this:</p> <pre><code>import datetime\nimport json\n\nimport jwt\nfrom flask import Flask\nfrom flask import request\nfrom flask import Response\n\njwt_issuer = \"&lt;ISSUER_ID&gt;\" # (1)!\njwt_secret = \"&lt;JWT_SECRET&gt;\" # (2)!\n\ntoken_valid_time = datetime.timedelta(seconds=60)\n\napp = Flask(__name__)\n\n\n@app.route(\"/aiuta_jwt\", methods=[\"GET\", \"POST\"])\ndef get_jwt_token():\n    issued_at = datetime.datetime.utcnow()\n    expires_at = issued_at + token_valid_time\n    meta = {\n        \"iss\": jwt_issuer,\n        \"iat\": issued_at,\n        \"exp\": expires_at,\n    }\n\n    payload = {}\n    if request.args:\n        payload.update(request.args)\n    if request.is_json:\n        payload.update(request.json)\n    payload.update(meta)\n\n    token = jwt.encode(\n        payload,\n        jwt_secret,\n        algorithm=\"HS256\",\n    )\n    return Response(\n        json.dumps({\"type\": \"jwt\", \"token\": token}),\n    )\n\n\nif __name__ == \"__main__\":\n    app.run(debug=True, host=\"0.0.0.0\", port=8080)\n</code></pre> <ol> <li> <p>Find the value in your API plan subscription </p> <p>Field in the UI</p> <p>JWT key (iss)</p> </li> <li> <p>Find the value in your API plan subscription </p> <p>Field in the UI</p> <p>JWT secret (to generate HS256 signature)</p> </li> </ol>"}, {"location": "api/studio/", "title": "Studio API", "text": "<p>Produce and enhance studio-grade product visuals for online stores and marketing</p> <ul> <li>Cut costs</li> <li>Shorten production cycles</li> <li>Keep your product visuals consistent</li> </ul> <ul> <li>  Discover Aiuta Studio </li> </ul>"}, {"location": "api/studio/#quick-start", "title": "Quick Start", "text": "<ul> <li>Get started with Aiuta API Protal</li> <li>Take a look at the Workflow</li> <li>Check out the API Reference</li> </ul>"}, {"location": "api/studio/reference/", "title": "Studio", "text": ""}, {"location": "api/studio/workflow/", "title": "Studio Workflow", "text": "Sequence Diagram: Providing product images as URLs <pre><code>sequenceDiagram\n    autonumber\n\n    participant BE as Your&lt;br&gt;Backend\n    participant API as Aiuta&lt;br&gt;API\n\n    BE-&gt;&gt;API: Generate operation (product info with product images' URLs, set of image types to generate)\n    API--&gt;&gt;BE: Return Response (operation_id)\n\n    loop\n        BE-&gt;&gt;API: Get operation (operation_id)\n        API--&gt;&gt;BE: Return Operation object\n        BE-&gt;&gt;BE: Check status&lt;br&gt;operation field\n\n        critical status\n            option SUCCESS\n                Note right of BE: generation_result field&lt;br&gt; in resulting object\n            option FAILED\n                rect\n                    Note right of BE: error field&lt;br&gt;contains error message\n                end\n        end\n    end</code></pre> Sequence Diagram: Manual images upload <pre><code>sequenceDiagram\n    autonumber\n\n    participant BE as Your&lt;br&gt;Backend\n    participant API as Aiuta&lt;br&gt;API\n\n    loop\n        BE-&gt;&gt;API: Upload an image (bytes)\n        API--&gt;&gt;BE: Return Response (id, url)\n    end\n\n    BE-&gt;&gt;API: Generate operation (uploaded_product_image_ids, product info, set of image types to generate)\n    API--&gt;&gt;BE: Return Response (operation_id)\n\n    loop\n        BE-&gt;&gt;API: Get operation (operation_id)\n        API--&gt;&gt;BE: Return Operation object\n        BE-&gt;&gt;BE: Check status&lt;br&gt;operation field\n\n        critical status\n            option SUCCESS\n                Note right of BE: generation_result field&lt;br&gt; in resulting object\n            option FAILED\n                rect\n                    Note right of BE: error field&lt;br&gt;contains error message\n                end\n        end\n    end</code></pre> Sequence Diagram: On-figure images creation with regeneration step <pre><code>sequenceDiagram\n    autonumber\n\n    participant BE as Your&lt;br&gt;Backend\n    participant API as Aiuta&lt;br&gt;API\n\n    BE-&gt;&gt;API: Generate operation (product info with product images' URLs, initial set of images type to generate)\n    API--&gt;&gt;BE: Return Response (initial_operation_id)\n\n    loop\n        BE-&gt;&gt;API: Get operation (initial_operation_id)\n        API--&gt;&gt;BE: Return Operation object\n        BE-&gt;&gt;BE: Check status&lt;br&gt;operation field\n\n        critical status\n            option SUCCESS\n                Note right of BE: generation_result field&lt;br&gt; in resulting object\n            option FAILED\n                rect\n                    Note right of BE: error field&lt;br&gt;contains error message\n                end\n        end\n    end\n\n    BE-&gt;&gt;API: Regenerate operation (initial_operation_id, new set of images types to generate/regenerate)\n    API--&gt;&gt;BE: Return Response (regeneration_operation_id)\n\n    loop\n        BE-&gt;&gt;API: Get regeneration operation (regeneration_operation_id)\n        API--&gt;&gt;BE: Return Operation object\n        BE-&gt;&gt;BE: Check status&lt;br&gt;operation field\n\n        critical status\n            option SUCCESS\n                Note right of BE: generation_result field&lt;br&gt; in resulting object\n            option FAILED\n                rect\n                    Note right of BE: error field&lt;br&gt;contains error message\n                end\n        end\n    end</code></pre>"}, {"location": "api/studio/workflow/#1-upload-input-images-optional", "title": "1. Upload input images (optional)", "text": "<p>You can either upload product images or provide their URLs directly. Use this step if you prefer to upload images first. These images will represent the product for which other types of product visuals will be generated. For each uploaded image, you\u2019ll receive an object containing its ID and URL. Use the image IDs in the next step to specify which product images to generate.</p> <ul> <li>Try uploading an image</li> </ul>"}, {"location": "api/studio/workflow/#2-create-a-generation-operation", "title": "2. Create a generation operation", "text": "<p>Submit a request to generate product images using either uploaded image IDs or direct image URLs, along with optional product metadata (such as category, title, and description). If the request is successful, you\u2019ll receive an object containing an <code>operation_id</code>. This ID can be used to track progress and retrieve results.</p> <ul> <li>Try creating a generation operation</li> </ul>"}, {"location": "api/studio/workflow/#3-get-the-operation-results", "title": "3. Get the operation results", "text": "<p>Use the <code>operation_id</code> from the previous step to check the status of the operation. The operation is complete when its status becomes <code>SUCCESS</code> or <code>FAILED</code>. If successful, the response will include generated image URLs. If an error occurs, the <code>error</code> field will contain details.</p> <ul> <li>Try getting the operation results</li> </ul>"}, {"location": "api/studio/workflow/#4-regenerate-specific-images-on-figure-only-optional", "title": "4. Regenerate specific images (on-figure only, optional)", "text": "<p>This step is available for on-figure image generation only. Submit a regeneration request using the <code>operation_id</code> from an existing generation operation to reuse all configuration and model settings. Specify the list of image types you want to regenerate \u2014 including any new types not present in the original request \u2014 and optionally change the number of image variants to generate per type.</p> <ul> <li>Try creating a regeneration operation</li> </ul>"}, {"location": "api/try-on/", "title": "Virtual Try-On API", "text": "<p>Let your customers visualize how clothes look on them \u2014 instantly and accurately</p> <ul> <li>High quality visualisation</li> <li>Up to 7x faster than the average competitor</li> <li>Preserve pose and body shape</li> </ul> <ul> <li>  Find more about Virtual Try-On on aiuta.com </li> </ul>"}, {"location": "api/try-on/#quick-start", "title": "Quick Start", "text": "<ul> <li>Get started with Aiuta API Protal</li> <li>Take a look at the Workflow</li> <li>Check out the API Reference</li> </ul>"}, {"location": "api/try-on/#alternative-sdk", "title": "Alternative \u2013 SDK", "text": "<p>Aiuta SDKs is built on top of Aiuta Virtual Try-On API, providing a pre-built UI layer and additional convenience features while maintaining the same core functionality.</p>"}, {"location": "api/try-on/reference/", "title": "Digital Try On", "text": ""}, {"location": "api/try-on/workflow/", "title": "Virtual Try-On Workflow", "text": "Sequence Diagram <pre><code>sequenceDiagram\n    autonumber\n\n    participant BE as Your&lt;br&gt;Backend\n    participant API as Aiuta&lt;br&gt;API\n\n    alt\n        BE-&gt;&gt;API: Upload an image (bytes)\n        API--&gt;&gt;BE: Return AiutaImage (id, url)\n    else\n        BE-&gt;&gt;API: Get predefined models\n        API--&gt;&gt;BE: Return categories list&lt;br&gt;of AiutaImage (id, url)\n    end\n\n    BE-&gt;&gt;API: Generate operation (uploaded_image_id, sku_id)\n    API--&gt;&gt;BE: Return Response (operation_id)\n\n    loop\n        BE-&gt;&gt;API: Get operation (operation_id)\n        API--&gt;&gt;BE: Return Operation object\n        BE-&gt;&gt;BE: Check status&lt;br&gt;operation field\n\n        critical status\n            option SUCCESS\n                Note right of BE: generated_images field&lt;br&gt;with url in resulting object\n            option FAILED\n                rect\n                    Note right of BE: error field&lt;br&gt;contains error message\n                end\n        end\n    end</code></pre>"}, {"location": "api/try-on/workflow/#1-upload-an-image-or-use-predefined-model", "title": "1. Upload an image or use predefined model", "text": "Upload an imageUse predefined model <p>Upload an image which you want to use as in input for generation. It may be some model whom you want to dress in specific clothes item. You will receive an object with image <code>id</code> and <code>url</code> as a result. Use image <code>id</code> on the next step to specify the <code>uploaded_image_id</code> for generation.</p> <p> Try uploading an image </p> <p>Use the list of predefined models API endpoint to retrieve the available models. Each predefined model\u2019s image has an <code>id</code>, which is used in the next step to specify the <code>uploaded_image_id</code> for generation.</p>"}, {"location": "api/try-on/workflow/#2-create-a-generation-operation-request", "title": "2. Create a generation operation request", "text": "<p>Provide <code>uploaded_image_id</code> received on the previous step as well as SKU identifiers: <code>sku_id</code> and optional <code>sku_catalog_name</code> (<code>\"main\"</code> by default). You will receive an object with <code>operation_id</code> of created image generation operation in case of successful request or an error message otherwise.</p> <ul> <li>Try creating a generation operation request</li> </ul>"}, {"location": "api/try-on/workflow/#3-get-the-operation-results", "title": "3. Get the operation results", "text": "<p>Use an <code>operation_id</code> from the previous step to retrieve the operation status. Operation became completed once operation status turns to <code>SUCCESS</code> or <code>FAILED</code>. In case of successfully completed operation you will receive <code>generated_images</code> with <code>url</code> in resulting object. If an error occurred you can check error message in the <code>error</code> field.</p> <ul> <li>Try getting the operation results</li> </ul>"}, {"location": "sdk/", "title": "Aiuta Virtual Try-On SDK", "text": "<p>Let your customers visualize how clothes look on them \u2014 instantly and accurately</p>"}, {"location": "sdk/#aiuta-sdk-benefits", "title": "Aiuta SDK Benefits", "text": "<ul> <li>High quality visualisation, preserve pose and body shape</li> <li>Simple integration into your existing application with default settings</li> <li>Flexible UI customization to match your brand</li> <li>Rich set of features for creating a unique user experience</li> <li>Full control over user data and settings</li> <li>Detailed usage analytics on every SDK page and feature</li> <li>Ready-made solutions for interacting with your application</li> </ul>"}, {"location": "sdk/#platform-availability", "title": "Platform Availability", "text": "<ul> <li> <p> Android</p> <pre><code>minSdk: 23\ntargetSdk: 36\n</code></pre> </li> <li> <p> iOS</p> <pre><code>iOS: 13+\nswift: 5.10\n</code></pre> </li> <li> <p> Flutter  Android  iOS</p> <pre><code>sdk: &gt;=3.1.0 &lt;4.0.0\nflutter: &gt;= 3.19.6\n</code></pre> </li> <li> <p> Web</p> <p>Coming soon</p> </li> </ul>"}, {"location": "sdk/#alternative-direct-api", "title": "Alternative \u2013 Direct API", "text": "<p>If you prefer even more control over the implementation or have specific requirements, you can use the Aiuta API directly. This approach gives you complete flexibility in building your custom virtual try-on solution.</p> <p>Learn more about Aiuta Virtual Try-On API</p> <p>Aiuta SDK is built on top of the same API, providing a pre-built UI layer and additional convenience features while maintaining the same core functionality.</p>"}, {"location": "sdk/demo-apps/", "title": "SDK Demo Apps", "text": "<p>Experience Aiuta SDK in action through our demo applications. These applications showcase the full range of virtual try-on capabilities and customization options available in the SDK.</p>"}, {"location": "sdk/demo-apps/#available-demo-apps", "title": "Available Demo Apps", "text": "<ul> <li> Download on the App Store</li> <li> Get it on Google Play</li> </ul>"}, {"location": "sdk/demo-apps/#using-the-demo", "title": "Using the Demo", "text": "<ol> <li>Download the appropriate demo app for your platform <sup>1</sup></li> <li>Use <code>AIUTADEMO</code> or your own code <sup>2</sup>\u00a0 to access the demo catalog</li> <li>Select an item from the catalog and tap \"Try on\" </li> <li>Experience the SDK and virtual try-on in action</li> <li>Explore various SDK pages and features</li> </ol>"}, {"location": "sdk/demo-apps/#features-available", "title": "Features Available", "text": "<p>The demo applications helps you to:</p> <ul> <li>Experience the complete virtual try-on flow</li> <li>Explore the user interface and navigation</li> <li>Test the performance and quality of virtual try-ons</li> <li>Experience the SDK's integration capabilities</li> <li>Demonstrate the technology to stakeholders</li> <li>Plan your implementation</li> </ul> <ol> <li> <p>The iOS demo app uses unlisted distribution on the App Store, discoverable only with a direct link above.\u00a0\u21a9</p> </li> <li> <p>You can arrange with Aiuta to create a test catalog with your own products, and we will provide you with a personal access code.\u00a0\u21a9</p> </li> </ol>"}, {"location": "sdk/about/analytics/analytics/", "title": "Analytics Events", "text": "<p>This document describes the analytics events that can be tracked within the Aiuta SDK. These events are triggered in response to user actions or state changes and can be used to track user interactions or system behaviors in your analytics system.</p>"}, {"location": "sdk/about/analytics/analytics/#event-types", "title": "Event Types", "text": "Type Parameters Description <code>configure</code> <code>*</code> SDK was configured with a features set <code>session</code> <code>flow</code> Start of a new session, SDK about to present it's UIThe page event is expected to be the following <code>page</code> <code>pageId</code><code>productIds</code> Navigation to a specific page in the SDK UI <code>onboarding</code> <code>event</code><code>pageId</code><code>productIds</code> Interactions during the onboarding process, including viewinginformational screens and providing necessary consents fordata processing <code>picker</code> <code>event</code><code>pageId</code><code>productIds</code> Interactions with the image selection interface, including cameraaccess, gallery selection, and predefined model selection <code>tryOn</code> <code>event</code><code>pageId</code><code>productIds</code> Virtual try-on operations reports, including photo upload,processing status, and completion or error states <code>results</code> <code>event</code><code>pageId</code><code>productIds</code> Interactions with the generated try-on results, including sharing,saving to wishlist, adding to cart, or requesting new generations <code>feedback</code> <code>event</code><code>pageId</code><code>productIds</code> Feedback on the generated results, including positive ratings anddetailed negative feedback with optional comments <code>history</code> <code>event</code><code>pageId</code><code>productIds</code> Interactions with previously generated resultsand managing saved generations <code>share</code> <code>event</code><code>pageId</code><code>productIds</code> Events related to the user's desire to share/save generated images <code>exit</code> <code>pageId</code><code>productIds</code> Exit from the SDK on a specific page,indicating the final point in the user's journey"}, {"location": "sdk/about/analytics/analytics/#identifiers", "title": "Identifiers", "text": "<p>Identifiers to track navigation pages, products, and 3<sup>rd</sup> party apps in the Aiuta SDK.</p>"}, {"location": "sdk/about/analytics/analytics/#page", "title": "Page", "text": "Page Description <code>welcome</code> Optional Welcome Screen that introduces users to the SDK functionalityand provides an entry point to start the try-on process <code>howItWorks</code> Informational screen explaining the virtual try-on process,including samples of expected outcomes <code>bestResults</code> Guide screen showing best practices for achieving optimaltry-on results with example images and tips <code>consent</code> Screen for obtaining user consent for data processing andprivacy policy acceptance in standalone mode <code>imagePicker</code> Interface for selecting or capturing images, including cameraaccess, gallery browsing, uploads history, and predefined model selection <code>loading</code> Transition screen displayed during image processing andvirtual try-on generation <code>results</code> Screen displaying generated try-on results with options toshare, save, or request new generations <code>history</code> Screen showing previously generated try-on results withoptions to view, share, or manage saved generations"}, {"location": "sdk/about/analytics/analytics/#products", "title": "Products", "text": "<p>This is a list of product identifiers in the context of the current try-on session or other SDK interaction. It can be empty, for example, when opening a separate screen to view the user's generation history, where there is no try-on context. In the case of a single try-on, the list will contain one identifier. Accordingly, when using multi-try-on, the list will contain identifiers of all products from the outfit.</p>"}, {"location": "sdk/about/analytics/analytics/#app", "title": "App", "text": "<p>A string representing 3<sup>rd</sup> party app/package/bundle id that was used to receive data from the SDK directly or through system APIs.</p>"}, {"location": "sdk/about/analytics/analytics/#specific-events", "title": "Specific Events", "text": "<p>Types, except for <code>page</code>, <code>exit</code>, <code>configure</code> and <code>session</code>, contain an <code>event</code> parameter that indicates which specific event occurred in that type.</p> <p>Compatibility</p> <p>In widely used analytics systems, events usually have <code>name</code>s and <code>parameters</code>. For structure, we wanted to group events into more general <code>types</code> and detail them according to specific <code>events</code> within the group. You can consider this as a <code>subtype</code>, or combine the <code>type</code> and <code>event</code> into a single event <code>name</code>.</p>"}, {"location": "sdk/about/analytics/analytics/#onboarding", "title": "Onboarding", "text": "Event Parameters Description <code>welcomeStartClicked</code> Initial interaction with the Welcome Screen, indicatinguser's intent to begin the try-on process <code>onboardingFinished</code> Completion of all onboarding steps <code>consentsGiven</code> <code>consentIds</code> Explicit acceptance of required consents, includingdata processing and privacy policy agreements"}, {"location": "sdk/about/analytics/analytics/#picker", "title": "Picker", "text": "Event Description Camera <code>cameraOpened</code> Activation of the device camera for capturing newphotos for the try-on process <code>newPhotoTaken</code> Successful capture of a new photo using thedevice camera System Photos <code>photoGalleryOpened</code> Access to the device's photo gallery for selectingexisting images <code>galleryPhotoSelected</code> Selection of an existing photo from the device'sgallery for try-on Uploads history <code>uploadsHistoryOpened</code> Access to previously uploaded photos within theSDK's history <code>uploadedPhotoSelected</code> Selection of a previously uploaded photo fromthe SDK's history <code>uploadedPhotoDeleted</code> Removal of a previously uploaded photo fromthe SDK's history Predefined models <code>predefinedModelsOpened</code> Access to the list of predefined model imagesavailable for try-on <code>predefinedModelSelected</code> Selection of a predefined model image forthe try-on process"}, {"location": "sdk/about/analytics/analytics/#try-on", "title": "Try-On", "text": "Event Parameters Description <code>initiated</code> Start processing photo <code>photoUploaded</code> Successful upload of a selected or capturedphoto for processing <code>tryOnStarted</code> Initiation of the virtual try-on process withthe selected image <code>tryOnFinished</code> <code>uploadDuration</code><code>tryOnDuration</code><code>downloadDuration</code><code>totalDuration</code> <sup>1</sup> Successful completion of the virtual try-onprocess with generated results<code>Duration</code> of each step and the entire processin seconds (floating-point) <code>tryOnAborted</code> <code>abortReason</code> Cancellation of the try-on process beforecompletion <code>tryOnError</code> <code>errorType</code><code>errorMessage</code> Occurrence of an error during the try-on process,requiring user attention. <code>errorMessage</code> containsinformation for developers and is not for users"}, {"location": "sdk/about/analytics/analytics/#results", "title": "Results", "text": "Event Description <code>productAddToWishlist</code> Adding of a product from the try-on resultsto the user's wishlist <code>productAddToCart</code> Adding of a product from the try-on resultsto the shopping cart <code>pickOtherPhoto</code> Request to start a new try-on process witha different photo"}, {"location": "sdk/about/analytics/analytics/#feedback", "title": "Feedback", "text": "Event Parameters Description <code>positive</code> The user left positive feedback on try-on results withno specific issues reported <code>negative</code> <code>option</code><code>text</code> The user report of issues with try-on results, includingspecific problem category and optionaldetailed feedback"}, {"location": "sdk/about/analytics/analytics/#history", "title": "History", "text": "Event Description <code>generatedImageDeleted</code> Removal of a previously generated try-onresult from the history"}, {"location": "sdk/about/analytics/analytics/#share", "title": "Share", "text": "Event Parameters Description <code>initiated</code> The user clicked the share button a system dialog will be displayed <code>succeeded</code> <code>targetId</code> The images were successfully shared to the 3<sup>rd</sup> party application <code>canceled</code> <sup>2</sup> <code>targetId?</code> The user canceled the share process <code>failed</code> <sup>2</sup> <code>targetId?</code> A system error occurred while sharing images <code>screenshot</code> The user took a screenshot of the SDK page"}, {"location": "sdk/about/analytics/analytics/#parameters", "title": "Parameters", "text": ""}, {"location": "sdk/about/analytics/analytics/#configuration", "title": "Configuration", "text": "Parameter <code>authType</code> <code>welcomeScreenFeatureEnabled</code> <code>onboardingFeatureEnabled</code> <code>consentFeatureType</code> <code>imagePickerCameraFeatureEnabled</code> <code>imagePickerPredefinedModelFeatureEnabled</code> <code>imagePickerUploadsHistoryFeatureEnabled</code> <code>tryOnFitDisclaimerFeatureEnabled</code> <code>tryOnFeedbackFeatureEnabled</code> <code>tryOnFeedbackOtherFeatureEnabled</code> <code>tryOnGenerationsHistoryFeatureEnabled</code> <code>tryOnWithOtherPhotoFeatureEnabled</code> <code>shareFeatureEnabled</code> <code>shareWatermarkFeatureEnabled</code> <code>wishlistFeatureEnabled</code>"}, {"location": "sdk/about/analytics/analytics/#session", "title": "Session", "text": "Flow Description <code>tryOn</code> Starting the SDK with tryOn flow to upload photo and generate results <code>history</code> Starting the SDK to show previously generated gallery <ol> <li> <p>The <code>totalDuration</code> time from when the user clicks the \"Try On\" button to when the results are displayed.   It may be greater than the sum of the <code>uploadDuration</code>, <code>tryOnDuration</code>, and <code>downloadDuration</code> as it includes the request to start the operation and internal transitions.\u00a0\u21a9</p> </li> <li> <p>Available only on iOS.\u00a0\u21a9\u21a9</p> </li> </ol>"}, {"location": "sdk/about/analytics/errors/", "title": "Try-On Errors &amp; Aborts", "text": "<p>This document describes all possible errors and cancelation reasons that can occur during the try-on process.</p>"}, {"location": "sdk/about/analytics/errors/#try-on-errors", "title": "Try-On Errors", "text": "<p>Sent in the <code>errorType</code> field of <code>tryOn.tryOnError</code></p> Error Type Description <code>preparePhotoFailed</code> Any reason users' photo cannot be processed by the SDK,that is not related to the try-on generation process on the server.This covers failure to read, downscale, compress and get JPG dataof the photo. <code>uploadPhotoFailed</code> Any reason users' photo cannot be uploaded to the server.This may be caused by network issues, server issues, or any other reason. <code>authorizationFailed</code> The request to the server was not authorized. <code>requestOperationFailed</code> SDK failed to make a request to the server to start the try-on process.This may be caused by network issues, server issues, or any other reason. <code>startOperationFailed</code> SDK successfully made a request to the server to start the try-on process,but the server returned an error. <code>operationFailed</code> SDK successfully made a request to the server to start the try-on process,operation was started, but the server returned an error while processingthe operation, and it was failed. SDK stopped waiting for the result. <code>operationTimeout</code> SDK successfully made a request to the server to start the try-on process,operation was started, but the status of the operation was not changedfor a long time, and the SDK stopped waiting for the result. <code>operationEmptyResults</code> Try-on operation was completed, but the empty result was returned. <code>downloadResultFailed</code> Try-on operation was completed, but the result was not downloaded.This may be caused by network issues, server issues, or any other reason. <code>internalSdkError</code> Unexpected error occurred during the try-on process.Those should be reported to the SDK developers, as it is notsupposed to happen."}, {"location": "sdk/about/analytics/errors/#try-on-aborts", "title": "Try-On Aborts", "text": "<p>Sent in the <code>abortReason</code> field of <code>tryOn.tryOnAborted</code></p> Abort Type Description <code>operationAborted</code> SDK successfully made a request to the server to start the try-on process,operation was started, but the server aborted the operation,because of the invalid user input photo. <code>userCancelled</code> Operation was in progress, but user closes the SDKand background execution was disabled"}, {"location": "sdk/about/diagrams/authentication/", "title": "Request Authentication", "text": "<p>Authentication is mandatory for some calls, such as starting image generation, and optional for other trivial calls, such as checking the status of an operation. Based on the configuration provided, the SDK will select the request authentication scheme according to the following table</p> Auth Mandatory Optional JwtAuth <code>JWT</code> <code>subscriptionId</code> ApiKeyAuth <code>apiKey</code> <code>apiKey</code> <p>Preferred authentication type</p> <p>Using JSON Web Tokens (JWT) is the most flexible and secure way to access the Aiuta services, while the ApiKey authentication method is best used only for server-side integration. But it's up to you. </p> <p> Read more about API Authentication</p> <p>Here are all authentication sequence options for requests sent by the SDK to the Aiuta API.</p> <code>JwtAuth</code> \u2022 <code>JWT</code><code>JwtAuth</code> \u2022 <code>subscriptionId</code><code>ApiKeyAuth</code> \u2022 <code>apiKey</code> <pre><code>sequenceDiagram\n    autonumber\n    actor USR as \u2800&lt;br&gt;User\n    participant APP as Your&lt;br&gt;App\n    participant BE as Your&lt;br&gt;Backend\n    participant SDK as Aiuta&lt;br&gt;SDK\n    participant API as Aiuta&lt;br&gt;Backend\n    participant GS as Storage\n    note over GS: Aiuta or Yours\n\n    USR-&gt;&gt;SDK: Start some action\n    activate SDK\n    SDK-&gt;&gt;APP: Request JWT (params)\n    APP-&gt;&gt;BE: Request new JWT (params)\n    BE-&gt;&gt;BE: Generate JWT\n    Note over BE: Validating the request parameters\n    BE--&gt;&gt;APP: Return generated JWT\n    APP--&gt;&gt;SDK: Provide JWT\n    SDK-&gt;&gt;API: Make request\n    Note over SDK,API: Authorization: Bearer &lt;token&gt;\n    API-&gt;&gt;API: Validate JWT\n\n    break JWT is invalid\n    rect\n        API--&gt;&gt;SDK: Retun 401 Unauthorized\n        SDK--&gt;&gt;USR: Show something went wrong\n    end\n    end\n\n    API--&gt;&gt;SDK: Return response\n    SDK--&gt;&gt;USR: Provide UI feedback / result\n    deactivate SDK</code></pre> <p>See also</p> <ul> <li>the JwtAuth configuration scheme in the SDK</li> <li>JWT server-side auth example for more details on securely generating JWTs</li> </ul> <pre><code>sequenceDiagram\n    autonumber\n    actor USR as \u2800&lt;br&gt;User\n    participant APP as Your&lt;br&gt;App\n    participant BE as Your&lt;br&gt;Backend\n    participant SDK as Aiuta&lt;br&gt;SDK\n    participant API as Aiuta&lt;br&gt;Backend\n    participant GS as Storage\n    note over GS: Aiuta or Yours\n\n    USR-&gt;&gt;SDK: Start some action\n    activate SDK\n    SDK-&gt;&gt;SDK: Add Subscription ID&lt;br&gt;to the request Headers\n    SDK-&gt;&gt;API: Make request\n    Note over SDK,API: x-user-id: &lt;subscription_id&gt;\n    API-&gt;&gt;API: Match Subscription ID\n    API--&gt;&gt;SDK: Return response\n    SDK--&gt;&gt;USR: Provide UI feedback / result\n    deactivate SDK</code></pre> <p>See also</p> <ul> <li>the JwtAuth configuration scheme in the SDK </li> <li>API documentation obtaining credentials section for instructions on how to find your <code>subscriptionId</code></li> </ul> <pre><code>sequenceDiagram\n    autonumber\n    actor USR as \u2800&lt;br&gt;User\n    participant APP as Your&lt;br&gt;App\n    participant BE as Your&lt;br&gt;Backend\n    participant SDK as Aiuta&lt;br&gt;SDK\n    participant API as Aiuta&lt;br&gt;Backend\n    participant GS as Storage\n    note over GS: Aiuta or Yours\n\n    USR-&gt;&gt;SDK: Start some action\n    activate SDK\n    SDK-&gt;&gt;SDK: Add Api Key&lt;br&gt;to the request Headers\n    SDK-&gt;&gt;API: Make request\n    Note over SDK,API: x-api-key: &lt;api_key&gt;\n    API-&gt;&gt;API: Check Api Key\n    API--&gt;&gt;SDK: Return response\n    SDK--&gt;&gt;USR: Provide UI feedback / result\n    deactivate SDK</code></pre> <p>See also</p> <ul> <li>the ApiKeyAuth configuration scheme in the SDK</li> <li>API documentation obtaining credentials section for instructions on how to get your <code>apiKey</code></li> </ul>"}, {"location": "sdk/about/diagrams/data-flow/", "title": "Data Flow", "text": "<p>Overview sequence diagram covers the handling of user data. It shows a simplified process from obtaining user consent to uploading and displaying images, highlighting the roles of the user, your app, backend services, Aiuta SDK and API. You can view also the complete interaction sequence diagrams.</p> <p>Anonymous photos</p> <p>We do not process any user data other than photos, do not request your user IDs, and all uploaded images remain anonymous to us.</p> <pre><code>sequenceDiagram\n    autonumber\n    actor USR as \u2800&lt;br&gt;User\n    participant APP as Your&lt;br&gt;App\n    participant BE as Your&lt;br&gt;Backend\n    participant SDK as Aiuta&lt;br&gt;SDK\n    participant API as Aiuta&lt;br&gt;Backend\n    participant GS as Storage\n    note over GS: Aiuta or Yours\n\n    opt consent feature\n        USR-&gt;&gt;SDK: Accept Terms Of Use\n        activate SDK\n        note over SDK,APP: May contain any additional consents&lt;br&gt;provided by Your app to request from the user\n        SDK-&gt;&gt;APP: Provide user's consent\n        APP-&gt;&gt;BE: Store user's consent\n    end\n\n    USR-&gt;&gt;SDK: Provide an image\n    SDK-&gt;&gt;API: Upload an image\n\n    activate API\n    API-&gt;&gt;GS: Store input and&lt;br&gt;generated images\n    API-&gt;&gt;API: \u2800\n    Note over API: Generate images ID, form URL that&lt;br&gt;may contains temporary access token\n    API--&gt;&gt;SDK: Return the ID and&lt;br&gt;URL of images\n    deactivate API\n\n    SDK-&gt;&gt;GS: Get result image by the URL\n    activate GS\n    GS--&gt;&gt;SDK: Image data\n    deactivate GS\n\n    SDK-&gt;&gt;APP: Provide the ID and URL of images (input and generated)\n    note over APP: May link this images to the user's identity for the&lt;br&gt;further use in accordance with the user's consent\n    SDK--&gt;&gt;USR: Display generated images\n    deactivate SDK</code></pre> <p>Access tokens</p> <p>Depending on the storage type and access levels set, the URL in the Aiuta API response 8 may contain a temporary access token so that the SDK has time to download 9 the results and 12 show them to the user before access to that URL is expired. For further use 11 under the control of your app and to provide historical data for display in the SDK when using data providers (uploaded and generated), your application must ensure access by refreshing the tokens in the URLs so that the image will be accessible to the SDK without additional authentication.</p>"}, {"location": "sdk/about/diagrams/interaction-sequence/", "title": "Complete Interaction Sequences", "text": "<p>The detailed sequence diagrams below cover all stages of interaction with the Aiuta SDK. The diagrams help visualize the flow of operations, such as initialization and the try-on process, highlighting the roles of the user, your app, backend services and Aiuta SDK. </p> <p>Authentication of requests from the SDK to the Aiuta API/Backend based on the configuration provided is described here.</p>"}, {"location": "sdk/about/diagrams/interaction-sequence/#configuration", "title": "Configuration", "text": "<p>Initialization process from launching the app to displaying products, including SDK configuration.</p> <pre><code>sequenceDiagram\n    autonumber\n    actor USR as \u2800&lt;br&gt;User\n    participant APP as Your&lt;br&gt;App\n    participant BE as Your&lt;br&gt;Backend\n    participant SDK as Aiuta&lt;br&gt;SDK\n    participant API as Aiuta&lt;br&gt;Backend\n    participant GS as Storage\n    note over GS: Aiuta or Yours\n\n    USR-&gt;&gt;APP: Launch the App\n    par\n        APP-&gt;&gt;SDK: Initialize with Configuration\n\n        activate SDK\n        Note over APP,SDK: Includes auth, UI, features, analytics\n        SDK-&gt;&gt;API: Request internal configuration\n        API--&gt;&gt;SDK: Internal configuration\n        opt predefined models feature\n            SDK-&gt;&gt;API: Request predefined models\n            API--&gt;&gt;SDK: Predefined models collection\n        end\n        deactivate SDK\n    and\n        APP-&gt;&gt;BE: Load products\n        BE--&gt;&gt;APP: Products\n        Note over APP,BE: Including a flag whether&lt;br&gt;a virtual try-on is available\n        APP--&gt;&gt;USR: Show products\n        Note over APP,USR: Including a try-on button for&lt;br&gt;products with try-on feature\n    end</code></pre> <p>Please note in 8 \u2013 9 that you should obtain information about the availability of the virtual try-on feature for each of your products from your backend, as the SDK does not receive information about product availability and will attempt to launch a virtual try-on with any product you provide, which may result in an error if that product has not been trained by Aiuta.</p>"}, {"location": "sdk/about/diagrams/interaction-sequence/#usage", "title": "Usage", "text": "<p>Configuration examples</p> <p>You can switch the example configuration presets for the diagrams below to see the differences when using built-in or custom data providers, as well as some differences when using additional functionality.</p> Default configurationCustom configuration <ul> <li>BuiltIn data providers </li> <li>Default features set </li> <li>Embedded legal info</li> </ul> <ul> <li>Custom data providers </li> <li>All features including wishlist </li> <li>Standalone consent when upload a photo</li> </ul>"}, {"location": "sdk/about/diagrams/interaction-sequence/#try-on", "title": "Try-On", "text": "<p>The following sequence diagrams illustrate the process of a virtual try-on using the Aiuta SDK. They cover the entire workflow from the moment a user initiates a try-on request to the final rendering of the virtual try-on result, highlighting key actions such as image selection, authentication, and data processing.</p>"}, {"location": "sdk/about/diagrams/interaction-sequence/#pick-a-photo", "title": "Pick a Photo", "text": "Default configurationCustom configuration <p>Detailed sequence of the user selecting the source image for the virtual try-on.</p> Upload a photoPredefined model / Uploads history <pre><code>sequenceDiagram\n    autonumber\n    actor USR as \u2800&lt;br&gt;User\n    participant APP as Your&lt;br&gt;App\n    participant BE as Your&lt;br&gt;Backend\n    participant SDK as Aiuta&lt;br&gt;SDK\n    participant API as Aiuta&lt;br&gt;Backend\n    participant GS as Storage\n    note over GS: Aiuta or Yours\n\n    USR-&gt;&gt;APP: Tap Try-on Button\n    APP-&gt;&gt;SDK: Start Try-on (Product)\n    activate SDK\n    SDK--&gt;&gt;USR: Present SDK UI\n\n    USR-&gt;&gt;SDK: Select / take a new photo\n    SDK-&gt;&gt;API: Upload a photo\n    activate API\n    API-&gt;&gt;GS: Save input image\n    Note over API,GS: Anonymous.&lt;br&gt;The photo is associated with the&lt;br&gt;app entry, not the user entry\n    API-&gt;&gt;API: Generate image ID, form URL\n    API--&gt;&gt;SDK: Return image ID, URL\n    deactivate API\n\n    SDK-&gt;&gt;SDK: Start Try-on (Image)\n    deactivate SDK</code></pre> <pre><code>sequenceDiagram\n    autonumber\n    actor USR as \u2800&lt;br&gt;User\n    participant APP as Your&lt;br&gt;App\n    participant BE as Your&lt;br&gt;Backend\n    participant SDK as Aiuta&lt;br&gt;SDK\n    participant API as Aiuta&lt;br&gt;Backend\n    participant GS as Storage\n    note over GS: Aiuta or Yours\n\n    USR-&gt;&gt;APP: Tap Try-on Button\n    APP-&gt;&gt;SDK: Start Try-on (Product)\n    activate SDK\n    SDK--&gt;&gt;USR: Present SDK UI\n\n    USR-&gt;&gt;SDK: Select model / previously used photo\n    SDK-&gt;&gt;SDK: Add/Reorder image in the history\n    Note right of SDK: Using the image ID\n\n    SDK-&gt;&gt;SDK: Start Try-on (Image)\n    deactivate SDK</code></pre> <p>Detailed sequence of the user selecting the source image for the virtual try-on with custom configuration.</p> Upload a photoPredefined model / Uploads history <pre><code>sequenceDiagram\n    autonumber\n    actor USR as \u2800&lt;br&gt;User\n    participant APP as Your&lt;br&gt;App\n    participant BE as Your&lt;br&gt;Backend\n    participant SDK as Aiuta&lt;br&gt;SDK\n    participant API as Aiuta&lt;br&gt;Backend\n    participant GS as Storage\n    note over GS: Aiuta or Yours\n\n    USR-&gt;&gt;APP: Tap Try-on Button\n    APP-&gt;&gt;SDK: Start Try-on (Product)\n    activate SDK\n    SDK--&gt;&gt;USR: Present SDK UI\n\n    USR-&gt;&gt;SDK: Tap upload a photo\n    SDK-&gt;&gt;SDK: Check consent obtained\n    opt consent required\n        SDK--&gt;&gt;USR: Present consent page\n        USR-&gt;&gt;SDK: Accept consent terms\n        SDK-&gt;&gt;APP: Call obtainConsentIds (consent IDs)\n        APP-&gt;&gt;BE: Store consents obtained\n    end\n\n    SDK--&gt;&gt;USR: Show options for uploading\n    USR-&gt;&gt;SDK: Select/take a new photo\n    SDK-&gt;&gt;API: Upload a photo\n    activate API\n    API-&gt;&gt;GS: Save input image\n    Note over API,GS: Anonymous.&lt;br&gt;The photo is associated with the&lt;br&gt;app entry, not the user entry\n    API-&gt;&gt;API: Generate image ID, form URL\n    API--&gt;&gt;SDK: Return image ID, URL\n    deactivate API\n\n    SDK-&gt;&gt;SDK: Start Try-on (Image)\n    deactivate SDK</code></pre> <p>See custom 6 \u2013 8 Consent configuration</p> <pre><code>sequenceDiagram\n    autonumber\n    actor USR as \u2800&lt;br&gt;User\n    participant APP as Your&lt;br&gt;App\n    participant BE as Your&lt;br&gt;Backend\n    participant SDK as Aiuta&lt;br&gt;SDK\n    participant API as Aiuta&lt;br&gt;Backend\n    participant GS as Storage\n    note over GS: Aiuta or Yours\n\n    USR-&gt;&gt;APP: Tap Try-on Button\n    APP-&gt;&gt;SDK: Start Try-on (Product)\n    activate SDK\n    SDK--&gt;&gt;USR: Present SDK UI\n\n    USR-&gt;&gt;SDK: Select model / previously used photo\n    SDK-&gt;&gt;APP: Add/Select image in the history\n    APP-&gt;&gt;BE: Update uploads history\n    Note over APP,BE: Recent image first in the list\n    APP--&gt;&gt;SDK: Update data provider observable list\n\n    SDK-&gt;&gt;SDK: Start Try-on (Image)\n    deactivate SDK</code></pre>"}, {"location": "sdk/about/diagrams/interaction-sequence/#making-try-on", "title": "Making Try-On", "text": "<p>The sequence diagram of executing a virtual try-on operation.</p> <pre><code>sequenceDiagram\n    autonumber\n    actor USR as \u2800&lt;br&gt;User\n    participant APP as Your&lt;br&gt;App\n    participant BE as Your&lt;br&gt;Backend\n    participant SDK as Aiuta&lt;br&gt;SDK\n    participant API as Aiuta&lt;br&gt;Backend\n    participant GS as Storage\n    note over GS: Aiuta or Yours\n\n    USR-&gt;&gt;SDK: Pick a Photo / Tap Try-on button in the SDK UI\n    activate SDK\n\n    SDK-&gt;&gt;API: Create operation&lt;br&gt;(image ID, product ID)\n    activate API\n    Note over SDK,API: Secure authenticated request\n    API--&gt;&gt;SDK: Operation ID\n\n    par\n        API-&gt;&gt;API: Generate image\n        API-&gt;&gt;GS: Save generated image\n        deactivate API\n        Note over API,GS: Anonymous.&lt;br&gt;The photo is associated with the&lt;br&gt;app entry, not the user entry\n    and\n        loop internal configuration delay\n            SDK-&gt;&gt;API: Request operation status\n            API--&gt;&gt;SDK: Operation details\n            Note over API,SDK: status, generated_images | error\n            SDK--&gt;&gt;SDK: Check operation status\n            Note over SDK: Repeat while&lt;br&gt;CREATED | IN_PROGRESS | PAUSED\n\n        end\n    end\n\n    critical Check operation status\n        option SUCCESS\n            SDK-&gt;&gt;SDK: Add images to the history\n            SDK-&gt;&gt;GS: Get result image by the URL\n            activate GS\n            GS--&gt;&gt;SDK: Image data\n            deactivate GS\n            SDK--&gt;&gt;USR: Present results\n            Note over SDK,USR: User may interact with results\n\n        option ABORTED\n            rect\n                SDK--&gt;&gt;USR: Report couldn't detect anyone\n            end\n            Note over SDK,USR: User may select other photo and start over\n\n        option FAILED | CANCELLED\n            rect\n                SDK--&gt;&gt;USR: Show something went wrong error\n                deactivate SDK\n            end\n            Note over SDK,USR: User may try again to start over\n    end</code></pre> <p>See details about</p> <ul> <li>2 Authenticating secured requests</li> <li>9 Adding Images to the History</li> </ul>"}, {"location": "sdk/about/diagrams/interaction-sequence/#viewing-results", "title": "Viewing Results", "text": "Default configurationCustom configuration <p>The sequence diagram of executing a virtual try-on operation.</p> <pre><code>sequenceDiagram\n    autonumber\n    actor USR as \u2800&lt;br&gt;User\n    participant APP as Your&lt;br&gt;App\n    participant BE as Your&lt;br&gt;Backend\n    participant SDK as Aiuta&lt;br&gt;SDK\n    participant API as Aiuta&lt;br&gt;Backend\n    participant GS as Storage\n    note over GS: Aiuta or Yours\n\n    Note over SDK,API: After successful try-on generation\n\n    opt Cart\n        USR-&gt;&gt;SDK: Tap Add to cart\n        SDK-&gt;&gt;SDK: Close UI\n        SDK-&gt;&gt;APP: Call addToCart (product ID)\n        APP--&gt;&gt;USR: Cart\n    end\n\n    opt Share\n        USR-&gt;&gt;SDK: Tap Share button\n        SDK--&gt;&gt;USR: Show system share dialog\n        Note over SDK,USR: Generated image to share\n        USR-&gt;&gt;SDK: Complete sharing\n    end\n</code></pre> <p>The sequence diagram of executing a virtual try-on operation.</p> <pre><code>sequenceDiagram\n    autonumber\n    actor USR as \u2800&lt;br&gt;User\n    participant APP as Your&lt;br&gt;App\n    participant BE as Your&lt;br&gt;Backend\n    participant SDK as Aiuta&lt;br&gt;SDK\n    participant API as Aiuta&lt;br&gt;Backend\n    participant GS as Storage\n    note over GS: Aiuta or Yours\n\n    Note over SDK,API: After successful try-on generation\n\n    opt Cart\n        USR-&gt;&gt;SDK: Tap Add to cart\n        SDK-&gt;&gt;SDK: Close UI\n        SDK-&gt;&gt;APP: Call addToCart (product ID)\n        APP--&gt;&gt;USR: Cart\n    end\n\n    opt Wishlist\n        USR-&gt;&gt;SDK: Tap Wishlist button\n        SDK-&gt;&gt;APP: Toggle setProductInWishlist (product ID)\n        APP-&gt;&gt;BE: Update wishlist\n        APP--&gt;&gt;SDK: Update observable wishlistProductIds\n        SDK-&gt;&gt;SDK: Update wishlist button state\n    end\n\n    opt Share\n        USR-&gt;&gt;SDK: Tap Share button\n        SDK-&gt;&gt;APP: Call getShareText (product IDs)\n        APP--&gt;&gt;SDK: Return share text\n        SDK--&gt;&gt;USR: Show system share dialog\n        Note over SDK,USR: Generated image and optional text to share\n        USR-&gt;&gt;SDK: Complete sharing\n    end\n</code></pre> <p>See details about</p> <ul> <li>6-8 Wishlist integration</li> <li>11 Share functionality </li> </ul>"}, {"location": "sdk/about/diagrams/interaction-sequence/#managing-history", "title": "Managing History", "text": "<p>The following sequence diagram illustrates the process of managing images history using the Aiuta SDK. It covers the workflow from adding and viewing the history to deleting existing ones. The diagrams are the same for the uploaded and generated history, as the processes are identical and only differ in the UI.</p>"}, {"location": "sdk/about/diagrams/interaction-sequence/#addingviewing-images-in-the-history", "title": "Adding/Viewing Images in the History", "text": "Default configurationCustom configuration <p>The sequence diagram of adding newly uploaded and generated images to the user's history.</p> <pre><code>sequenceDiagram\n    autonumber\n    actor USR as \u2800&lt;br&gt;User\n    participant APP as Your&lt;br&gt;App\n    participant BE as Your&lt;br&gt;Backend\n    participant SDK as Aiuta&lt;br&gt;SDK\n    participant API as Aiuta&lt;br&gt;Backend\n    participant GS as Storage\n    note over GS: Aiuta or Yours\n\n    Note over SDK,API: After successful try-on generation\n    activate SDK\n    SDK-&gt;&gt;SDK: Add new images&lt;br&gt;to the user's history\n    Note right of SDK: Local storage\n    SDK-&gt;&gt;SDK: Update local history display\n    deactivate SDK\n\n    USR-&gt;&gt;SDK: Tap History Button / Change photo\n    activate SDK\n    SDK--&gt;&gt;USR: Display History Data\n    Note over SDK,USR: Shows list of generated / uploaded&lt;br&gt;images with most recent first\n\n    opt cache not exitst/expired\n        SDK-&gt;&gt;GS: Get images by the URL\n        GS--&gt;&gt;SDK: Images data\n        SDK-&gt;&gt;SDK: Cache images\n        deactivate SDK\n    end</code></pre> <p>See details about Try-on generation process here</p> <p>The sequence diagram of adding newly uploaded and generated images to the user's history using custom data providers.</p> <pre><code>sequenceDiagram\n    autonumber\n    actor USR as \u2800&lt;br&gt;User\n    participant APP as Your&lt;br&gt;App\n    participant BE as Your&lt;br&gt;Backend\n    participant SDK as Aiuta&lt;br&gt;SDK\n    participant API as Aiuta&lt;br&gt;Backend\n    participant GS as Storage\n    note over GS: Aiuta or Yours\n\n    APP-&gt;&gt;SDK: Provide configuration with observable data providers\n    activate SDK\n    SDK--&gt;&gt;SDK: Subscribe to observable&lt;br&gt;history lists changes\n    deactivate SDK\n\n    Note over SDK,API: After successful try-on generation\n    activate SDK\n    SDK-&gt;&gt;APP: Call addUploadedImages / addGeneratedImages\n    APP-&gt;&gt;BE: Link new images&lt;br&gt;to the user's history\n    APP--&gt;&gt;SDK: Update observable data providers\n    SDK-&gt;&gt;SDK: Update local history display\n    deactivate SDK\n\n    USR-&gt;&gt;SDK: Tap History Button / Change photo\n    activate SDK\n    SDK--&gt;&gt;USR: Display History Data\n    Note over SDK,USR: Shows list of generated / uploaded&lt;br&gt;images with most recent first\n\n    opt cache not exitst/expired\n        SDK-&gt;&gt;GS: Get images by the URL\n        GS--&gt;&gt;SDK: Images data\n        SDK-&gt;&gt;SDK: Cache images\n        deactivate SDK\n    end</code></pre> <p>See details about</p> <ul> <li>2 \u2013 5 History images: input and generated</li> <li>Try-on generation process here</li> </ul>"}, {"location": "sdk/about/diagrams/interaction-sequence/#deleting-images-from-the-history", "title": "Deleting Images from the History", "text": "Default configurationCustom configuration <p>The sequence diagram of removing images from the user's history.</p> <pre><code>sequenceDiagram\n    autonumber\n    actor USR as \u2800&lt;br&gt;User\n    participant APP as Your&lt;br&gt;App\n    participant BE as Your&lt;br&gt;Backend\n    participant SDK as Aiuta&lt;br&gt;SDK\n    participant API as Aiuta&lt;br&gt;Backend\n    participant GS as Storage\n    note over GS: Aiuta or Yours\n\n    USR-&gt;&gt;SDK: Select image(s) to delete\n    activate SDK\n    SDK--&gt;&gt;SDK: Delete records from the history\n    Note right of SDK: Local storage\n    SDK--&gt;&gt;USR: Show updated history\n    deactivate SDK</code></pre> <p>The sequence diagram of removing images from the user's history using custom data providers.</p> <pre><code>sequenceDiagram\n    autonumber\n    actor USR as \u2800&lt;br&gt;User\n    participant APP as Your&lt;br&gt;App\n    participant BE as Your&lt;br&gt;Backend\n    participant SDK as Aiuta&lt;br&gt;SDK\n    participant API as Aiuta&lt;br&gt;Backend\n    participant GS as Storage\n    note over GS: Aiuta or Yours\n\n    USR-&gt;&gt;SDK: Select image(s) to delete\n    activate SDK\n\n    SDK--&gt;&gt;USR: Show activity indicator\n    SDK-&gt;&gt;APP: Call deleteUploadedImages / deleteGeneratedImages\n    activate APP\n    APP-&gt;&gt;BE: Delete images\n    activate BE\n\n    opt user owned images \n        alt Aiuta storage\n            BE-&gt;&gt;API: Delete images by ID\n            activate API\n            API-xGS: Delete files\n            API--&gt;&gt;BE: Deletion response\n            deactivate API\n        else your storage\n            BE-xGS: Delete files\n        end\n    end\n    BE-&gt;&gt;BE: Remove images from the user's records\n\n    BE--&gt;&gt;APP: Acknowledge deletion\n    deactivate BE\n\n    APP--&gt;&gt;SDK: Acknowledge deletion\n    SDK--&gt;&gt;USR: Hide activity indicator\n    APP--&gt;&gt;SDK: Update observable history lists\n    deactivate APP\n\n    SDK-&gt;&gt;SDK: Update history display\n    SDK--&gt;&gt;USR: Show updated history\n    deactivate SDK</code></pre> <p>Important: Owner Type Handling</p> <p>When deleting images from the history, the behavior depends on the <code>ownerType</code></p> <ul> <li><code>user</code> images can be deleted from storage and removed from history</li> <li><code>aiuta</code> images should only be unlinked from user history, not deleted from storage</li> </ul> <p>This ensures that shared model images remain available for other users while user-generated content can be properly cleaned up</p>"}, {"location": "sdk/about/pages/consent/", "title": "Consent or Legal information", "text": "<p>The Consent feature allows you to collect user permissions for data processing or simply provide the user with legal information. It can be integrated into onboarding, displayed as a standalone page, or shown in a bottom sheet when specific actions are performed.</p> Standalone consent page (extended)Embedded legal info (default)"}, {"location": "sdk/about/pages/consent/#standalone", "title": "Standalone", "text": "<p>A dedicated page where users must accept the terms by selecting required checkboxes to continue. It can be configured to appear:</p> <ol> <li>When users are about to upload their photo in the image picker <sup>1</sup></li> <li>As the last slide of the onboarding (if enabled)</li> <li>After the welcome screen (if enabled)</li> <li>If 2 and 3 are disabled, as the first screen when opening the SDK</li> </ol>"}, {"location": "sdk/about/pages/consent/#when-to-use", "title": "When to Use", "text": "<ul> <li>Collect user permissions for data processing</li> <li>Ensure compliance with data protection regulations</li> <li>Get explicit user consent for specific features</li> <li>Present terms of service and privacy policies</li> </ul>"}, {"location": "sdk/about/pages/consent/#consent-data", "title": "Consent Data", "text": "<p>Each consent is defined by the following properties:</p> <ul> <li><code>id</code> - A unique identifier for the consent</li> <li><code>type</code> - The method used to obtain the consent</li> <li><code>html</code> - The HTML content describing the consent</li> </ul> Consent Type <code>explicit</code><code>implicit</code> <p>Represents consent where the user must actively check a checkbox to provide permission. This is required for cases where consent must be freely given and unambiguous.</p> <ul> <li><code>required</code> - Indicates whether the checkbox must be checked to proceed</li> <li><code>optional</code> - Indicates additional consent and the user may proceed without checking it</li> </ul> <p></p> <p>GDPR Compliance</p> <p>The checkbox must be explicitly selected by the user as pre-selected checkboxes are not valid under GDPR, even if the user presses an \"Accept\" button. </p> <p>Represents consent where the user provides permission by pressing an \"Accept\" button. This may optionally include a disabled (pre-selected) checkbox for additional clarity.</p> Single consent without checkboxNecessary and additional consent with checkboxes <p></p> <p> </p> Legal Considerations <p>It can be just an \"Accept\" button, but only if it\u2019s very clear exactly what the user is consenting to at that moment and you can\u2019t bundle multiple consents into one \"Accept\" unless they\u2019re strictly necessary. For example, GDPR says marketing consent should always be separate if possible.</p> <p>This can be used only for the consent that is necessary for the service, as it\u2019s not really \u201cconsent\u201d under GDPR and it\u2019s processing based on contract necessity (Article 6(1)(b)) or legal obligation, not based on \u201cfreely given consent\u201d (Article 6(1)(a)), so, it is just informing the users, not asking them for an additional permission.</p> <p>Please consider that this option at all (with or w/o checkbox) is not valid for all cases, and it should be used with caution. Consult with a legal department if in doubt.</p>"}, {"location": "sdk/about/pages/consent/#data-management", "title": "Data Management", "text": "Built-inData Provider <p>By default, the SDK uses platforms' local storage to store information about the consents obtained from the user. This is the simplest approach and requires no additional configuration.</p> <p>You can implement your own custom data provider that:</p> <ul> <li>Provides the <code>obtainedConsentsIds</code> list of consents identifiers already obtained from the user</li> <li>React to the <code>obtainConsentsIds</code> callback with the list of consents identifiers that the user agreed to and pressed the accept button</li> </ul> <p>This allows you to</p> <ul> <li>Integrate with your existing user management system</li> <li>Sync the consent status across devices</li> <li>Reset consent status whenever you want to show the consent screen again</li> </ul> <p>See the How to implement section at the bottom for information on the relevant platform.</p> How does the SDK decide when to request consent? <p>SDK will match the consents identifiers with the ones already obtained from the user (e.g., <code>obtainedConsentsIds</code>) and will show the consent page only if there are missing <code>explicit</code> <code>required</code> or any <code>implicit</code> consents.</p> What happens if the consent data changes? <p>Overall, the logic behind the answer to the previous question seems to be consistent:</p> <ul> <li> <p>If a new <code>explicit</code> <code>required</code> or <code>implicit</code> consent is added, the SDK will request the user's consent again, since it is not in the list of accepted consents. None of the old checkboxes will be pre-selected, and the user will need to accept all the necessary ones again.</p> </li> <li> <p>A new <code>optional</code> consent will be ignored so as not to disturb users who have already accepted the mandatory ones.</p> </li> <li> <p>If any of the mandatory ones have changed their terms... Well, that's bad practice, please don't do that. The SDK does not monitor the content of consents, only their identifiers. If you need to change the terms, delete the old consent and create a new one with a different <code>id</code>.</p> </li> <li> <p>When changing the consent <code>type</code>, the logic is preserved. If it becomes <code>optional</code>, no reaction will follow. If an <code>optional</code> consent becomes any of mandatory type, the SDK will request everything again.</p> </li> </ul> Customization"}, {"location": "sdk/about/pages/consent/#customization", "title": "Customization", "text": ""}, {"location": "sdk/about/pages/consent/#text-elements", "title": "Text Elements", "text": "<ul> <li>Optional <code>consentPageTitle</code></li> <li>Main <code>consentTitle</code> displayed on the top</li> <li><code>consentDescriptionHtml</code> content above the consents list</li> <li>Optional <code>consentFooterHtml</code> below the consents list</li> <li>Text for the <code>consentButtonAccept</code></li> </ul>"}, {"location": "sdk/about/pages/consent/#styles", "title": "Styles", "text": "<ul> <li>Optional <code>drawBordersAroundConsents</code></li> </ul> Without bordersWith borders"}, {"location": "sdk/about/pages/consent/#analytics", "title": "Analytics", "text": "<p>The following analytics events may be tracked during consent collection:</p> Type Event Page Id Description <code>page</code> <code>consent</code> Consent page opened <code>onboarding</code> <code>consentsGiven</code> <code>consent</code> User has given all required consents <code>exit</code> <code>consent</code> SDK was closed on the consent page"}, {"location": "sdk/about/pages/consent/#embedded", "title": "Embedded", "text": "<p>The legal information is displayed at the bottom of the onboarding screen. Users are not required to explicitly accept the terms to proceed.</p> <p>This is default</p>"}, {"location": "sdk/about/pages/consent/#when-to-use_1", "title": "When to Use", "text": "<ul> <li>Present terms of service and/or privacy policies</li> </ul> Customization"}, {"location": "sdk/about/pages/consent/#customization_1", "title": "Customization", "text": ""}, {"location": "sdk/about/pages/consent/#text-elements_1", "title": "Text Elements", "text": "<ul> <li><code>consentHtml</code> content with concise text and links to privacy policy and/or terms of service</li> </ul>"}, {"location": "sdk/about/pages/consent/#how-to-implement", "title": "How to implement", "text": "<ul> <li> Android</li> <li> iOS</li> <li> Flutter</li> </ul> <ol> <li> <p>We recommend using the consent display via the \"upload photo\" button if you are using try-ons with models feature. In this case, the user has the option not to use personal photos and there is no need to request consent in advance, as the service has the right to operate without it.\u00a0\u21a9</p> </li> </ol>"}, {"location": "sdk/about/pages/image-picker/", "title": "Image Picker", "text": "<p>The Image Picker feature represents the main page and allows users to select images for virtual try-on from various sources.</p>"}, {"location": "sdk/about/pages/image-picker/#when-to-use", "title": "When to Use", "text": "<ul> <li>Let users select photos from their device</li> <li>Allow users to take new photos with the camera</li> <li> Provide predefined models images for try-on</li> <li>Enable users to reuse and manage previous images</li> </ul>"}, {"location": "sdk/about/pages/image-picker/#sources", "title": "Sources", "text": "CameraGalleryPredefined ModelsUploads History"}, {"location": "sdk/about/pages/image-picker/#camera", "title": "Camera", "text": "<p>Allows users to take new photos using their device's camera.Uses the platform's standard camera tools for applications.</p> Customization"}, {"location": "sdk/about/pages/image-picker/#customization", "title": "Customization", "text": ""}, {"location": "sdk/about/pages/image-picker/#icons", "title": "Icons", "text": "<ul> <li><code>camera24</code> - Icon for the camera button in the bottom sheet list</li> </ul>"}, {"location": "sdk/about/pages/image-picker/#text-elements", "title": "Text Elements", "text": "<ul> <li><code>cameraButtonTakePhoto</code> - Label for the button used to take a photo</li> <li><code>cameraPermissionTitle</code> - Title for the camera permission alert</li> <li><code>cameraPermissionDescription</code> - Description for the camera permission alert</li> <li><code>cameraPermissionButtonOpenSettings</code> - Label for the button that opens app settings</li> </ul>"}, {"location": "sdk/about/pages/image-picker/#photo-library", "title": "Photo library", "text": "<p>Enables users to select photos from their device's photo library.Uses the platform's standard photo picker.</p> Customization"}, {"location": "sdk/about/pages/image-picker/#customization_1", "title": "Customization", "text": ""}, {"location": "sdk/about/pages/image-picker/#icons_1", "title": "Icons", "text": "<ul> <li><code>gallery24</code> - Icon for the gallery button in the bottom sheet list</li> </ul>"}, {"location": "sdk/about/pages/image-picker/#text-elements_1", "title": "Text Elements", "text": "<ul> <li><code>galleryButtonSelectPhoto</code> - Label for the button used to select a photo</li> </ul>"}, {"location": "sdk/about/pages/image-picker/#predefined-models", "title": "Predefined Models", "text": "Enabled (default)Disabled <p>Provides a selection of predefined models images for virtual try-on. Models are divided into categories, each containing a set of model images with different body shapes. This allows users to select models that best match their preferences and needs, offering a personalized virtual try-on experience, while allowing them not to use their own photos.</p> <p></p>"}, {"location": "sdk/about/pages/image-picker/#models-data", "title": "Models data", "text": "<p>The SDK gets categories and the corresponding model lists from the Aiuta backend. Apps don't need to provide any data for this.</p> <p>By default, there two categories: <code>woman</code> and <code>man</code> in that order. If necessary, categories can be fully customized in agreement with Aiuta.</p> Predefined models, History and User data <p>If you use your own history <code>data provider</code> and manage image files when they are added to or deleted from the user's history, please note:</p> <ul> <li>The link to the image used with the model can be saved in the user's history</li> <li>The file with the model image should not be moved to the user's storage, it is a shared file and does not belong to a specific user</li> <li>When deleting from the user's history, the link to the image must be deleted, but the file with the model image itself cannot be deleted</li> </ul> Customization"}, {"location": "sdk/about/pages/image-picker/#customization_2", "title": "Customization", "text": ""}, {"location": "sdk/about/pages/image-picker/#icons_2", "title": "Icons", "text": "<ul> <li><code>selectModels24</code> - Icon for the predefined models button</li> </ul>"}, {"location": "sdk/about/pages/image-picker/#text-elements_2", "title": "Text Elements", "text": "<ul> <li><code>predefinedModelsTitle</code> - Title of the predefined models page and button</li> <li><code>predefinedModelsOr</code> - Label displayed before the predefined models button</li> <li><code>predefinedModelsEmptyListError</code> - Error message for empty model list</li> <li><code>predefinedModelsCategories</code> - Mapping of category IDs to titles (e.g., \"man\", \"woman\")</li> </ul>"}, {"location": "sdk/about/pages/image-picker/#uploads-history", "title": "Uploads History", "text": "<p>Allows users to access and reuse their previously used images. The last image used will be preselected in the image picker for subsequent try-ons.</p>"}, {"location": "sdk/about/pages/image-picker/#history-data", "title": "History Data", "text": "<p>Each image in the history is defined by the following properties:</p> <ul> <li><code>id</code> - A unique identifier for the image</li> <li><code>url</code> - The address of an image resource</li> <li><code>type</code> - The type of the image. </li> </ul> Image Type <p>Is this context of images used as input it is:</p> <code>uploaded</code><code>inputModel</code> <p>Image uploaded by the user (taken from the camera or gallery). This image belongs to the user. When the user removes the image from the history, it should be deleted from the storage as well.</p> <p>Image of the model, provided by the Aiuta. This image could be linked to the user history, but it is not owned by the user, and should not be deleted, only unlinked from the user's history in case of removing.</p>"}, {"location": "sdk/about/pages/image-picker/#data-management", "title": "Data Management", "text": "Built-inData Provider <p>By default, the SDK uses platforms' local storage to store the history. This is the simplest approach and requires no additional configuration.</p> <p>Anonymous data</p> <p>Neither the SDK nor the Aiuta API have any information about your users; all uploaded images are completely anonymous and are not linked to any user. Data in the history is stored locally on the device and may be lost when the app is reinstalled.</p> <p>If you need to link images to a user profile, use Data Provider instead.</p> <p>You can implement your own custom history data provider that:</p> <ul> <li>Provides the <code>uploadedImages</code> list of images previously used by the user</li> <li>Reacts to the <code>addUploadedImages</code> callback to store new images</li> <li>Reacts to the <code>deleteUploadedImages</code> callback to remove images by the user choise</li> <li>Reacts to the <code>selectUploadedImage</code> callback to reorder images when reused</li> </ul> <p>This allows you to</p> <ul> <li>Integrate with your existing user management system</li> <li>Sync the uploads history across devices</li> <li>Implement custom business logic for history management</li> <li>Control how images are stored and accessed</li> </ul> Customization"}, {"location": "sdk/about/pages/image-picker/#customization_3", "title": "Customization", "text": ""}, {"location": "sdk/about/pages/image-picker/#text-elements_3", "title": "Text Elements", "text": "<ul> <li><code>uploadsHistoryButtonNewPhoto</code> - Text for the new photo button</li> <li><code>uploadsHistoryTitle</code> - Title for the uploads history screen</li> <li><code>uploadsHistoryButtonChangePhoto</code> - Text for the change photo button</li> </ul>"}, {"location": "sdk/about/pages/image-picker/#styles", "title": "Styles", "text": "<ul> <li><code>changePhotoButtonStyle</code> - Style for the \"Change Photo\" button:<ul> <li><code>blurred</code> - Default blurred style with optional outline</li> <li><code>primary</code> - Solid button with primary background color</li> </ul> </li> </ul>"}, {"location": "sdk/about/pages/image-picker/#analytics", "title": "Analytics", "text": "<p>The following analytics events are tracked during image selection:</p> Type Event Page Id Description <code>page</code> <code>imagePicker</code> Image picker page opened <code>picker</code> <code>cameraOpened</code> <code>imagePicker</code> Camera interface opened <code>picker</code> <code>newPhotoTaken</code> <code>imagePicker</code> New photo taken with camera <code>picker</code> <code>photoGalleryOpened</code> <code>imagePicker</code> Photo gallery opened <code>picker</code> <code>galleryPhotoSelected</code> <code>imagePicker</code> Photo selected from gallery <code>picker</code> <code>uploadsHistoryOpened</code> <code>imagePicker</code> Uploads history opened <code>picker</code> <code>uploadedPhotoSelected</code> <code>imagePicker</code> Previously used photo selected <code>picker</code> <code>uploadedPhotoDeleted</code> <code>imagePicker</code> Previously used photo deleted <code>picker</code> <code>predefinedModelsOpened</code> <code>imagePicker</code> Predefined models list opened <code>picker</code> <code>predefinedModelSelected</code> <code>imagePicker</code> Predefined model selected <code>exit</code> <code>imagePicker</code> SDK was closed on the image picker page"}, {"location": "sdk/about/pages/image-picker/#how-to-implement", "title": "How to implement", "text": "<ul> <li> Android</li> <li> iOS</li> <li> Flutter</li> </ul>"}, {"location": "sdk/about/pages/loading-screen/", "title": "Loading Screen", "text": "<p>The Loading Screen is displayed during the virtual try-on process to keep users informed about the current status of their request. It shows different status messages as the system processes the image and generates the try-on result:</p> <ol> <li>Uploading Image - When the user's photo is being uploaded</li> <li>Scanning Body - While the system analyzes the body in the image</li> <li>Generating Outfit - During the final try-on generation</li> </ol> Customization"}, {"location": "sdk/about/pages/loading-screen/#customization", "title": "Customization", "text": ""}, {"location": "sdk/about/pages/loading-screen/#text-elements", "title": "Text Elements", "text": "<ul> <li>Text for <code>tryOnLoadingStatusUploadingImage</code> state</li> <li>Text for <code>tryOnLoadingStatusScanningBody</code> state</li> <li>Text for <code>tryOnLoadingStatusGeneratingOutfit</code> state</li> </ul>"}, {"location": "sdk/about/pages/loading-screen/#icons", "title": "Icons", "text": "<ul> <li>Optional <code>loading14</code> icon for the loading status</li> </ul> <p>If no custom icon is provided</p> <p>SDK will draw system default activity indicator</p>"}, {"location": "sdk/about/pages/loading-screen/#styles", "title": "Styles", "text": "<ul> <li><code>backgroundGradient</code> for the loading animation</li> <li><code>statusStyle</code> appearance:<ul> <li><code>blurred</code> - Default blurred style with optional outline</li> <li><code>primary</code> - Solid button with primary background color</li> </ul> </li> </ul>"}, {"location": "sdk/about/pages/loading-screen/#error-handling", "title": "Error handling", "text": "Invalid input imageOther errors"}, {"location": "sdk/about/pages/loading-screen/#invalid-input-image", "title": "Invalid Input Image", "text": "<p>When the system detects that the uploaded image doesn't meet the requirements for virtual try-on (e.g., no person detected), it displays an error message with an option to try again with a different photo.</p> Customization"}, {"location": "sdk/about/pages/loading-screen/#customization_1", "title": "Customization", "text": ""}, {"location": "sdk/about/pages/loading-screen/#text-elements_1", "title": "Text Elements", "text": "<ul> <li><code>invalidInputImageDescription</code> message for the alert</li> <li>Label for the <code>invalidInputImageChangePhotoButton</code></li> </ul>"}, {"location": "sdk/about/pages/loading-screen/#other-errors", "title": "Other Errors", "text": "<p>When other errors occur during the try-on process (such as network issues or server errors), the SDK displays an error snackbar with a message and retry option.</p> Customization"}, {"location": "sdk/about/pages/loading-screen/#customization_2", "title": "Customization", "text": ""}, {"location": "sdk/about/pages/loading-screen/#text-elements_2", "title": "Text Elements", "text": "<ul> <li><code>defaultErrorMessage</code> displayed in the snackbar</li> <li>Label for the <code>tryAgainButton</code></li> </ul>"}, {"location": "sdk/about/pages/loading-screen/#icons_1", "title": "Icons", "text": "<ul> <li><code>error36</code> icon in the snackbar</li> </ul>"}, {"location": "sdk/about/pages/loading-screen/#colors", "title": "Colors", "text": "<ul> <li><code>errorBackground</code> color for the snackbar</li> <li><code>errorPrimary</code> color for text and interactive elements</li> </ul>"}, {"location": "sdk/about/pages/loading-screen/#analytics", "title": "Analytics", "text": "<p>The following analytics events may be tracked during the loading process:</p> Type Event Page Id Description <code>page</code> <code>loading</code> Loading screen opened <code>tryOn</code> <code>photoUploaded</code> <code>loading</code> Successful upload of a selected or captured photo for processing <code>tryOn</code> <code>tryOnStarted</code> <code>loading</code> Initiation of the virtual try-on processwith the selected image <code>tryOn</code> <code>tryOnFinished</code> <code>loading</code> Successful completion of the virtual try-onprocess with generated results <code>tryOn</code> <code>tryOnAborted</code> <code>loading</code> Try-on process was aborted by the Aiutabackend due to an invalid input image <code>tryOn</code> <code>tryOnError</code> <code>loading</code> Occurrence of an error during the try-on process <code>exit</code> <code>loading</code> SDK was closed on the loading screen"}, {"location": "sdk/about/pages/loading-screen/#how-to-implement", "title": "How to implement", "text": "<ul> <li> Android</li> <li> iOS</li> <li> Flutter</li> </ul>"}, {"location": "sdk/about/pages/onboarding/", "title": "Onboarding", "text": "<p>The Onboarding feature guides users through the SDK's functionality, helping them understand how to use the virtual try-on experience effectively.</p>"}, {"location": "sdk/about/pages/onboarding/#when-to-use", "title": "When to Use", "text": "<ul> <li>Show onboarding when users first interact with the SDK</li> <li>Use it to explain the virtual try-on process</li> </ul> <p>Behavior</p> <p>The Onboarding is displayed repeatedly until the user completes it. After completion, it won't be shown again unless the completion status reset.</p>"}, {"location": "sdk/about/pages/onboarding/#data-management", "title": "Data Management", "text": "<p>The SDK provides two options for managing the onboarding completion status:</p> Built-inData Provider <p>By default, the SDK uses platforms' local storage to store the onboarding completion status. This is the simplest approach and requires no additional configuration.</p> <p>You can implement your own custom data provider that:</p> <ul> <li>Provides the <code>isOnboardingCompleted</code> status whether the user has completed the onboarding process</li> <li>React to the <code>completeOnboarding</code> callback to mark the onboarding as completed</li> </ul> <p>This allows you to</p> <ul> <li>Integrate with your existing user management system</li> <li>Sync the status across devices</li> <li>Reset <code>isOnboardingCompleted</code> whenever you want to show the onboarding again</li> </ul> Customization"}, {"location": "sdk/about/pages/onboarding/#customization", "title": "Customization", "text": ""}, {"location": "sdk/about/pages/onboarding/#text-elements", "title": "Text Elements", "text": "<ul> <li>Text for the <code>onboardingButtonNext</code></li> <li>Text for the <code>onboardingButtonStart</code></li> </ul>"}, {"location": "sdk/about/pages/onboarding/#typography", "title": "Typography", "text": "<ul> <li>General <code>buttonM</code> text style for Next/Start button</li> </ul>"}, {"location": "sdk/about/pages/onboarding/#shapes", "title": "Shapes", "text": "<ul> <li>General <code>buttonM</code> shape for Next/Start button</li> </ul>"}, {"location": "sdk/about/pages/onboarding/#colors", "title": "Colors", "text": "<ul> <li>General <code>brand</code> color for Next/Start button background</li> <li>General <code>onDark</code> color for button label</li> </ul>"}, {"location": "sdk/about/pages/onboarding/#styles", "title": "Styles", "text": "<ul> <li>Toogle <code>preferCloseButtonOnTheRight</code> to reverse pageBar</li> </ul>"}, {"location": "sdk/about/pages/onboarding/#slides", "title": "Slides", "text": "How It Works (Interactive)Best Results (Deprecated)Consent (Optional)"}, {"location": "sdk/about/pages/onboarding/#how-it-works", "title": "How It Works", "text": "<p>The \"How It Works\" page provides an interactive demonstration of the virtual try-on feature:</p> <ul> <li>Shows 3 example images of the same person in the same pose</li> <li>Each example includes both the person's photo and the item preview</li> <li>Demonstrates the transformation process</li> </ul> <p>Default</p> <p>By default, this is the only slide of the onboarding with embedded terms of service instead of a separate consent</p> Customization"}, {"location": "sdk/about/pages/onboarding/#customization_1", "title": "Customization", "text": ""}, {"location": "sdk/about/pages/onboarding/#images", "title": "Images", "text": "<ul> <li>List of 3 <code>onboardingHowItWorksItems</code>, each containing:<ul> <li>Flatlay <code>itemPreview</code> image of the item for try-on with transparent background</li> <li>Example <code>itemPhoto</code> image of the try-on result with the person wearing this item</li> </ul> </li> </ul>"}, {"location": "sdk/about/pages/onboarding/#text-elements_1", "title": "Text Elements", "text": "<ul> <li>Optional <code>onboardingHowItWorksPageTitle</code></li> <li><code>onboardingHowItWorksTitle</code> displayed below the interactive section</li> <li><code>onboardingHowItWorksDescription</code> explaining how the try-on feature works</li> </ul>"}, {"location": "sdk/about/pages/onboarding/#typography_1", "title": "Typography", "text": "<ul> <li>General <code>titleL</code> text style for the title</li> <li>General <code>regular</code> text style for the description text</li> </ul>"}, {"location": "sdk/about/pages/onboarding/#colors_1", "title": "Colors", "text": "<ul> <li>General <code>primary</code> color for title and description</li> </ul>"}, {"location": "sdk/about/pages/onboarding/#shapes_1", "title": "Shapes", "text": "<ul> <li><code>onboardingImageL</code> shape for large image views</li> <li><code>onboardingImageS</code> shape for small image views</li> </ul>"}, {"location": "sdk/about/pages/onboarding/#best-results", "title": "Best Results", "text": "<p>The \"Best Results\" page helps users achieve optimal results:</p> <ul> <li>Shows 2 good examples and 2 bad examples of input images</li> <li>Provides guidance on photo requirements</li> </ul> <p>Why is it deprecated?</p> <p>Examples of good source photos are now included into the Image Picker, so we recommend disabling this slide to avoid overwhelming the user with onboarding</p> Customization"}, {"location": "sdk/about/pages/onboarding/#customization_2", "title": "Customization", "text": ""}, {"location": "sdk/about/pages/onboarding/#images_1", "title": "Images", "text": "<ul> <li>List of 2 <code>onboardingBestResultsGood</code> images representing good examples</li> <li>List of 2 <code>onboardingBestResultsBad</code>images representing bad examples</li> </ul>"}, {"location": "sdk/about/pages/onboarding/#icons", "title": "Icons", "text": "<ul> <li><code>onboardingBestResultsGood24</code> icon for good examples badge</li> <li><code>onboardingBestResultsBad24</code> icon for bad examples badge</li> </ul>"}, {"location": "sdk/about/pages/onboarding/#text-elements_2", "title": "Text Elements", "text": "<ul> <li>Optional <code>onboardingBestResultsPageTitle</code></li> <li><code>onboardingBestResultsTitle</code> displayed below the best results samples</li> <li><code>onboardingBestResultsDescription</code> explaining how to achieve the best results</li> </ul>"}, {"location": "sdk/about/pages/onboarding/#typography_2", "title": "Typography", "text": "<ul> <li>General <code>titleL</code> text style for the title</li> <li>General <code>regular</code> text style for the description text</li> </ul>"}, {"location": "sdk/about/pages/onboarding/#colors_2", "title": "Colors", "text": "<ul> <li>General <code>primary</code> color for title and description</li> </ul>"}, {"location": "sdk/about/pages/onboarding/#shapes_2", "title": "Shapes", "text": "<ul> <li><code>onboardingImageS</code> shape for example image views</li> </ul>"}, {"location": "sdk/about/pages/onboarding/#styles_1", "title": "Styles", "text": "<ul> <li>Toggle to <code>reduceOnboardingBestResultsShadows</code> on the page</li> </ul>"}, {"location": "sdk/about/pages/onboarding/#consent", "title": "Consent", "text": "<p>The Consent page can be integrated into the onboarding flow as a slide to collect user permissions for data processing. This slide explains the terms of service and/or privacy policies to users. For detailed information about configuring the Consent screen, including customization options and implementation details, please refer to the  Consent page.</p>"}, {"location": "sdk/about/pages/onboarding/#analytics", "title": "Analytics", "text": "<p>The following analytics events may be tracked during onboarding:</p> Type Event Page Id Description <code>page</code> <code>howItWorks</code><code>bestResults</code><code>consent</code> How It Works slide openedBest Results slide openedConsent slide opened <code>onboarding</code> <code>onboardingFinished</code> <code>howItWorks</code><code>bestResults</code><code>consent</code> Completion of all onboarding steps onthe last slide according to the configuration <code>onboarding</code> <code>consentsGiven</code> <code>consent</code> Refer to the  Consent page <code>exit</code> <code>howItWorks</code><code>bestResults</code><code>consent</code> SDK was closed on one of the onboarding slides"}, {"location": "sdk/about/pages/onboarding/#how-to-implement", "title": "How to implement", "text": "<ul> <li> Android</li> <li> iOS</li> <li> Flutter</li> </ul>"}, {"location": "sdk/about/pages/results-screen/", "title": "Results Screen", "text": "<p>The Results Screen displays the generated virtual try-on results and provides various interaction options for users to engage with the results, such as:</p> <ul> <li>Allow users to interact with the results</li> <li>Collect user feedback on the try-on quality</li> <li>Enable users to continue with different photos</li> <li>Store the generation history</li> </ul>"}, {"location": "sdk/about/pages/results-screen/#features", "title": "Features", "text": "CartWishlistFeedbackContinueHistoryDisclaimer Survey with quick feedback optionsOther (custom user comment)"}, {"location": "sdk/about/pages/results-screen/#cart-integration", "title": "Cart Integration", "text": "<p>Allows users to add products from the try-on results directly to their shopping cart.</p>"}, {"location": "sdk/about/pages/results-screen/#handling", "title": "Handling", "text": "<ul> <li>You need to handle the <code>addToCart</code> action that the SDK will trigger when a user wants to add a product to their cart; SDK will close right after that, allowing you to present your own UI for product customization, such as size selection or other options needed for cart addition</li> <li>The SDK will provide the product ID of the item the user wants to add</li> </ul> Customization"}, {"location": "sdk/about/pages/results-screen/#customization", "title": "Customization", "text": ""}, {"location": "sdk/about/pages/results-screen/#text-elements", "title": "Text Elements", "text": "<ul> <li><code>addToCart</code> - Label for the \"Add to Cart\" button</li> </ul>"}, {"location": "sdk/about/pages/results-screen/#wishlist-integration", "title": "Wishlist Integration", "text": "<p>Allows users to add products from the try-on results to their wishlist for later consideration.</p> <p>Integration benefits</p> <ul> <li>Seamless integration with your existing wishlist functionality</li> <li>Consistent user experience across your app</li> <li>Real-time wishlist status updates</li> </ul>"}, {"location": "sdk/about/pages/results-screen/#data-management", "title": "Data Management", "text": "<p>You need to implement a data provider that:</p> <ul> <li>Provides the <code>wishlistProductIds</code> list of product IDs currently in the wishlist</li> <li>Handles the <code>setProductInWishlist</code> callback to add or remove products from the wishlist</li> </ul> <p>Data privacy</p> <p>You don't need to provide the user's complete wishlist. You can filter to include only products related to the current try-on session, or provide the full wishlist - it's up to you. The SDK only uses this data to correctly display the wishlist status for products and doesn't collect or use this information for any other purpose.</p> Customization"}, {"location": "sdk/about/pages/results-screen/#customization_1", "title": "Customization", "text": ""}, {"location": "sdk/about/pages/results-screen/#text-elements_1", "title": "Text Elements", "text": "<ul> <li><code>wishlistButtonAdd</code> - Label for the \"Add to Wishlist\" button</li> </ul>"}, {"location": "sdk/about/pages/results-screen/#icons", "title": "Icons", "text": "<ul> <li><code>wishlist24</code> - Icon for the wishlist button in normal state</li> <li><code>wishlistFill24</code> - Icon for the wishlist button when product is in wishlist</li> </ul>"}, {"location": "sdk/about/pages/results-screen/#feedback", "title": "Feedback", "text": "<p>Enables users to provide feedback on the try-on results quality.</p> Customization"}, {"location": "sdk/about/pages/results-screen/#customization_2", "title": "Customization", "text": ""}, {"location": "sdk/about/pages/results-screen/#text-elements_2", "title": "Text Elements", "text": "<ul> <li><code>feedbackTitle</code> - Title displayed in the feedback section</li> <li><code>feedbackOptions</code> - List of feedback options available to users</li> <li><code>feedbackButtonSkip</code> - Label for the \"Skip\" button</li> <li><code>feedbackButtonSend</code> - Label for the \"Send\" button</li> <li><code>feedbackGratitudeText</code> - Text displayed after feedback is sent</li> </ul>"}, {"location": "sdk/about/pages/results-screen/#icons_1", "title": "Icons", "text": "<ul> <li><code>like36</code> - Icon for the \"Like\" feedback option</li> <li><code>dislike36</code> - Icon for the \"Dislike\" feedback option</li> <li><code>gratitude40</code> - Icon displayed after feedback is sent</li> </ul>"}, {"location": "sdk/about/pages/results-screen/#shapes", "title": "Shapes", "text": "<ul> <li><code>feedbackButton</code> - Shape for feedback buttons</li> </ul>"}, {"location": "sdk/about/pages/results-screen/#other-feedback", "title": "Other Feedback", "text": "<p>Enables users to provide custom comment on the try-on results quality.</p> Customization"}, {"location": "sdk/about/pages/results-screen/#customization_3", "title": "Customization", "text": ""}, {"location": "sdk/about/pages/results-screen/#text-elements_3", "title": "Text Elements", "text": "<ul> <li><code>feedbackOptionOther</code> - Label for the \"Other\" feedback option in the survey</li> <li><code>otherFeedbackTitle</code> - Title for the \"Other\" feedback</li> <li><code>otherFeedbackButtonSend</code> - Label for the \"Send\" button</li> <li><code>otherFeedbackButtonCancel</code> - Label for the \"Cancel\" button             </li> </ul>"}, {"location": "sdk/about/pages/results-screen/#continue-with-other-photo", "title": "Continue with Other Photo", "text": "<p>Allows users to start a new try-on with a different photo.</p> Customization"}, {"location": "sdk/about/pages/results-screen/#customization_4", "title": "Customization", "text": ""}, {"location": "sdk/about/pages/results-screen/#icons_2", "title": "Icons", "text": "<ul> <li><code>changePhoto24</code> - Icon for the \"Change Photo\" action</li> </ul>"}, {"location": "sdk/about/pages/results-screen/#generation-history", "title": "Generation History", "text": "<p>Provides access to previously generated try-on results.</p> Customization"}, {"location": "sdk/about/pages/results-screen/#customization_5", "title": "Customization", "text": ""}, {"location": "sdk/about/pages/results-screen/#text-elements_4", "title": "Text Elements", "text": "<ul> <li><code>generationsHistoryPageTitle</code> - Title displayed on the generations history page</li> </ul>"}, {"location": "sdk/about/pages/results-screen/#icons_3", "title": "Icons", "text": "<ul> <li><code>history24</code> - Icon for the History button in the page bar</li> </ul>"}, {"location": "sdk/about/pages/results-screen/#data-management_1", "title": "Data Management", "text": "Built-inData Provider <p>By default, the SDK uses platforms' local storage to store the history. This is the simplest approach and requires no additional configuration.</p> <p>Anonymous data</p> <p>Neither the SDK nor the Aiuta API have any information about your users; all generated images are completely anonymous and are not linked to any user. Data in the history is stored locally on the device and may be lost when the app is reinstalled.</p> <p>If you need to link images to a user profile, use Data Provider instead.</p> <p>You can implement your own custom data provider that:</p> <ul> <li>Provides the <code>generated</code> list of images previously generated for the user</li> <li>React to the <code>add(generated:for:)</code> callback to store new generated images</li> <li>React to the <code>delete(generated:)</code> callback to remove images by the user choice</li> </ul> <p>This allows you to</p> <ul> <li>Integrate with your existing user management system</li> <li>Sync the generations history across devices</li> <li>Implement custom business logic for history management</li> <li>Control how generated images are stored and accessed</li> </ul>"}, {"location": "sdk/about/pages/results-screen/#fit-disclaimer", "title": "Fit Disclaimer", "text": "<p>Displays important information about the virtual try-on fit.</p> Customization"}, {"location": "sdk/about/pages/results-screen/#customization_6", "title": "Customization", "text": ""}, {"location": "sdk/about/pages/results-screen/#text-elements_5", "title": "Text Elements", "text": "<ul> <li><code>fitDisclaimerTitle</code> - Title displayed in the fit disclaimer</li> <li><code>fitDisclaimerDescription</code> - Description text in the fit disclaimer</li> <li><code>fitDisclaimerCloseButton</code> - Label for the close button</li> </ul>"}, {"location": "sdk/about/pages/results-screen/#typography", "title": "Typography", "text": "<ul> <li><code>disclaimer</code> - Text style for the disclaimer</li> </ul>"}, {"location": "sdk/about/pages/results-screen/#icons_4", "title": "Icons", "text": "<ul> <li><code>info20</code> - Icon displayed in the fit disclaimer</li> </ul>"}, {"location": "sdk/about/pages/results-screen/#analytics", "title": "Analytics", "text": "<p>The following analytics events may be tracked during results interaction:</p> Type Event Page Id Description <code>page</code> <code>results</code> Results screen opened <code>results</code> <code>resultShared</code> <code>results</code> Try-on result was shared <code>results</code> <code>productAddToWishlist</code> <code>results</code> Product was added to wishlist <code>results</code> <code>productAddToCart</code> <code>results</code> Product was added to cart <code>results</code> <code>pickOtherPhoto</code> <code>results</code> User requested to try with different photo <code>feedback</code> <code>positive</code> <code>results</code> User provided positive feedback <code>feedback</code> <code>negative</code> <code>results</code> User provided negative feedback <code>exit</code> <code>results</code> SDK was closed on the results screen"}, {"location": "sdk/about/pages/results-screen/#how-to-implement", "title": "How to implement", "text": "<ul> <li> Android</li> <li> iOS</li> <li> Flutter</li> </ul>"}, {"location": "sdk/about/pages/welcome-screen/", "title": "Welcome Screen", "text": "<p>The Welcome Screen is an optional feature that can be displayed when users first open the SDK. It serves as an introduction to your virtual try-on experience and can be customized to match your brand identity.</p>"}, {"location": "sdk/about/pages/welcome-screen/#when-to-use", "title": "When to Use", "text": "<ul> <li>Show the welcome screen on the first launch of the SDK</li> <li>Use it to introduce users to the virtual try-on experience</li> <li>Set the tone for the user journey</li> </ul> <p>Behavior</p> <p>The Welcome Screen is displayed only if the user has not completed the Onboarding. Thus, it is bound to the Onboarding feature. If the Onboarding is not provided, the Welcome Screen will be displayed every time the SDK is opened and you should care of enabling or disabling the Welcome Screen feature in the configuration to control the Welcome Screen visibility yourself.</p> Customization"}, {"location": "sdk/about/pages/welcome-screen/#customization", "title": "Customization", "text": ""}, {"location": "sdk/about/pages/welcome-screen/#images", "title": "Images", "text": "<ul> <li>Custom <code>welcomeBackground</code> image that fills the entire screen</li> </ul> <p>Make sure image itself is dimmed to be contrast enough with <code>onDark</code> color</p>"}, {"location": "sdk/about/pages/welcome-screen/#icons", "title": "Icons", "text": "<ul> <li>Custom central <code>welcome82</code> icon displayed above the title (82x82 points)</li> <li>General <code>close24</code> icon for close button</li> </ul>"}, {"location": "sdk/about/pages/welcome-screen/#text-elements", "title": "Text Elements", "text": "<ul> <li>Main <code>welcomeTitle</code> heading that introduces the feature</li> <li>Supporting <code>welcomeDescription</code> explaining the virtual try-on experience</li> <li>Call-to-action <code>welcomeButtonStart</code> to begin the experience</li> </ul>"}, {"location": "sdk/about/pages/welcome-screen/#typography", "title": "Typography", "text": "<ul> <li>Custom <code>welcomeTitle</code> text style for the title</li> <li>Custom <code>welcomeDescription</code> text style for the description text</li> <li>General <code>buttonM</code> text style for the start button</li> </ul>"}, {"location": "sdk/about/pages/welcome-screen/#shapes", "title": "Shapes", "text": "<ul> <li>General <code>buttonM</code> shape of start button</li> </ul>"}, {"location": "sdk/about/pages/welcome-screen/#colors", "title": "Colors", "text": "<ul> <li>General <code>onDark</code> color for close button, title, description and start button background</li> <li>General <code>onLight</code> color for start button label</li> </ul>"}, {"location": "sdk/about/pages/welcome-screen/#analytics", "title": "Analytics", "text": "<p>The following analytics events are tracked on the Welcome Screen:</p> Type Event Page Id Description <code>page</code> <code>welcome</code> Triggered when the welcome screen is displayed <code>onboarding</code> <code>welcomeStartClicked</code> <code>welcome</code> Triggered when user clicks the start buttonto start the journey <code>exit</code> <code>welcome</code> SDK was closed on the welcome screen"}, {"location": "sdk/about/pages/welcome-screen/#how-to-implement", "title": "How to implement", "text": "<ul> <li> Android</li> <li> iOS</li> <li> Flutter</li> </ul>"}, {"location": "sdk/about/resources/colors/", "title": "Colors", "text": "<p>The table below contains all the colors used in the SDK:</p> <p> \u00a0 This is optional and can be omitted if you are not using the corresponding feature</p> Key Description Default \u00a0 <code>#ARGB</code> <code>scheme</code> Specifies whether the theme uses a light or dark color scheme.The provided colors should match the selected scheme <code>light</code> General <code>brand</code> The main accent color of your application <code>#FF4000FF</code> <code>primary</code> Primary text elements <code>#FF000000</code> <code>secondary</code> Secondary text elements <code>#FF9F9F9F</code> <code>onDark</code> Preferably light color in any scheme to be usedon dark, brand and neutral backgrounds It should be contrast enough with <code>brand</code> color <code>#FFFFFFFF</code> <code>onLight</code> Preferably dark color in any scheme to be usedon light backgrounds It should be high contrast with <code>onDark</code> color <code>#FF000000</code> <code>background</code> The main background color of the SDK and bottom sheets <code>#FFFFFFFF</code> <code>screen</code> Zero-elevation background color.For full-screen mode in <code>dark</code> scheme, this color is used asa background color, while bottom sheets inside the SDK willstill use the <code>background</code> color. In any scheme it will be usedfor full-screen image galleries It's actually supposed to be black or close to black in any scheme <code>#FF000000</code> <code>neutral</code> A neutral background color used for components <code>#FFF2F2F7</code> <code>border</code> The color used for component borders <code>#FFE5E5EA</code> Selection <code>selectionBackground</code> Background color for selection snackbar <code>#FF000000</code> Error <code>errorBackground</code> Background color for error snackbar <code>#FFEF5754</code> <code>errorPrimary</code> Primary color for error text in the snackbar <code>#FFFFFFFF</code> ProductBar  Price <code>discountedPrice</code> Color for discounted price text <code>#FFFB1010</code>"}, {"location": "sdk/about/resources/icons/", "title": "Icons", "text": "<p>The table below contains all the icons used in the SDK:</p> <p> \u00a0 This is optional and can be omitted if you are not using the corresponding feature</p> <p>Icon coloring</p> <p>Each icon can be used in two ways:</p> <ul> <li>As an image <code>template</code> \u2014 the SDK will automatically color it depending on where it is used</li> <li>As an <code>original</code> image \u2014 the SDK will use it without any color changes</li> </ul> Key Description Icon PageBar <code>back24</code> Back button in navigation bars <code>close24</code> Close button in navigation bars Selection <code>check20</code> Selection indicator <code>trash24</code> Delete/remove item button Error <code>error36</code> General error icon Image <code>imageError36</code> Image loading error icon ProductBar <code>arrow16</code> Navigation arrow in product bar to open details Welcome Screen <code>welcome82</code> Welcome screen central icon above the title <sup>1</sup> Onboarding <code>onboardingBestResultsGood24</code> Good results badge in onboarding <code>onboardingBestResultsBad24</code> Bad results badge in onboarding ImagePicker  Camera <code>camera24</code> Camera capture button ImagePicker  Gallery <code>gallery24</code> Gallery access button ImagePicker  PredefinedModel <code>selectModels24</code> Model selection button TryOn <code>magic20</code> Try-on button TryOn  Loading <code>loading14</code> Loading indicator <sup>2</sup> TryOn  FitDisclaimer <code>info20</code> Information icon for fit disclaimer TryOn  Feedback <code>like36</code> Like/positive feedback button <code>dislike36</code> Dislike/negative feedback button <code>gratitude40</code> Gratitude screen illustration <sup>3</sup> TryOn  OtherPhoto <code>changePhoto24</code> Change photo button TryOn  History <code>history24</code> History access button for page bar Share <code>share24</code> Share button Wishlist <code>wishlist24</code> Add to wishlist button <code>wishlistFill24</code> Remove from wishlist button <ol> <li> <p>This icon is supposed to be pre-colored.\u00a0\u21a9</p> </li> <li> <p>The system activity indicator will be used if no icon is provided.\u00a0\u21a9</p> </li> <li> <p>\ud83e\udde1 emoji will be used if no icon is provided.\u00a0\u21a9</p> </li> </ol>"}, {"location": "sdk/about/resources/images/", "title": "Images", "text": "<p>The table below contains all the images used in the SDK:</p> <p> \u00a0 This is optional and can be omitted if you are not using the corresponding feature</p> Key Description Default Welcome Screen <code>welcomeBackground</code> Background image to fill the welcome screen Onboarding  How It Works <code>onboardingHowItWorksItems[0]</code><code>(itemPreview, itemPhoto)</code> First pair of samples <code>onboardingHowItWorksItems[1]</code><code>(itemPreview, itemPhoto)</code> Second pair of samples <code>onboardingHowItWorksItems[2]</code><code>(itemPreview, itemPhoto)</code> Third pair of samples Onboarding  Best Results <code>onboardingBestResultsGood[]</code> Collection of good input examples <code>onboardingBestResultsBad[]</code> Collection of bad input examples ImagePicker  Examples <code>imagePickerExamples[]</code> Examples of a good input Share <code>shareWatermark</code> Watermark for shared images"}, {"location": "sdk/about/resources/localization/", "title": "Providing localized text content", "text": "<p>The table below contains all the strings that may be localized or changed for the SDK:</p> <p> default value is included in the SDK but may be changed or localized</p> <p> sample value that needs to be provided explicitly</p> <p> \u00a0 sample value that can be <code>null</code> <sup>1</sup> to hide a label/text field</p> <p> \u00a0 this field supports subset of <code>html</code> tags (e.g., <code>b</code>, <code>i</code>, <code>u</code>)</p> <p> \u00a0 this field supports links (<code>a href</code>)</p> <p> \u00a0 alternative variant</p> <p>Tip</p> <p>You can select the table content excluding the header, copy and paste it into Google Sheets for translation purposes. </p> Key Default or sample value Welcome Screen <code>welcomeTitle</code> Try on you <code>welcomeDescription</code> Welcome to our Virtual try-on.Try on the item directly on your photo <code>welcomeButtonStart</code> Let's start Onboarding <code>onboardingButtonNext</code> Next <code>onboardingButtonStart</code> Start Onboarding  HowItWorks <code>onboardingHowItWorksPageTitle</code> How it works<code>&lt;b&gt;Step 1/2&lt;/b&gt; - How it works</code> <code>onboardingHowItWorksTitle</code> Try on before buying <code>onboardingHowItWorksDescription</code> Upload a photo and see how items look on you Onboarding  BestResults <code>onboardingBestResultsPageTitle</code> For best results<code>&lt;b&gt;Step 2/2&lt;/b&gt; - For best results</code> <code>onboardingBestResultsTitle</code> For best results <code>onboardingBestResultsDescription</code> Use a photo with good lighting, stand straight a plain background Consent  Embedded <code>consentHtml</code> <sup>2</sup> Your photos will be processed by Terms of Use Consent  Standalone <code>consentPageTitle</code> Consent page title <code>consentTitle</code> Consent title <code>consentDescriptionHtml</code> Consent description <code>consents[].html</code> Consents <code>consentFooterHtml</code> Consent footer <code>consentButtonAccept</code> Accept ImagePicker <code>imagePickerTitle</code> Upload a photo of you <code>imagePickerDescription</code> Select a photo where you are standing straight and clearly visible <code>imagePickerButtonUploadPhoto</code> Upload a photo ImagePicker  Camera <code>cameraButtonTakePhoto</code> Take a photo <code>cameraPermissionTitle</code> Camera permission <code>cameraPermissionDescription</code> Please allow access to the camera in the application settings <code>cameraPermissionButtonOpenSettings</code> Settings ImagePicker  Gallery <code>galleryButtonSelectPhoto</code> Choose from library ImagePicker  PredefinedModel <code>predefinedModelsTitle</code> Select your model <code>predefinedModelsOr</code> Or <code>predefinedModelsEmptyListError</code> The models list is empty <code>predefinedModelsCategories</code> <sup>3</sup> <code>{\"man\": \"Men\", \"woman\": \"Women\"}</code> ImagePicker  UploadsHistory <code>uploadsHistoryButtonNewPhoto</code> <sup>4</sup> + New photo or model+ Upload new photo <code>uploadsHistoryTitle</code> Previously used <code>uploadsHistoryButtonChangePhoto</code> Change photo TryOn <code>tryOnPageTitle</code> Virtual Try-on <code>tryOn</code> Try on TryOn  Loading <code>tryOnLoadingStatusUploadingImage</code> Uploading image <code>tryOnLoadingStatusScanningBody</code> Scanning the body <code>tryOnLoadingStatusGeneratingOutfit</code> Generating outfit TryOn  InputValidation <code>invalidInputImageDescription</code> We couldn't detect anyone in this photo <code>invalidInputImageChangePhotoButton</code> Change photo TryOn  Cart <code>addToCart</code> Add to cart TryOn  FitDisclaimer <code>fitDisclaimerTitle</code> Results may vary from real-life fit <code>fitDisclaimerDescription</code> Virtual try-on is a visualization tool that shows how items might lookand may not perfectly represent how the item will fit in reality <code>fitDisclaimerCloseButton</code> Close TryOn  Feedback <code>feedbackTitle</code> Can you tell us more? <code>feedbackOptions</code> <code>[\"This style isn't for me\",</code><code>\"The item looks off\",</code><code>\"I look different\"]</code> <code>feedbackButtonSkip</code> Skip <code>feedbackButtonSend</code> Send <code>feedbackGratitudeText</code> Thank you for your feedback TryOn  Feedback  Other <code>feedbackOptionOther</code> Other <code>otherFeedbackTitle</code> Tell us what we could improve? <code>otherFeedbackButtonSend</code> Send feedback <code>otherFeedbackButtonCancel</code> <sup>5</sup> Cancel TryOn  History <code>generationsHistoryPageTitle</code> History Share <code>shareButton</code> Share Wishlist <code>wishlistButtonAdd</code> Wishlist Selection <code>select</code> Select <code>cancel</code> Cancel <code>selectAll</code> Select all <code>unselectAll</code> Unselect all Error <code>defaultErrorMessage</code> Something went wrong.Please try again later <code>tryAgainButton</code> Try again PowerBar <code>poweredByAiuta</code> Powered by Aiuta <ol> <li> <p>In most cases an empty string will have the same effect, but the SDK has validation for developers to check the configuration is correct. To clearly distinguish between erroneously empty strings and explicitly hidden ones, we recommend using <code>null</code>  to hide and never using empty strings.\u00a0\u21a9</p> </li> <li> <p><code>&lt;b&gt;&lt;a href='https://aiuta.com/legal/terms-of-service.html'&gt;Terms of Use&lt;/a&gt;</code> \u21a9</p> </li> <li> <p>This is a map from models category identifiers to their names.  The <code>predefinedModelCategories</code> are usually should cover 2 categories  with ids <code>man</code> and <code>woman</code>, but can be extended in the future or by your agreement with Aiuta.\u00a0\u21a9</p> </li> <li> <p>Use this variant if the try-on with models feature is disabled\u00a0\u21a9</p> </li> <li> <p>The Close button with a cross icon will be used if no string is specified\u00a0\u21a9</p> </li> </ol>"}, {"location": "sdk/about/resources/other/", "title": "Other styles, toggles and settings", "text": "<p>This page contains descriptions of additional unclassified settings for various user interface components that provide more configuration flexibility.</p>"}, {"location": "sdk/about/resources/other/#page-bar", "title": "Page Bar", "text": "<p>A toggle to specify whether the close button should be positioned on the right side.</p> Default<code>preferCloseButtonOnTheRight</code> <p></p> <p> </p>"}, {"location": "sdk/about/resources/other/#bottom-sheet", "title": "Bottom Sheet", "text": "<p>Adjusting delimiters in the bottom sheet icon buttons</p> Default<code>extendDelimitersToTheRight</code><code>extendDelimitersToTheLeftAndRight</code> <p></p> <p></p> <p></p>"}, {"location": "sdk/about/resources/other/#component-style", "title": "Component Style", "text": "<p>Adjusting colors on some buttons and status views, where explicitly available</p> <p>Shapes are independent and are not affected by this styles</p> <code>brand</code><code>contrast</code><code>contrastInverted</code><code>blurred</code><code>blurredWithOutline</code> <p></p> <ul> <li><code>brand</code> background color</li> <li><code>onDark</code> foreground color for labels and icons</li> </ul> <p></p> <ul> <li><code>onLight</code> background color</li> <li><code>onDark</code> foreground color for labels and icons</li> </ul> <p></p> <ul> <li><code>onDark</code> background color</li> <li><code>onLight</code> foreground color for labels and icons</li> </ul> <p></p> <ul> <li>apply a blurred background that matches the color <code>scheme</code> (<code>light</code> or <code>dark</code>)</li> <li><code>primary</code> foreground color for labels and icons</li> </ul> <p></p> <ul> <li>apply a blurred background that matches the color <code>scheme</code> (<code>light</code> or <code>dark</code>)</li> <li><code>primary</code> foreground color for labels and icons</li> <li><code>outline</code> color for the border</li> </ul> <p>Refer to the  colors </p>"}, {"location": "sdk/about/resources/shapes/", "title": "Shapes", "text": "<p>The table below contains all the shapes used in the SDK:</p> <p> \u00a0 This is optional and can be omitted if you are not using the corresponding feature</p> Key Description Default Image <code>imageL</code> Large image corner radius <code>24</code> <code>imageM</code> Medium image corner radius <code>16</code> Button <code>buttonM</code> Medium button corner radius <code>8</code> <code>buttonS</code> Small button corner radius <code>8</code> BottomSheet <code>bottomSheet</code> Bottom sheet corner radius <code>16</code> BottomSheet  Grabber <code>grabberWidth</code> Width of the bottom sheet grabber <code>36</code> <code>grabberHeight</code> Height of the bottom sheet grabber <code>4</code> <code>grabberOffset</code> Grabber offset from the top <code>6</code> Onboarding <code>onboardingImageL</code> Large onboarding image corner radius <code>16</code> <code>onboardingImageS</code> Small onboarding image corner radius <code>16</code> TryOn.Feedback <code>feedbackButton</code> Feedback button corner radius <code>infinity</code>"}, {"location": "sdk/about/resources/typography/", "title": "Typography", "text": "<p>The table below contains all the text styles used in the SDK:</p> <p> \u00a0 This is optional and can be omitted if you are not using the corresponding feature</p> Key Description Default Size Weight Line height Letter spacing Label <code>titleL</code> Large titles <code>24</code> <code>Bold</code> <code>100%</code> <code>0%</code> <code>titleM</code> Medium titles <code>20</code> <code>Bold</code> <code>100%</code> <code>-2%</code> <code>regular</code> Regular text <code>17</code> <code>Medium</code> <code>22</code> <code>-3%</code> <code>subtle</code> Subtle text <code>15</code> <code>Regular</code> <code>18</code> <code>-1%</code> Button <code>buttonM</code> Medium buttons <code>17</code> <code>Semibold</code> <code>18</code> <code>-1%</code> <code>buttonS</code> Small buttons <code>13</code> <code>Semibold</code> <code>18</code> <code>-1%</code> PageBar <code>pageTitle</code> Page titles <code>17</code> <code>Medium</code> <code>22</code> <code>-3%</code> ProductBar <code>product</code> Product names <code>13</code> <code>Regular</code> <code>100%</code> <code>0%</code> <code>brand</code> Brand names <code>12</code> <code>Medium</code> <code>100%</code> <code>-1%</code> ProductBar  Price <code>price</code> Price text <code>14</code> <code>Bold</code> <code>100%</code> <code>-1%</code> Welcome Screen <code>welcomeTitle</code> Welcome screen title <code>40</code> <code>Heavy</code> <code>44</code> <code>0%</code> <code>welcomeDescription</code> Welcome screen description <code>16</code> <code>Medium</code> <code>18</code> <code>0%</code> TryOn  FitDisclaimer <code>disclaimer</code> Fit disclaimer label <code>12</code> <code>Regular</code> <code>100%</code> <code>-1%</code>"}, {"location": "sdk/android/", "title": "Android SDK", "text": "<p>The Aiuta Android SDK provides a virtual try-on solution as a Kotlin Multiplatform implementation using the Aiuta Virtual Try On API.</p> <ul> <li> <p>  General SDK Overview</p> <p>Expolore UI Pages, Sequence diagrams, Resources and Analytics</p> </li> <li> <p> Common Developer Section</p> <p>Learn how to setup Authentification, Configure UI and manage Features</p> </li> </ul>"}, {"location": "sdk/android/#requirements", "title": "Requirements", "text": "<pre><code>minSdk: 23\ntargetSdk: 36\n</code></pre>"}, {"location": "sdk/android/#quick-start", "title": "Quick Start", "text": "Try-On with UITry-On <ol> <li>Installation</li> <li>Configuration</li> <li>Basic Usage</li> </ol> <ol> <li>Installation</li> <li>Setup</li> <li>Usage</li> </ol>"}, {"location": "sdk/android/#kotlin-multiplatform-support", "title": "Kotlin Multiplatform Support", "text": "<p>The following table shows the current platform support status for Aiuta SDK via Kotlin Multiplatform </p> Platform Support Status Notes Android \u2705 Supported Full support iOS \u2705 Supported Full support Desktop \ud83d\udfe1 Beta Limited functionality Web \u274c Not Supported Not available <p>Desktop support</p> <p>Is currently in beta phase and may have limited functionality compared to mobile platforms</p>"}, {"location": "sdk/android/#sources-and-links", "title": "Sources and Links", "text": "<ul> <li> Android SDK Sources </li> <li> Demo Application</li> <li> API Reference </li> <li> Sample App </li> </ul>"}, {"location": "sdk/android/faq/", "title": "Frequently Asked Questions", "text": ""}, {"location": "sdk/android/faq/#support", "title": "Support", "text": ""}, {"location": "sdk/android/faq/#how-do-i-report-issues", "title": "How do I report issues?", "text": "<ul> <li>Create an issue on GitHub </li> <li>Include detailed information about the problem</li> <li>Provide logs and error messages</li> <li>Describe steps to reproduce</li> </ul>"}, {"location": "sdk/android/faq/#how-do-i-get-help", "title": "How do I get help?", "text": "<ul> <li>Check the documentation</li> <li>Contact our support team at support@aiuta.com</li> </ul>"}, {"location": "sdk/android/faq/#where-can-i-find-examples", "title": "Where can I find examples?", "text": "<ul> <li>Check our sample app </li> <li>Review the API Reference </li> <li>Visit our GitHub repository </li> </ul>"}, {"location": "sdk/android/analytics/installation/", "title": "Installation of Analytics", "text": "<p>In this guide, you will learn how to initialize <code>AiutaAnalytics</code> and observe <code>AiutaAnalyticsEvent</code> from the SDK.</p>"}, {"location": "sdk/android/analytics/installation/#dependencies", "title": "Dependencies", "text": "<p>To use Aiuta Analytics functionality, you need to add the following dependency to your project:</p> KotlinGroovy <pre><code>dependencies {\n    implementation(\"com.aiuta:fashionsdk-analytics:4.2.4\")\n}\n</code></pre> <pre><code>dependencies {\n    implementation \"com.aiuta:fashionsdk-analytics:4.2.4\"\n}\n</code></pre> Where to find latest version of SDK? <ul> <li>On GitHub Releases</li> <li>On Central Sonatype</li> </ul> Using Bill of Materials <p>To ensure consistent dependency versions and simplify version management, you can use the Bill of Materials (BOM)</p> KotlinGroovy <pre><code>dependencies {\n    // 1. Add BOM \n    implementation(platform(\"com.aiuta:fashionsdk-bom:4.2.4\"))\n\n    // 2. Add all required for you dependencies\n    implementation(\"com.aiuta:fashionsdk\")\n    implementation(\"com.aiuta:fashionsdk-configuration\") \n    ...\n}\n</code></pre> <pre><code>dependencies {\n    // 1. Add BOM\n    implementation platform(\"com.aiuta:fashionsdk-bom:4.2.4\")\n\n    // 2. Add all required for you dependencies\n    implementation \"com.aiuta:fashionsdk\"\n    implementation \"com.aiuta:fashionsdk-configuration\"\n    ...\n}\n</code></pre>"}, {"location": "sdk/android/analytics/installation/#next-step", "title": "Next Step", "text": "<ul> <li> Using Aiuta Analytics</li> </ul>"}, {"location": "sdk/android/analytics/usage/", "title": "Using Aiuta Analytics", "text": "<p>General analytics scheme</p> <p>For more information about available events and their parameters, see Analytics Events.</p> <p>To start using Aiuta Analytics in your application, follow these steps:</p> <ol> <li> <p>Create an instance of <code>AiutaAnalytics</code> using the standard extension:</p> <pre><code>import com.aiuta.fashionsdk.Aiuta\nimport com.aiuta.fashionsdk.analytics.AiutaAnalytics\nimport com.aiuta.fashionsdk.analytics.analytics\n\nval aiuta: Aiuta = ... // Your initialized Aiuta instance\nval aiutaAnalytics: AiutaAnalytics = aiuta.analytics\n</code></pre> </li> <li> <p>You can now observe <code>AiutaAnalyticsEvent</code> from the SDK:</p> <pre><code>aiutaAnalytics.analyticFlow.collect { newEvent -&gt;\n    // Handle new events from SDK\n}\n</code></pre> </li> </ol>"}, {"location": "sdk/android/base/aiuta-getting-started/", "title": "Getting started with Aiuta", "text": "<p>To start using Aiuta SDK, you need to create an instance of the <code>Aiuta</code> class. This class serves as the main entry point to the SDK and requires configuration of essential components.</p>"}, {"location": "sdk/android/base/aiuta-getting-started/#installation", "title": "Installation", "text": "<p>Install it along with one of the options that suits you:</p> <ul> <li> <p> Try-On with UI</p> <p>Quickly implement try-on functionality with minimal custom code while maintaining a consistent look and feel with other Aiuta features.</p> </li> <li> <p> Try-On</p> <p>Direct access to try-on generation capabilities without any pre-built UI components, allowing you to build custom experiences.</p> </li> </ul> <p>Next set up the Aiuta class:</p> <pre><code>import com.aiuta.fashionsdk.Aiuta\nimport com.aiuta.fashionsdk.aiuta\n\nval aiuta: Aiuta = aiuta {\n    // Configure authentication strategy\n    authenticationStrategy = ... // (1)!\n\n    // Configure platform context\n    platformContext = ... // (2)!\n\n    // Configure logger (optional)\n    logger = ... // (3)!\n}\n</code></pre> <ol> <li>Required:  Defines how the SDK authenticates with the Aiuta backend. See Authentication section for details.</li> <li>Required: Provides platform-specific information and context. See Platform context section for details.</li> <li>Optional: Customizes logging behavior of the SDK. See Logger section for details.</li> </ol>"}, {"location": "sdk/android/base/aiuta-getting-started/#authentication", "title": "Authentication", "text": "<p>The authentication strategy is a required component that defines how the SDK authenticates with the Aiuta backend. </p> <p>To configure authentication, you need to provide an implementation of the authentication strategy. The SDK provides several built-in strategies:</p> API KeyJWT <pre><code>authenticationStrategy = ApiKeyAuthenticationStrategy(\n    apiKey = \"your-api-key\",\n)\n</code></pre> <pre><code>authenticationStrategy = JWTAuthenticationStrategy(\n    getJWT = { /* Provide new JWT token */ },\n    subscriptionId = \"your-subscription-id\"\n)\n</code></pre> <p>General configuration</p> <p>You can find a more detailed description of API keys and JWT authentication in the SDK, as well as instructions on how to obtain them, in the general configuration guide for developers</p>"}, {"location": "sdk/android/base/aiuta-getting-started/#platform-context", "title": "Platform Context", "text": "<p>The platform context is a required component that provides platform-specific information and context to the SDK. For Android, you need to provide the Android Context, while for other platforms, a general singleton default context is used.</p> AndroidOther Platforms <pre><code>import android.content.Context\n\nplatformContext = applicationContext\n</code></pre> <pre><code>platformContext = AiutaPlatformContext.INSTANCE\n</code></pre> Compose helpers <p>For better usage Aiuta with Jetpack Compose SDK contains <code>LocalAiutaPlatformContext</code> composition local. For Android, it will be alias for <code>LocalContext</code>, for all others platform - static composition local with platform context. </p> <p>Pay attention, <code>LocalAiutaPlatformContext</code> is part of <code>fashionsdk-compose-core</code> artifact</p>"}, {"location": "sdk/android/base/aiuta-getting-started/#logger", "title": "Logger", "text": "<p>The logger is an optional component that allows you to customize the logging behavior of the SDK. By default, the SDK will not use any loggers, but you can provide your own implementation to integrate with your application's logging system.</p> <p>Usage of default logger</p> <p>Be careful with using default logger with production build - under the hood it's use simple log to console, therefore some sensetive inforamtion can be leak to console. Don't forget to turn it off on production build!</p> Default LoggerCustom Logger <pre><code>logger = DefaultAiutaLogger() \n</code></pre> <pre><code>class CustomAiutaLogger : AiutaLogger {\n    override fun log(\n        priority: AiutaLogger.Level,\n        tag: String?,\n        throwable: Throwable?,\n        message: String,\n    ) {\n        // Log message\n    }\n}\n\nlogger = CustomAiutaLogger()\n</code></pre> <p>The logger supports different log levels and can handle both messages and throwables. You can use it to:</p> <ul> <li>Control the verbosity of SDK logs</li> <li>Integrate SDK logs with your application's logging system</li> <li>Filter or transform log messages</li> <li>Add additional context to log messages</li> </ul>"}, {"location": "sdk/android/base/aiuta-getting-started/#next-step", "title": "Next Step", "text": "<ul> <li> Create Try-On with UI Configuration</li> <li> Using Try-Ons</li> </ul>"}, {"location": "sdk/android/migrations/migrate-v4/", "title": "Migration to v4", "text": "<p>This guide outlines the key changes and migration steps required for upgrading to Aiuta Android SDK v4. Please review all sections carefully to ensure a smooth transition.</p>"}, {"location": "sdk/android/migrations/migrate-v4/#platform-build-requirements", "title": "Platform &amp; Build Requirements", "text": "Requirement Version minSdk 23 targetSdk 35 Kotlin 2.2.0 Java 11 <p>Java 11 Required</p> <p>Java 11 is now required for building and running the SDK due to the adoption of Compose Multiplatform.</p>"}, {"location": "sdk/android/migrations/migrate-v4/#dependency-updates", "title": "Dependency Updates", "text": "<p>SDK v4 introduces several new packages to provide better modularity and feature separation (since 1.2.23):</p> Dependency Package Purpose <code>com.aiuta:fashionsdk-analytics-events:&lt;version&gt;</code> Provides event models and definitions for analytics tracking <code>com.aiuta:fashionsdk-analytics:&lt;version&gt;</code> Main analytics library for collecting and sending analytics events <code>com.aiuta:fashionsdk-compose-resources:&lt;version&gt;</code> Shared Compose resources for UI components <code>com.aiuta:fashionsdk-configuration-defaults-icons:&lt;version&gt;</code> Default icon assets and configuration for the SDK UI <code>com.aiuta:fashionsdk-configuration-defaults-images:&lt;version&gt;</code> Default image assets and configuration for the SDK UI <code>com.aiuta:fashionsdk-configuration-defaults:&lt;version&gt;</code> Predefined configuration sets for common use cases <code>com.aiuta:fashionsdk-configuration:&lt;version&gt;</code> Core configuration engine for customizing SDK features and UI <code>com.aiuta:fashionsdk-io:&lt;version&gt;</code> Input/output utilities for file and data handling within the SDK <code>com.aiuta:fashionsdk-logger:&lt;version&gt;</code> Logging utilities for debugging and monitoring SDK behavior <code>com.aiuta:fashionsdk-tryon-compose-uikit:&lt;version&gt;</code> UI components and layouts for Try-On experiences using Jetpack Compose <p>Analytics</p> <p>Please note: the analytics package has been renamed. You should now use <code>com.aiuta:fashionsdk-analytics:&lt;version&gt;</code> as the dependency for analytics features.</p>"}, {"location": "sdk/android/migrations/migrate-v4/#new-sdk-configuration-approach", "title": "New SDK Configuration Approach", "text": "<p>SDK v4.1.0 introduces a new, unified way to configure the SDK using the <code>AiutaConfiguration</code> class. This approach provides a more flexible and modular configuration scheme for features and UI customization. See the full guide here.</p>"}, {"location": "sdk/android/migrations/migrate-v4/#kotlin-multiplatform-kmp-support", "title": "Kotlin Multiplatform (KMP) Support", "text": "<p>The Aiuta SDK v4 is built with Kotlin Multiplatform (KMP) technology, enabling shared business logic and UI components across Android and iOS. This allows for easier code reuse and faster feature delivery on both platforms.</p> Platform Support Status Notes Android \u2705 Supported Full support iOS \u2705 Supported Full support Desktop \ud83d\udfe1 Beta Limited functionality Web \u274c Not Supported Not available"}, {"location": "sdk/android/tryon/installation/", "title": "Installation of Try-On", "text": "<p>Aiuta Try On provides a powerful API for implementing virtual try-on functionality in your Android application. This guide will walk you through the core implementation of digital try-on features using the Aiuta SDK.</p> <p>The core implementation gives you direct access to try-on generation capabilities without any pre-built UI components, allowing you to build custom experiences and integrate try-on functionality into your existing UI.</p>"}, {"location": "sdk/android/tryon/installation/#dependencies", "title": "Dependencies", "text": "<p>To use Aiuta Try On, you need to add the following dependencies to your project:</p> KotlinGroovy <pre><code>dependencies {\n    implementation(\"com.aiuta:fashionsdk-tryon-core:4.2.4\")\n}\n</code></pre> <pre><code>dependencies {\n    implementation \"com.aiuta:fashionsdk-tryon-core:4.2.4\"\n}\n</code></pre> Where to find latest version of SDK? <ul> <li>On GitHub Releases</li> <li>On Central Sonatype</li> </ul> Using Bill of Materials <p>To ensure consistent dependency versions and simplify version management, you can use the Bill of Materials (BOM)</p> KotlinGroovy <pre><code>dependencies {\n    // 1. Add BOM \n    implementation(platform(\"com.aiuta:fashionsdk-bom:4.2.4\"))\n\n    // 2. Add all required for you dependencies\n    implementation(\"com.aiuta:fashionsdk\")\n    implementation(\"com.aiuta:fashionsdk-configuration\") \n    ...\n}\n</code></pre> <pre><code>dependencies {\n    // 1. Add BOM\n    implementation platform(\"com.aiuta:fashionsdk-bom:4.2.4\")\n\n    // 2. Add all required for you dependencies\n    implementation \"com.aiuta:fashionsdk\"\n    implementation \"com.aiuta:fashionsdk-configuration\"\n    ...\n}\n</code></pre>"}, {"location": "sdk/android/tryon/installation/#next-step", "title": "Next Step", "text": "<ul> <li> Using Try-Ons</li> </ul>"}, {"location": "sdk/android/tryon/usage/", "title": "Using Aiuta Try-Ons", "text": ""}, {"location": "sdk/android/tryon/usage/#initialization", "title": "Initialization", "text": "<p>Create an instance of <code>AiutaTryOn</code> using the extension function:</p> <pre><code>import com.aiuta.fashionsdk.Aiuta\nimport com.aiuta.fashionsdk.tryon.core.AiutaTryOn\nimport com.aiuta.fashionsdk.tryon.core.tryon\n\nval aiuta: Aiuta = ... // Your initialized Aiuta instance\nval aiutaTryOn: AiutaTryOn = aiuta.tryon\n</code></pre> <p>Once you have created the <code>AiutaTryOn</code> instance, you're ready to implement digital try-on functionality in your application.</p>"}, {"location": "sdk/android/tryon/usage/#start-generation", "title": "Start Generation", "text": "<p>To start generation, you need the following:</p> <ul> <li><code>productId</code> - which will be used to fit on the uploaded photo</li> <li><code>productCatalogName</code> (optional) - category name of the generated product</li> <li>Source of image - can be URI of file or URL of already uploaded image</li> </ul> <p>That is why the interface <code>ProductGenerationContainer</code> has 2 implementations - <code>ProductGenerationUriContainer</code> and <code>ProductGenerationUrlContainer</code>.</p> <p>After receiving all the necessary information, you can call the <code>startproductGeneration()</code> method, passing all the data through a special wrapper <code>ProductGenerationContainer</code> and collect the returned flow:</p> <pre><code>val receivingFlow = aiutaTryOn.startProductGeneration(\n    container = // ProductGenerationUriContainer or ProductGenerationUrlContainer\n)\n</code></pre>"}, {"location": "sdk/android/tryon/usage/#observing-result", "title": "Observing Result", "text": "<p>After the generation starts, you need to wait for some time until the entire result is ready. You can track the current status and get the result by collecting the returned flow from <code>startProductGeneration()</code>. As the result is ready, the necessary <code>productGenerationStatus.SuccessGenerationStatus</code> will be emitted.</p> <p>To learn more about all possible <code>productGenerationStatus</code>, see the code or API reference.</p>"}, {"location": "sdk/android/tryon-ui/basic-usage/", "title": "Try-On with UI Basic Usage", "text": "<p>Aiuta Try On provides two main UI entry points for implementing virtual try-on functionality.  Both flows are composable functions that can be integrated into your existing Compose UI. They handle all the necessary UI states and user interactions internally, providing a seamless try-on experience.</p>"}, {"location": "sdk/android/tryon-ui/basic-usage/#try-on-flow", "title": "Try-On Flow", "text": "<p><code>AiutaTryOnFlow</code> is the main entry point for creating new try-ons. It provides a complete flow for:</p> <ul> <li>Selecting a product to try on</li> <li>Taking or uploading a photo</li> <li>Generating and viewing the try-on result</li> </ul> <pre><code>AiutaTryOnFlow(\n    modifier = ...,\n    aiutaConfiguration = ...,\n    productForGeneration = ...,\n)\n</code></pre>"}, {"location": "sdk/android/tryon-ui/basic-usage/#history-flow", "title": "History Flow", "text": "<p><code>HistoryFlow</code> allows users to view their try-on history and previous results. It provides:</p> <ul> <li>Ability to view and share past results</li> </ul> <pre><code>HistoryFlow(\n    modifier = ...,\n    aiutaConfiguration = ...,\n)\n</code></pre>"}, {"location": "sdk/android/tryon-ui/basic-usage/#next-step", "title": "Next Step", "text": "<ul> <li> Try with test products</li> </ul>"}, {"location": "sdk/android/tryon-ui/configuration/", "title": "Try-On with UI Configuration", "text": "<p>To start using Aiuta Try On with UI components, you need to create an instance of the <code>AiutaConfiguration</code> class. This class serves as the main configuration point for the UI components and requires configuration of essential components.</p> <p>Here's how to set up the AiutaConfiguration class:</p> <pre><code>import com.aiuta.fashionsdk.tryon.compose.aiutaConfiguration\nimport com.aiuta.fashionsdk.configuration.features.features\nimport com.aiuta.fashionsdk.configuration.features.onboarding.onboarding\nimport com.aiuta.fashionsdk.configuration.features.tryon.tryOn\nimport com.aiuta.fashionsdk.configuration.ui.actions.AiutaUserInterfaceActions\nimport com.aiuta.fashionsdk.configuration.ui.theme.label.label\nimport com.aiuta.fashionsdk.configuration.ui.theme.theme\nimport com.aiuta.fashionsdk.configuration.ui.theme.selection.selectionSnackbar\nimport com.aiuta.fashionsdk.configuration.ui.userInterface\n\nval aiutaConfiguration = aiutaConfiguration {\n    aiuta = ... // (1)!\n\n    features { // (2)!\n        onboarding {\n            // Initialize configuraiton\n        }\n\n        tryOn {\n            // Initialize configuraiton\n        }\n        ...\n    }\n\n    userInterface { // (3)!\n        actions = AiutaUserInterfaceActions(...)\n\n        theme {\n            label {\n                // Initialize theme\n            }\n\n            selectionSnackbar {\n                // Initialize theme\n            }\n            ...\n        }\n    }\n\n    debugSettings = ...  // (4)!\n}\n</code></pre> <ol> <li>Required: Your initialized Aiuta instance that provides core functionality. See Getting started with Aiuta guide for details.</li> <li>Required: Controls which features are enabled in your try-on experience. See General configuration scheme to check list of available features and their configuration options.</li> <li>Required: Customizes the look and feel of the UI components. See General configuration scheme to check complete list of available configuration options.</li> <li>Optional: Configures debug-related settings for development and testing purposes.</li> </ol> <p>Please refer to the configuration scheme for more details</p>"}, {"location": "sdk/android/tryon-ui/configuration/#default-configurations", "title": "Default Configurations", "text": "<p>To use default configurations in your try-on experience, you can utilize the provided builder functions that come with pre-configured settings. These defaults are designed to provide a good starting point for your implementation.</p>"}, {"location": "sdk/android/tryon-ui/configuration/#dependencies", "title": "Dependencies", "text": "<p>To use the default configurations, add the following dependency to your project:</p> KotlinGroovy <pre><code>dependencies {\n    // Only default icon resources\n    implementation(\"com.aiuta:fashionsdk-configuration-defaults-icon:4.2.4\")\n\n    // Only default image resources\n    implementation(\"com.aiuta:fashionsdk-configuration-defaults-images:4.2.4\")\n\n    // Both icon and images with builders\n    implementation(\"com.aiuta:fashionsdk-configuration-defaults:4.2.4\")\n}\n</code></pre> <pre><code>dependencies {\n    // Only default icon resources\n    implementation \"com.aiuta:fashionsdk-configuration-defaults-icon:4.2.4\"\n\n    // Only default image resources\n    implementation \"com.aiuta:fashionsdk-configuration-defaults-images:4.2.4\"\n\n    // Both icon and images with builders\n    implementation \"com.aiuta:fashionsdk-configuration-defaults:4.2.4\"\n}\n</code></pre>"}, {"location": "sdk/android/tryon-ui/configuration/#using-default-configurations", "title": "Using Default Configurations", "text": "<p>To use default configurations, you can use the provided builder functions <code>defaultAiutaFeatures</code> and <code>defaultAiutaUserInterfaceConfiguration</code>. These functions come with sensible defaults that you can customize by passing initialization parameters.</p> <p>Here's how to use them:</p> <pre><code>import com.aiuta.fashionsdk.tryon.compose.aiutaConfiguration\nimport com.aiuta.fashionsdk.configuration.defaults.features.defaultAiutaFeatures\nimport com.aiuta.fashionsdk.configuration.defaults.theme.defaultAiutaUserInterfaceConfiguration\n\nval aiutaConfiguration = aiutaConfiguration {\n    aiuta = ... // Your initialized Aiuta instance\n\n    // Configure default features\n    defaultAiutaFeatures(\n        // Initialization params\n    )\n\n    // Configure default user interface\n    defaultAiutaUserInterfaceConfiguration(\n        // Initialization params\n    )\n}\n</code></pre>"}, {"location": "sdk/android/tryon-ui/configuration/#next-step", "title": "Next Step", "text": "<ul> <li> Learn how to use Try-On with UI</li> <li> Try with test configuration</li> </ul>"}, {"location": "sdk/android/tryon-ui/installation/", "title": "Installation of Try-On with UI", "text": "<p>Aiuta Try-On provides pre-built UI components and screens for implementing virtual try-on functionality in your application. This guide will walk you through implementing try-on features using the UI integration approach, which offers a complete out-of-the-box experience.</p> <p>The UI integration approach is ideal for developers who want to quickly implement try-on functionality with minimal custom code while maintaining a consistent look and feel with other Aiuta features.</p>"}, {"location": "sdk/android/tryon-ui/installation/#dependencies", "title": "Dependencies", "text": "<p>To use Aiuta Try On with UI components, you need to add the following dependencies to your project:</p> KotlinGroovy <pre><code>dependencies {\n    implementation(\"com.aiuta:fashionsdk-tryon-compose:4.2.4\")\n}\n</code></pre> <pre><code>dependencies {\n    implementation \"com.aiuta:fashionsdk-tryon-compose:4.2.4\"\n}\n</code></pre> Where to find latest version of SDK? <ul> <li>On GitHub Releases</li> <li>On Central Sonatype</li> </ul> Using Bill of Materials <p>To ensure consistent dependency versions and simplify version management, you can use the Bill of Materials (BOM)</p> KotlinGroovy <pre><code>dependencies {\n    // 1. Add BOM \n    implementation(platform(\"com.aiuta:fashionsdk-bom:4.2.4\"))\n\n    // 2. Add all required for you dependencies\n    implementation(\"com.aiuta:fashionsdk\")\n    implementation(\"com.aiuta:fashionsdk-configuration\") \n    ...\n}\n</code></pre> <pre><code>dependencies {\n    // 1. Add BOM\n    implementation platform(\"com.aiuta:fashionsdk-bom:4.2.4\")\n\n    // 2. Add all required for you dependencies\n    implementation \"com.aiuta:fashionsdk\"\n    implementation \"com.aiuta:fashionsdk-configuration\"\n    ...\n}\n</code></pre>"}, {"location": "sdk/android/tryon-ui/installation/#next-step", "title": "Next Step", "text": "<ul> <li> Quick Test SDK Propely Integrated</li> <li> Create Configuration</li> </ul>"}, {"location": "sdk/android/tryon-ui/quick-test/", "title": "Quick Test", "text": "<p>This guide describes how to test the Aiuta SDK in your Android application after installation. It includes steps for setting up the configuration with a demo API key and using example products to start the TryOn.</p>"}, {"location": "sdk/android/tryon-ui/quick-test/#configuration", "title": "Configuration", "text": "<p>For quick test purposes you can use demo <code>apiKey</code></p> <pre><code>AIUTADEMO\n</code></pre>"}, {"location": "sdk/android/tryon-ui/quick-test/#start-tryon-with-ui", "title": "Start TryOn with UI", "text": "Product 1Product 2Product 3Product 4Product 5Product 6Product 7 <pre><code>AiutaTryOnFlow(\n    modifier = Modifier.fillMaxSize(),\n    aiutaConfiguration = aiutaConfiguration,\n    productForGeneration = ProductItem(\n        id = \"A155850CHBI9XXAM\",\n        title = \"Diesel T-Adjust Q8 Maglietta T-Shirt\",\n        brand = \"Sample Brand\",\n        imageUrls = listOf(\n            \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-71f91730-50e3-4be0-8fc0-40e6461638ed.jpeg\",\n            \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-19ca29d4-81e1-4fdb-8c1f-893e60b447ce.jpeg\",\n            \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-b09df9e8-f2d7-4455-916d-9aa77855468b.jpeg\",\n            \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-f51ad642-aadf-441b-a441-60b93eb49924.jpeg\"\n        )\n    )\n)\n</code></pre> <pre><code>AiutaTryOnFlow(\n    modifier = Modifier.fillMaxSize(),\n    aiutaConfiguration = aiutaConfiguration,\n    productForGeneration = ProductItem(\n        id = \"A113020HGAM\",\n        title = \"T-Boggy-Megoval-D, T-shirt with maxi oval D embroidery\",\n        brand = \"Sample Brand\",\n        imageUrls = listOf(\n            \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-c31c20b5-65a8-47fb-8eae-513dfc8d532d.jpeg\",\n            \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-1e909cd5-98dc-4797-b973-c2b6a7b488d6.jpeg\",\n            \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-6bbc2ab6-f043-4593-a0d5-0c8ce5704a70.jpeg\",\n            \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-a5cbd3bc-9fef-4e1a-9de9-a92aaa089d06.jpeg\"\n        )\n    )\n)\n</code></pre> <pre><code>AiutaTryOnFlow(\n    modifier = Modifier.fillMaxSize(),\n    aiutaConfiguration = aiutaConfiguration,\n    productForGeneration = ProductItem(\n        id = \"CUMU0213A5UTC543WDB62\",\n        title = \"Blue poplin bowling shirt with Wolves, Ravens and Doves print\",\n        brand = \"Sample Brand\",\n        imageUrls = listOf(\n            \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-adfbbf56-49ee-48ea-8502-130a3fa2b44d.jpeg\",\n            \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-27bbf083-76aa-413e-b193-a598de4e609d.jpeg\",\n            \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-479125ac-345a-4d84-9498-2e3f7269e5bd.jpeg\",\n            \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-20277c58-5c93-47b2-a09b-5f2c5eb594b3.jpeg\",\n            \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-d2cfb4f4-6197-4cbe-8f97-27951258f717.jpeg\"\n        )\n    )\n)\n</code></pre> <pre><code>AiutaTryOnFlow(\n    modifier = Modifier.fillMaxSize(),\n    aiutaConfiguration = aiutaConfiguration,\n    productForGeneration = ProductItem(\n        id = \"CUJU0061A2USCV35MMN99\",\n        title = \"Black marble denim oversized shirt\",\n        brand = \"Sample Brand\",\n        imageUrls = listOf(\n            \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-dc9b4ecf-fe5e-44f1-aab1-1fbf302417c8.jpeg\",\n            \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-74f8f923-f972-4df0-9623-fea4b408a215.jpeg\",\n            \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-bbd93821-2cde-4b16-919c-e6dfbe299809.jpeg\",\n            \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-7de4f5e5-a25d-4717-950c-d3ca57d18fae.jpeg\"\n        )\n    )\n)\n</code></pre> <pre><code>AiutaTryOnFlow(\n    modifier = Modifier.fillMaxSize(),\n    aiutaConfiguration = aiutaConfiguration,\n    productForGeneration = ProductItem(\n        id = \"POMG0072Q2UFH546ARW06\",\n        title = \"Long sleeved ivory polo shirt with intarsia Argyle detail\",\n        brand = \"Sample Brand\",\n        imageUrls = listOf(\n            \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-c0b2aad9-fb9a-4f2a-b14a-39da25f54414.jpeg\",\n            \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-0a2ad54f-ad50-4060-b0bc-61d9d5b55cd8.jpeg\",\n            \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-94be633a-1e8d-42ad-92dc-94fe1056187c.jpeg\",\n            \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-bfb3638a-7d11-47a5-80b8-53eb8f2abe10.jpeg\"\n        )\n    )\n)\n</code></pre> <pre><code>AiutaTryOnFlow(\n    modifier = Modifier.fillMaxSize(),\n    aiutaConfiguration = aiutaConfiguration,\n    productForGeneration = ProductItem(\n        id = \"ABMA1361U0TW83900N60\",\n        title = \"Short grey wool dress with Marni Symbol\",\n        brand = \"Sample Brand\",\n        imageUrls = listOf(\n            \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-b792c3ea-23ca-445d-8d27-9336bd2ca3cf.jpeg\",\n            \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-d53e585b-d1b9-479a-96be-eff9607faf6b.jpeg\",\n            \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-945ede81-29eb-4e3a-ac35-f9bacd13bd6f.jpeg\",\n            \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-8066087f-66c5-44e6-8eac-5ae7bf29bf77.jpeg\",\n            \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-fb6515ee-3278-487b-ab6b-57395c364f6e.jpeg\"\n        )\n    )\n)\n</code></pre> <pre><code>AiutaTryOnFlow(\n    modifier = Modifier.fillMaxSize(),\n    aiutaConfiguration = aiutaConfiguration,\n    productForGeneration = ProductItem(\n        id = \"GOMA0459S3UTP749WR00N99\",\n        title = \"Black taffeta wide skirt with Marni Symbol\",\n        brand = \"Sample Brand\",\n        imageUrls = listOf(\n            \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-417b6e3d-9b3c-4d2d-aa2e-49d1c9223c1c.jpeg\",\n            \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-1302ebbc-8352-43bf-824f-cbe21f910689.jpeg\",\n            \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-545f9788-f961-4711-bb98-024c9b413f4e.jpeg\",\n            \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-cce0130e-f437-47d7-a867-26087fa18859.jpeg\"\n        )\n    )\n)\n</code></pre>"}, {"location": "sdk/android/tryon-ui/quick-test/#next-step", "title": "Next Step", "text": "<ul> <li> Create your custom Configuration</li> </ul>"}, {"location": "sdk/developer/", "title": "SDK Developer Section", "text": "<p>The Developer Section provides an overview of the configuration and model schemes that are common to all SDK implementations. By understanding these core concepts, developers can ensure a uniform approach to implementing the SDK, which helps maintain consistency and reduces redundancy in documentation.</p>"}, {"location": "sdk/developer/#sdk-integration", "title": "SDK integration", "text": "<p>In general, all SDK implementations are integrated in three steps:</p> <ol> <li>Add dependency</li> <li>Initialize with Configuration</li> <li>Call SDK UI by passing the Product</li> </ol> Type Definitions &amp; Naming Convention <ul> <li> <p><code>Callback</code> is a function type that can accept parameters and return a value. Additionally, on certain platforms, it might be represented as an interface with a similar method, but the underlying concept and conditions remain consistent.</p> </li> <li> <p><code>Observable</code> is a type that can be watched by the SDK for changes. The specific implementation of an <code>Observable</code> may vary depending on the platform: it might be represented as <code>Flow</code>, <code>ValueListenable</code>, <code>Stream</code>, or the SDK will supply a custom implementation to facilitate change observation.</p> </li> <li> <p><code>List</code> is a collection type that holds an ordered sequence of elements. It can be represented as an <code>Array</code>, <code>List</code>, or other similar constructs.</p> </li> <li> <p><code>Map</code> is a collection type that associates keys with values. It is used to store data in key-value pairs, where each key is unique. The specific implementation may vary depending on the platform, such as <code>Map</code>, <code>Dictionary</code>, or other similar constructs. </p> </li> <li> <p><code>Color</code> is a platform-specific type or <code>#ARGB</code> <code>string</code> representation, e.g.  <code>\"#FFEF5754\"</code></p> </li> <li> <p><code>Icon</code> type used for various UI icons throughout the SDK. Icons can be used in two ways:</p> <ul> <li>As a <code>template</code> image - the SDK will automatically color it based on where it's used</li> <li>As an <code>original</code> image - used without any color changes</li> </ul> <p>Depending on the platform, if the standard type supports defining this rendering modes, it will be used. Otherwise, the SDK will supply a type to configure the rendering mode and provide the graphics resource as platform-specific <code>Image</code> type or <code>string</code> representing path to the icon resource.</p> </li> <li> <p><code>Image</code> is a platform-specific type or <code>string</code> representing path to the image resource.</p> </li> <li> <p><code>Shape</code> is a type that specifies the visual appearance of UI elements, which may be as simple as a decimal number representing a corner radius. Depending on the platform and SDK implementation, it can also offer more configurations like corner curve types.</p> </li> <li> <p><code>TextStyle</code> is a type used to define text styling properties for various UI elements.</p> </li> </ul> <p>Naming Convention</p> <p>Implementation and naming details may vary depending on the specific platform, but the core concepts and overall structure remain consistent across all platforms. For example type names, described in the schemes, like: </p> <ul> <li> <p><code>Configuration</code></p> <ul> <li>in Swift it will be <code>Aiuta.Configuration</code></li> <li>in Kotlin and Dart - <code>AiutaConfiguration</code></li> </ul> </li> <li> <p><code>UserInterface</code></p> <ul> <li>in Swift it will be <code>Aiuta.Configuration.UserInterface</code></li> <li>in Kotlin and Dart - <code>AiutaUserInterfaceConfiguration</code></li> </ul> </li> <li> <p><code>Product</code></p> <ul> <li>in Swift it will be <code>Aiuta.Product</code></li> <li>in Kotlin and Dart - <code>AiutaProduct</code></li> </ul> </li> </ul> <p>and so on - the key part of the name is the same.</p> <p>A scheme-based approach in the documentation applies core concepts and structures uniformly, unifying the SDK's understanding and implementation. By following this strategy, we achieve consistency in our SDK's implementations and minimize redundancy in our documentation for each platform. We use this documentation ourselves for development.</p> <p>Annotations in schemes</p> <p>Don't miss them - click  for more details</p>"}, {"location": "sdk/developer/#quick-start", "title": "Quick Start", "text": "<p>Check out the quick start guide to get started with the platform</p> <ul> <li> <p> Android</p> <pre><code>minSdk: 23\ntargetSdk: 36\n</code></pre> </li> <li> <p> iOS</p> <pre><code>iOS: 13+\nswift: 5.10\n</code></pre> </li> <li> <p> Flutter  Android  iOS</p> <pre><code>sdk: &gt;=3.1.0 &lt;4.0.0\nflutter: &gt;= 3.19.6\n</code></pre> </li> <li> <p> Web</p> <p>Coming soon</p> </li> </ul>"}, {"location": "sdk/developer/product/", "title": "Product Scheme", "text": "<p>The product scheme defines the structure and properties of products within the Aiuta platform. This scheme is essential for displaying product information in the SDK's user interface and managing product-related functionality.</p>"}, {"location": "sdk/developer/product/#product", "title": "Product", "text": "<pre><code>Product {\n  id: String // (1)!\n  title: String // (2)!\n  brand: String // (3)!\n  imageUrls: List&lt;String&gt; // (4)!\n  price: Price | null // (5)!\n}\n</code></pre> <ol> <li>Unique identifier for the product, used to distinguish it across the platform. Must match the identifiers provided to Aiuta for training try-on models.</li> <li>The name or title of the product, displayed prominently in the user interface.</li> <li>The brand associated with the product, identifying the manufacturer or provider.</li> <li> <p>Collection of URLs pointing to product images. Should contain at least one URL.</p> <p>Extra padding for the flat lay image</p> <p>The flat lay image in case of cropping without margins should be the first in the <code>imageUrls</code> list if <code>ProductBarTheme</code> <code>applyProductFirstImageExtraPadding</code> set to <code>true</code></p> </li> <li> <p>Optional pricing details for the product, including current and old prices.</p> </li> </ol>"}, {"location": "sdk/developer/product/#price", "title": "Price", "text": "<pre><code>Price {\n  current: String // (1)!\n  old: String | null // (2)!\n}\n</code></pre> <ol> <li>Current price of the product, formatted as a localized string including currency symbol and amount.</li> <li>Optional old price of the product, formatted as a localized string. If provided, will be displayed as strikethrough near the current price.</li> </ol> <p>Prices Theme</p> <p>You only need to pass product prices if you set up <code>PricesTheme</code></p>"}, {"location": "sdk/developer/configuration/", "title": "Configuration Scheme", "text": "<p>The configuration is structured as a hierarchical object that controls various aspects of the SDK's behavior, appearance, and functionality. The configuration is designed to be flexible and extensible, allowing for customization of features, UI elements, and behavior.</p>"}, {"location": "sdk/developer/configuration/#configuration", "title": "Configuration", "text": "<pre><code>Configuration {\n  auth: Auth // (1)!\n  userInterface: UserInterface // (2)!\n  features: Features // (3)!\n  analytics: Analytics | null // (4)!\n  debugSettings: DebugSettings // (5)!\n}\n</code></pre> <ol> <li> <p> Required to authenticate Aiuta SDK to use API with your credentials. Supported authentication methods are <code>ApiKey</code> or <code>Jwt</code> + <code>subscriptionId</code>.</p> </li> <li> <p> Configuration of the user interface presentation style, swipe-to-dismiss policy, and UI components themes for the Aiuta SDK.</p> </li> <li> <p> Describes the set of features enabled in the SDK for the user and thier interaction with the app.</p> </li> <li> <p> Allows to receive analytics events from the SDK and send them to your analytics provider.</p> </li> <li> <p> Controls the logging settings and validation policies for various parameters.</p> </li> </ol> <p>Default configuration</p> <p>The configuration itself, as well as all themes and most features, have built-in defaults on each platform. You decide how much detail you want to customize the behavior and appearance of the SDK. Starting with a few necessary parameters, ending with every aspect that is provided in the described schemes.</p> <p>The minimum configuration for the fastest integration with the standard set of features and default UI requires only the following:</p> <ul> <li>Authentication credentials</li> <li>Your Terms of Service URL</li> <li>Add to Cart handler</li> </ul>"}, {"location": "sdk/developer/configuration/#platform-specifics", "title": "Platform specifics", "text": "<p>Check out the details and nuances of the configuration in the implementation of the platform you need:</p> <ul> <li> Android</li> <li> iOS</li> <li> Flutter</li> </ul>"}, {"location": "sdk/developer/configuration/#sequence-diagram", "title": "Sequence Diagram", "text": "<p>Initialization process from launching the app to displaying products, including SDK configuration.</p> <pre><code>sequenceDiagram\n    autonumber\n    actor USR as \u2800&lt;br&gt;User\n    participant APP as Your&lt;br&gt;App\n    participant BE as Your&lt;br&gt;Backend\n    participant SDK as Aiuta&lt;br&gt;SDK\n    participant API as Aiuta&lt;br&gt;Backend\n    participant GS as Storage\n    note over GS: Aiuta or Yours\n\n    USR-&gt;&gt;APP: Launch the App\n    par\n        APP-&gt;&gt;SDK: Initialize with Configuration\n\n        activate SDK\n        Note over APP,SDK: Includes auth, UI, features, analytics\n        SDK-&gt;&gt;API: Request internal configuration\n        API--&gt;&gt;SDK: Internal configuration\n        opt predefined models feature\n            SDK-&gt;&gt;API: Request predefined models\n            API--&gt;&gt;SDK: Predefined models collection\n        end\n        deactivate SDK\n    and\n        APP-&gt;&gt;BE: Load products\n        BE--&gt;&gt;APP: Products\n        Note over APP,BE: Including a flag whether&lt;br&gt;a virtual try-on is available\n        APP--&gt;&gt;USR: Show products\n        Note over APP,USR: Including a try-on button for&lt;br&gt;products with try-on feature\n    end</code></pre> <p>Please note in 8 \u2013 9 that you should obtain information about the availability of the virtual try-on feature for each of your products from your backend, as the SDK does not receive information about product availability and will attempt to launch a virtual try-on with any product you provide, which may result in an error if that product has not been trained by Aiuta.</p>"}, {"location": "sdk/developer/configuration/analytics/", "title": "Analytics Scheme", "text": "<p>Allows handle analytics events generated by the SDK. By implementing the <code>onAnalyticsEvent</code> callback, developers can integrate these events with external analytics services or define custom event handling logic.</p>"}, {"location": "sdk/developer/configuration/analytics/#analytics", "title": "Analytics", "text": "<pre><code>Analytics {\n  handler: {\n    onAnalyticsEvent: Callback(Event) // (1)!\n  }\n}\n</code></pre> <ol> <li>Callback function that processes analytics events generated by the SDK, allowing integration with external analytics services or custom event handling.</li> </ol> <p>All events are listed in the analytics section</p>"}, {"location": "sdk/developer/configuration/auth/", "title": "Auth Schemes", "text": "<p>Auth is used to authenticate requests from Aiuta SDK to API with your credentials.</p> <p>Using JSON Web Tokens (JWT) is the most flexible and secure way to access Aiuta services, while the ApiKey authentication method is best used for server-side integration. But it's up to you.  Read more about API Authentication.</p>"}, {"location": "sdk/developer/configuration/auth/#auth", "title": "Auth", "text": "JwtApiKey <pre><code>JwtAuth {\n  subscriptionId: String // (1)!\n  getJwt: Callback(Map&lt;String: String&gt;) =&gt; String // (2)!\n}\n</code></pre> <ol> <li> <p>Should be provided for the SDK to make unsecured requests related to your account.</p> <p>Please see Obtaining credentials for instructions on how to get your <code>subscriptionId</code></p> </li> <li> <p>The implementation of this method should securely generate the JWT on the server side and subsequently return it to the SDK.</p> <p>Returns</p> <p>Non-empty string representing the generated JWT</p> <p>Throws</p> <p>An error if the JWT cannot be generated. </p> <p>If an error is thrown, the SDK will be unable to complete the tryOn request and will display an error message to the user</p> </li> </ol> <pre><code>ApiKeyAuth {\n  apiKey: String\n}\n</code></pre>"}, {"location": "sdk/developer/configuration/auth/#details", "title": "Details", "text": "<p>Please see</p> <ul> <li>Obtaining credentials</li> <li>Implementing the backend component</li> </ul> <code>getJwt</code><code>subscriptionId</code> <p>This method is invoked by the SDK each time a tryOn request necessitates authentication through a JSON Web Token. </p> <p>The SDK will provide a set of key-value pairs that represent the <code>parameters</code> of the request requiring a JWT. These parameters include identifiers like a <code>uploaded_image_id</code> and <code>product_id</code> and can be used  for associating the JWT with the specific image and product involved in the tryOn request.  This ensures that the generated token is tailored specifically to the request being processed, enhancing security and relevance.</p> <p>The <code>subscriptionId</code> is used to authenticate requests that do not require secure transmission. It acts as a key to ensure that the requests are properly linked to your subscription and account.</p>"}, {"location": "sdk/developer/configuration/auth/#sequence-diagram", "title": "Sequence diagram", "text": "<pre><code>sequenceDiagram\n    autonumber\n    actor USR as \u2800&lt;br&gt;User\n    participant APP as Your&lt;br&gt;App\n    participant BE as Your&lt;br&gt;Backend\n    participant SDK as Aiuta&lt;br&gt;SDK\n    participant API as Aiuta&lt;br&gt;Backend\n    participant GS as Storage\n    note over GS: Aiuta or Yours\n\n    USR-&gt;&gt;SDK: Start some action\n    activate SDK\n    SDK-&gt;&gt;APP: Request JWT (params)\n    APP-&gt;&gt;BE: Request new JWT (params)\n    BE-&gt;&gt;BE: Generate JWT\n    Note over BE: Validating the request parameters\n    BE--&gt;&gt;APP: Return generated JWT\n    APP--&gt;&gt;SDK: Provide JWT\n    SDK-&gt;&gt;API: Make request\n    Note over SDK,API: Authorization: Bearer &lt;token&gt;\n    API-&gt;&gt;API: Validate JWT\n\n    break JWT is invalid\n    rect\n        API--&gt;&gt;SDK: Retun 401 Unauthorized\n        SDK--&gt;&gt;USR: Show something went wrong\n    end\n    end\n\n    API--&gt;&gt;SDK: Return response\n    SDK--&gt;&gt;USR: Provide UI feedback / result\n    deactivate SDK</code></pre>"}, {"location": "sdk/developer/configuration/auth/#sequence-diagram_1", "title": "Sequence diagram", "text": "<pre><code>sequenceDiagram\n    autonumber\n    actor USR as \u2800&lt;br&gt;User\n    participant APP as Your&lt;br&gt;App\n    participant BE as Your&lt;br&gt;Backend\n    participant SDK as Aiuta&lt;br&gt;SDK\n    participant API as Aiuta&lt;br&gt;Backend\n    participant GS as Storage\n    note over GS: Aiuta or Yours\n\n    USR-&gt;&gt;SDK: Start some action\n    activate SDK\n    SDK-&gt;&gt;SDK: Add Subscription ID&lt;br&gt;to the request Headers\n    SDK-&gt;&gt;API: Make request\n    Note over SDK,API: x-user-id: &lt;subscription_id&gt;\n    API-&gt;&gt;API: Match Subscription ID\n    API--&gt;&gt;SDK: Return response\n    SDK--&gt;&gt;USR: Provide UI feedback / result\n    deactivate SDK</code></pre>"}, {"location": "sdk/developer/configuration/auth/#details_1", "title": "Details", "text": "<p>Please see API documentation Obtaining credentials section for instructions on how to get your <code>apiKey</code></p> <p>The <code>apiKey</code> is used to authenticate all outgoing requests from the Aiuta SDK to the Aiuta API. This key ensures that the requests are linked to your account, allowing the SDK to access the necessary resources and services provided by Aiuta. </p>"}, {"location": "sdk/developer/configuration/auth/#sequence-diagram_2", "title": "Sequence diagram", "text": "<pre><code>sequenceDiagram\n    autonumber\n    actor USR as \u2800&lt;br&gt;User\n    participant APP as Your&lt;br&gt;App\n    participant BE as Your&lt;br&gt;Backend\n    participant SDK as Aiuta&lt;br&gt;SDK\n    participant API as Aiuta&lt;br&gt;Backend\n    participant GS as Storage\n    note over GS: Aiuta or Yours\n\n    USR-&gt;&gt;SDK: Start some action\n    activate SDK\n    SDK-&gt;&gt;SDK: Add Api Key&lt;br&gt;to the request Headers\n    SDK-&gt;&gt;API: Make request\n    Note over SDK,API: x-api-key: &lt;api_key&gt;\n    API-&gt;&gt;API: Check Api Key\n    API--&gt;&gt;SDK: Return response\n    SDK--&gt;&gt;USR: Provide UI feedback / result\n    deactivate SDK</code></pre>"}, {"location": "sdk/developer/configuration/debug-settings/", "title": "Debug Settings Scheme", "text": "<p>The <code>DebugSettings</code> is helping to manage and troubleshoot the SDK's behavior. It provides a set of options that control logging and validation policies, ensuring that the SDK operates smoothly and any issues can be quickly identified and resolved.</p>"}, {"location": "sdk/developer/configuration/debug-settings/#debug-settings", "title": "Debug Settings", "text": "<pre><code>DebugSettings {\n  isLoggingEnabled: Bool // (1)!\n  emptyStringsPolicy: ValidationPolicy // (2)!\n  unavailableResourcesPolicy: ValidationPolicy // (3)!\n  infoPlistDescriptionsPolicy: ValidationPolicy // (4)!\n  listSizePolicy: ValidationPolicy // (5)!\n}\n</code></pre> <ol> <li>Controls whether the SDK should log debug information, providing detailed logs to help developers understand its behavior.</li> <li>Validation policy for checking whether required strings in the SDK configuration are not empty, preventing runtime issues.</li> <li>Validation policy for checking whether required resources are available and properly configured.</li> <li>Validation policy for checking whether the <code>info.plist</code> file contains all required descriptions for enabled features.</li> <li>Validation policy for checking whether lists required by the SDK are of the correct size.</li> </ol>"}, {"location": "sdk/developer/configuration/debug-settings/#validation-policy", "title": "Validation Policy", "text": "<pre><code>enum ValidationPolicy {\n  ignore // (1)!\n  warning // (2)!\n  fatal // (3)!\n}\n</code></pre> <ol> <li>Ignores all validation errors, allowing the SDK to proceed without taking any action.</li> <li>Logs validation errors to the console for debugging purposes without interrupting execution.</li> <li>Stops the application's execution with a fatal error when validation errors occur.</li> </ol> <p>The <code>ValidationPolicy</code> enum defines the severity of validation checks, determining whether errors are ignored, logged as warnings, or treated as fatal, halting execution.</p>"}, {"location": "sdk/developer/configuration/features/", "title": "Features Scheme", "text": "<p>Describes the set of features enabled in the SDK for the users and thier interaction with the app.</p>"}, {"location": "sdk/developer/configuration/features/#features", "title": "Features", "text": "<pre><code>Features {\n  welcomeScreen: WelcomeScreenFeature | null // (1)!\n  onboarding: OnboardingFeature | null // (2)!\n  consent: ConsentFeature | null // (3)!\n  imagePicker: ImagePickerFeature // (4)!\n  tryOn: TryOnFeature // (5)!\n  share: ShareFeature | null // (6)!\n  wishlist: WishlistFeature | null // (7)!\n}\n</code></pre> <ol> <li> Configures an optional welcome screen that introduces users to the SDK's functionality.</li> <li> Sets up the onboarding process to guide users through the SDK's features and capabilities.</li> <li> Manages user consent options for data processing, which can be integrated with onboarding or used independently.</li> <li> Controls the image selection interface, allowing users to pick photos, take new ones, use predefined models, or access previous uploads.</li> <li> Configures the core virtual try-on functionality for trying products virtually.</li> <li> Enables sharing capabilities for generated try-on images with customizable options.</li> <li> Integrates with the host app's wishlist functionality for product management.</li> </ol>"}, {"location": "sdk/developer/configuration/features/consent/", "title": "Consent Scheme", "text": "<p>Manages user  consent options for data processing, which can be integrated with onboarding or used independently.</p> <p> </p>"}, {"location": "sdk/developer/configuration/features/consent/#consent-feature", "title": "Consent Feature", "text": "Standalone Onboarding PageStandalone Image Picker PageEmbedded Into Onboarding <pre><code>ConsentStandaloneOnboardingPageFeature {\n  strings {\n    consentPageTitle: String | null // (1)!\n    consentTitle: String // (2)!\n    consentDescriptionHtml: String // (3)!\n    consentFooterHtml: String | null // (4)!\n    consentButtonAccept: String // (5)!\n  }\n\n  icons {\n    consentTitle24: Icon // (6)!\n  }\n\n  styles {\n    drawBordersAroundConsents: Bool // (7)!\n  }\n\n  data {\n    consents: List&lt;Consent&gt; // (8)!\n  }\n\n  dataProvider: BuiltIn | Custom {\n    obtainedConsentIds: Observable&lt;List&lt;string&gt;&gt; // (9)!\n    obtainConsentIds: Callback(List&lt;string&gt;) // (10)!\n  }\n}\n</code></pre> <ol> <li>Optional title for the standalone consent page at the top of the screen.</li> <li>Main title displayed on the standalone consent page.</li> <li>HTML content describing the consent terms and conditions.</li> <li>Optional HTML footer content for additional information.</li> <li>Text label for the button that accepts the consent terms.</li> <li>Icon displayed next to the consent title in the standalone page.</li> <li>Controls whether to display borders around consent sections.</li> <li> <p>List of consent options that users must and may accept.</p> <p>See consent  scheme for more deatils</p> </li> <li> <p>Observable property tracking which consent options have been already accepted.</p> </li> <li> <p>Callback function triggered when user accepts consents.</p> <p>You should save the consent IDs that are passed and  provide them in the <code>obtainedConsentsIds</code> property for future use. If not stored, the SDK will show the consent screen again during the next Try-On session.</p> </li> </ol> <pre><code>ConsentStandaloneImagePickerPageFeature {\n  strings {\n    consentPageTitle: String | null // (1)!\n    consentTitle: String // (2)!\n    consentDescriptionHtml: String // (3)!\n    consentFooterHtml: String | null // (4)!\n    consentButtonAccept: String // (5)!\n  }\n\n  icons {\n    consentTitle24: Icon // (6)!\n  }\n\n  styles {\n    drawBordersAroundConsents: Bool // (7)!\n  }\n\n  data {\n    consents: List&lt;Consent&gt; // (8)!\n  }\n\n  dataProvider: BuiltIn | Custom {\n    obtainedConsentIds: Observable&lt;List&lt;string&gt;&gt; // (9)!\n    obtainConsentIds: Callback(List&lt;string&gt;) // (10)!\n  }\n}\n</code></pre> <ol> <li>Optional title for the standalone consent page at the top of the screen.</li> <li>Main title displayed on the standalone consent page.</li> <li>HTML content describing the consent terms and conditions.</li> <li>Optional HTML footer content for additional information.</li> <li>Text label for the button that accepts the consent terms.</li> <li>Icon displayed next to the consent title in the standalone page.</li> <li>Controls whether to display borders around consent sections.</li> <li> <p>List of consent options that users must and may accept.</p> <p>See consent  scheme for more deatils</p> </li> <li> <p>Observable property tracking which consent options have been already accepted.</p> </li> <li> <p>Callback function triggered when user accepts consents.</p> <p>You should save the consent IDs that are passed and  provide them in the <code>obtainedConsentsIds</code> property for future use. If not stored, the SDK will show the consent screen again during the next Try-On session. </p> </li> </ol> <pre><code>ConsentEmbeddedIntoOnboardingFeature {\n  strings {\n    consentHtml: String // (1)!\n  }\n}\n</code></pre> <ol> <li>HTML content displayed at the bottom of the onboarding screen for embedded consent.</li> </ol>"}, {"location": "sdk/developer/configuration/features/consent/#data", "title": "Data", "text": "<p>The Consent type defines how user consent is managed within the SDK, specifying the interaction required from the user and the conditions under which consent is considered given.</p>"}, {"location": "sdk/developer/configuration/features/consent/#consent", "title": "Consent", "text": "<pre><code>Consent {\n  id: String // (1)!\n  type: ConsentType // (2)!\n  html: String // (3)!\n}\n</code></pre> <ol> <li>Unique identifier for the consent option.</li> <li>Type of consent determining how it should be presented and handled.</li> <li>HTML content containing the consent terms and conditions.</li> </ol>"}, {"location": "sdk/developer/configuration/features/consent/#type", "title": "Type", "text": "<pre><code>enum ConsentType {\n  implicitWithoutCheckbox // (1)!\n  implicitWithCheckbox // (2)!\n  explicitRequired // (3)!\n  explicitOptional // (4)!\n}\n</code></pre> <ol> <li> <p>Consent has no checkbox and it is assumed to be given by pressing the accept button. </p> <p>GDPR Compliance</p> <p>It can be just an accept button, but only if it's very clear exactly what the user is consenting to at that moment. You can't bundle multiple consents into one accept unless they're strictly necessary. For example, GDPR says marketing consent should always be separate if possible.</p> <p>Please consider that this option is not valid for all cases, and it should be used with caution. </p> <p>Consult with a legal department if in doubt.</p> </li> <li> <p>Consent has disabled pre-ticked checkbox and it is assumed to be given by pressing the accept button. </p> <p>GDPR Compliance</p> <p>This can be used only for the consent that is necessary for the service, as it's not really \"consent\" under GDPR \u2014 it's processing based on contract necessity (Article 6(1)(b)) or legal obligation, not based on \"freely given consent\" (Article 6(1)(a)). So, it is just informing the user, not asking them for an additional permission.</p> <p>Please consider that this option is not valid for all cases, and it should be used with caution. </p> <p>Consult with a legal department if in doubt.</p> </li> <li> <p>Consent has a checkbox and the user must check it in order to continue.</p> </li> <li>Consent has a checkbox and the user may proceed without checking it.</li> </ol> <p>Defines the methods for obtaining consent to process user photos.</p> <p>GDPR Compliance</p> <p>Be careful when using implicit consent types. </p> <p>Ensure to review annotations  for clarity and compliance.</p>"}, {"location": "sdk/developer/configuration/features/consent/#data_1", "title": "Data", "text": "<p>The Consent type defines how user consent is managed within the SDK, specifying the interaction required from the user and the conditions under which consent is considered given.</p>"}, {"location": "sdk/developer/configuration/features/consent/#consent_1", "title": "Consent", "text": "<pre><code>Consent {\n  id: String // (1)!\n  type: ConsentType // (2)!\n  html: String // (3)!\n}\n</code></pre> <ol> <li>Unique identifier for the consent option.</li> <li>Type of consent determining how it should be presented and handled.</li> <li>HTML content containing the consent terms and conditions.</li> </ol>"}, {"location": "sdk/developer/configuration/features/consent/#type_1", "title": "Type", "text": "<pre><code>enum ConsentType {\n  implicitWithoutCheckbox // (1)!\n  implicitWithCheckbox // (2)!\n  explicitRequired // (3)!\n  explicitOptional // (4)!\n}\n</code></pre> <ol> <li> <p>Consent has no checkbox and it is assumed to be given by pressing the accept button. </p> <p>GDPR Compliance</p> <p>It can be just an accept button, but only if it's very clear exactly what the user is consenting to at that moment. You can't bundle multiple consents into one accept unless they're strictly necessary. For example, GDPR says marketing consent should always be separate if possible.</p> <p>Please consider that this option is not valid for all cases, and it should be used with caution. </p> <p>Consult with a legal department if in doubt.</p> </li> <li> <p>Consent has disabled pre-ticked checkbox and it is assumed to be given by pressing the accept button. </p> <p>GDPR Compliance</p> <p>This can be used only for the consent that is necessary for the service, as it's not really \"consent\" under GDPR \u2014 it's processing based on contract necessity (Article 6(1)(b)) or legal obligation, not based on \"freely given consent\" (Article 6(1)(a)). So, it is just informing the user, not asking them for an additional permission.</p> <p>Please consider that this option is not valid for all cases, and it should be used with caution. </p> <p>Consult with a legal department if in doubt.</p> </li> <li> <p>Consent has a checkbox and the user must check it in order to continue.</p> </li> <li>Consent has a checkbox and the user may proceed without checking it.</li> </ol> <p>Defines the methods for obtaining consent to process user photos.</p> <p>GDPR Compliance</p> <p>Be careful when using implicit consent types. </p> <p>Ensure to review annotations  for clarity and compliance.</p>"}, {"location": "sdk/developer/configuration/features/image-picker/", "title": "Image Picker Scheme", "text": "<p>Controls  the image selection interface, allowing users to pick photos, take new ones, use predefined models, or access previous uploads.</p> <p> </p>"}, {"location": "sdk/developer/configuration/features/image-picker/#image-picker-feature", "title": "Image Picker Feature", "text": "<pre><code>ImagePickerFeature {\n  camera: ImagePickerCameraFeature | null // (1)!\n  photoGallery: ImagePickerPhotoGalleryFeature // (2)!\n  predefinedModels: ImagePickerPredefinedModelFeature | null // (3)!\n  uploadsHistory: ImagePickerUploadsHistoryFeature | null // (4)!\n\n  images {\n    examples: List&lt;Image&gt; // (5)!\n  }\n\n  strings {\n    imagePickerTitleEmpty: String // (6)!\n    imagePickerDescriptionEmpty: String // (7)!\n    imagePickerButtonUploadImage: String // (8)!\n  }\n}\n</code></pre> <ol> <li> Configuration for camera functionality, allowing users to take new photos directly within the SDK.</li> <li> Configuration for accessing and selecting images from the device's photo library.</li> <li> Configuration for using predefined model images as an alternative to user photos.</li> <li> Configuration for managing and reusing previously uploaded images.</li> <li>List of exactly 2 example of input images to display in the image picker interface.</li> <li>Title text displayed above images when the image picker is empty.</li> <li>Description text shown when the image picker is empty.</li> <li>Label text for the button used to upload new photos.</li> </ol>"}, {"location": "sdk/developer/configuration/features/image-picker/#sequence-diagrams", "title": "Sequence Diagrams", "text": "Default configurationCustom configuration <p>Detailed sequence of the user selecting the source image for the virtual try-on.</p> Upload a photoPredefined model / Uploads history <pre><code>sequenceDiagram\n    autonumber\n    actor USR as \u2800&lt;br&gt;User\n    participant APP as Your&lt;br&gt;App\n    participant BE as Your&lt;br&gt;Backend\n    participant SDK as Aiuta&lt;br&gt;SDK\n    participant API as Aiuta&lt;br&gt;Backend\n    participant GS as Storage\n    note over GS: Aiuta or Yours\n\n    USR-&gt;&gt;APP: Tap Try-on Button\n    APP-&gt;&gt;SDK: Start Try-on (Product)\n    activate SDK\n    SDK--&gt;&gt;USR: Present SDK UI\n\n    USR-&gt;&gt;SDK: Select / take a new photo\n    SDK-&gt;&gt;API: Upload a photo\n    activate API\n    API-&gt;&gt;GS: Save input image\n    Note over API,GS: Anonymous.&lt;br&gt;The photo is associated with the&lt;br&gt;app entry, not the user entry\n    API-&gt;&gt;API: Generate image ID, form URL\n    API--&gt;&gt;SDK: Return image ID, URL\n    deactivate API\n\n    SDK-&gt;&gt;SDK: Start Try-on (Image)\n    deactivate SDK</code></pre> <pre><code>sequenceDiagram\n    autonumber\n    actor USR as \u2800&lt;br&gt;User\n    participant APP as Your&lt;br&gt;App\n    participant BE as Your&lt;br&gt;Backend\n    participant SDK as Aiuta&lt;br&gt;SDK\n    participant API as Aiuta&lt;br&gt;Backend\n    participant GS as Storage\n    note over GS: Aiuta or Yours\n\n    USR-&gt;&gt;APP: Tap Try-on Button\n    APP-&gt;&gt;SDK: Start Try-on (Product)\n    activate SDK\n    SDK--&gt;&gt;USR: Present SDK UI\n\n    USR-&gt;&gt;SDK: Select model / previously used photo\n    SDK-&gt;&gt;SDK: Add/Reorder image in the history\n    Note right of SDK: Using the image ID\n\n    SDK-&gt;&gt;SDK: Start Try-on (Image)\n    deactivate SDK</code></pre> <p>Detailed sequence of the user selecting the source image for the virtual try-on with custom configuration.</p> Upload a photoPredefined model / Uploads history <pre><code>sequenceDiagram\n    autonumber\n    actor USR as \u2800&lt;br&gt;User\n    participant APP as Your&lt;br&gt;App\n    participant BE as Your&lt;br&gt;Backend\n    participant SDK as Aiuta&lt;br&gt;SDK\n    participant API as Aiuta&lt;br&gt;Backend\n    participant GS as Storage\n    note over GS: Aiuta or Yours\n\n    USR-&gt;&gt;APP: Tap Try-on Button\n    APP-&gt;&gt;SDK: Start Try-on (Product)\n    activate SDK\n    SDK--&gt;&gt;USR: Present SDK UI\n\n    USR-&gt;&gt;SDK: Tap upload a photo\n    SDK-&gt;&gt;SDK: Check consent obtained\n    opt consent required\n        SDK--&gt;&gt;USR: Present consent page\n        USR-&gt;&gt;SDK: Accept consent terms\n        SDK-&gt;&gt;APP: Call obtainConsentIds (consent IDs)\n        APP-&gt;&gt;BE: Store consents obtained\n    end\n\n    SDK--&gt;&gt;USR: Show options for uploading\n    USR-&gt;&gt;SDK: Select/take a new photo\n    SDK-&gt;&gt;API: Upload a photo\n    activate API\n    API-&gt;&gt;GS: Save input image\n    Note over API,GS: Anonymous.&lt;br&gt;The photo is associated with the&lt;br&gt;app entry, not the user entry\n    API-&gt;&gt;API: Generate image ID, form URL\n    API--&gt;&gt;SDK: Return image ID, URL\n    deactivate API\n\n    SDK-&gt;&gt;SDK: Start Try-on (Image)\n    deactivate SDK</code></pre> <p>See custom 6 \u2013 8 Consent configuration</p> <pre><code>sequenceDiagram\n    autonumber\n    actor USR as \u2800&lt;br&gt;User\n    participant APP as Your&lt;br&gt;App\n    participant BE as Your&lt;br&gt;Backend\n    participant SDK as Aiuta&lt;br&gt;SDK\n    participant API as Aiuta&lt;br&gt;Backend\n    participant GS as Storage\n    note over GS: Aiuta or Yours\n\n    USR-&gt;&gt;APP: Tap Try-on Button\n    APP-&gt;&gt;SDK: Start Try-on (Product)\n    activate SDK\n    SDK--&gt;&gt;USR: Present SDK UI\n\n    USR-&gt;&gt;SDK: Select model / previously used photo\n    SDK-&gt;&gt;APP: Add/Select image in the history\n    APP-&gt;&gt;BE: Update uploads history\n    Note over APP,BE: Recent image first in the list\n    APP--&gt;&gt;SDK: Update data provider observable list\n\n    SDK-&gt;&gt;SDK: Start Try-on (Image)\n    deactivate SDK</code></pre>"}, {"location": "sdk/developer/configuration/features/image-picker/#sub-features", "title": "Sub Features", "text": ""}, {"location": "sdk/developer/configuration/features/image-picker/#camera", "title": "Camera", "text": "<pre><code>ImagePickerCameraFeature {\n  icons {\n    camera24: Icon // (1)!\n  }\n\n  strings {\n    cameraButtonTakePhoto: String // (2)!\n    cameraPermissionTitle: String // (3)!\n    cameraPermissionDescription: String // (4)!\n    cameraPermissionButtonOpenSettings: String // (5)!\n  }\n}\n</code></pre> <ol> <li>Icon displayed for the camera button in the bottom sheet list.</li> <li>Label text for the button used to take a photo.</li> <li>Title text displayed in the alert when camera permissions are denied.</li> <li>Description text shown in the alert when camera permissions are denied.</li> <li>Label text for the button that opens app settings to change camera permissions.</li> </ol>"}, {"location": "sdk/developer/configuration/features/image-picker/#photo-gallery", "title": "Photo Gallery", "text": "<pre><code>ImagePickerPhotoGalleryFeature {\n  icons {\n    gallery24: Icon // (1)!\n  }\n\n  strings {\n    galleryButtonSelectPhoto: String // (2)!\n  }\n}\n</code></pre> <ol> <li>Icon displayed for the gallery button in the bottom sheet list.</li> <li>Label text for the button used to select a photo from the gallery.</li> </ol>"}, {"location": "sdk/developer/configuration/features/image-picker/#predefined-models", "title": "Predefined Models", "text": "<pre><code>ImagePickerPredefinedModelFeature {\n  icons {\n    selectModels24: Icon // (1)!\n  }\n\n  data {\n    preferredCategoryId: String // (2)!\n  }\n\n  strings {\n    predefinedModelPageTitle: String // (3)!\n    predefinedModelOr: String // (4)!\n    predefinedModelErrorEmptyModelsList: String // (5)!\n    predefinedModelCategories: Map&lt;String, String&gt; // (6)!\n  }\n}\n</code></pre> <ol> <li>Icon displayed for the predefined models button in the bottom sheet list.</li> <li>Identifier of the preferred category to show by default when user opens models page.</li> <li>Title text for the predefined models page and button in the bottom sheet list.</li> <li>Label text displayed before the predefined models button in the image picker.</li> <li>Error message shown when the list of predefined models is empty.</li> <li>Mapping of category identifiers to their display titles, typically covering <code>man</code> and <code>woman</code> categories.</li> </ol>"}, {"location": "sdk/developer/configuration/features/image-picker/#uploads-history", "title": "Uploads History", "text": "<pre><code>ImagePickerUploadsHistoryFeature {\n  strings {\n    uploadsHistoryButtonNewPhoto: String // (1)!\n    uploadsHistoryTitle: String // (2)!\n    uploadsHistoryButtonChangePhoto: String // (3)!\n  }\n\n  styles {\n    changePhotoButtonStyle: primary | blurred // (4)!\n  }\n\n  dataProvider: BuiltIn | Custom {\n    uploadedImages: Observable&lt;List&lt;InputImage&gt;&gt; // (5)!\n    addUploadedImages: Callback(List&lt;InputImage&gt;) // (6)!\n    deleteUploadedImages: Callback(List&lt;InputImage&gt;) // (7)!\n    selectUploadedImage: Callback(InputImage) // (8)!\n  }\n}\n</code></pre> <ol> <li>Text label for the button to upload a new photo.</li> <li>Title text displayed at the top of the uploads history bottom sheet.</li> <li>Text label for the button to change the currently selected photo.</li> <li>Visual style for the change photo button, either primary (solid) or blurred (with optional outline).</li> <li>Observable collection of images previously uploaded by the user, with most recent first.</li> <li>Callback to add new images to the uploads history.</li> <li>Callback to remove images from the uploads history.</li> <li>Callback to move a selected image to the top of the history when reused. </li> </ol>"}, {"location": "sdk/developer/configuration/features/image-picker/#input-image", "title": "Input Image", "text": "<pre><code>InputImage {\n    id: String // (1)!\n    url: String // (2)!\n    ownerType: OwnerType // (3)!\n}\n</code></pre> <ol> <li>A unique string identifier assigned to the image by the Aiuta API, ensuring each image can be distinctly recognized and referenced within the system.</li> <li>The URL pointing to the location of the image resource, which can be accessed and retrieved by the SDK to present in the UI.</li> <li>The type of the image owner .</li> </ol> <p>Input images used in the Aiuta SDK for try-on sessions can either be uploaded by users, such as photos taken with their camera or selected from their gallery, or they can be predefined model images provided by Aiuta.</p>"}, {"location": "sdk/developer/configuration/features/image-picker/#owner-type", "title": "Owner Type", "text": "<pre><code>enum OwnerType {\n    user // (1)!\n    aiuta // (2)!\n}\n</code></pre> <ol> <li> <p>Image uploaded or generated by the user (using a camera or from a gallery).</p> <p>This image belongs to the user. When the user removes the image from the history, it may be deleted from the storage as well.</p> </li> <li> <p>Image of the model provided or generated by the Aiuta. </p> <p>This image could be linked to the user history, but it is not owned by the user, and can not be deleted from the storage, only unlinked from the user's history in case of removing.</p> </li> </ol> <p>Owner type primarily determines the source of origin of the image \u2014 whether it was generated by the user as a result of any chain of operations from upload to generation, possibly including re-generation. Alternatively, the image is not associated with the user's personal data and does not belong to them. This allows different approaches to be taken when deleting images from the history.</p>"}, {"location": "sdk/developer/configuration/features/image-picker/#sequence-diagrams_1", "title": "Sequence Diagrams", "text": "Deleting Images from the HistoryAdding/Viewing Images in the History <p>The sequence diagram of removing images from the user's history using custom data providers. <pre><code>sequenceDiagram\n    autonumber\n    actor USR as \u2800&lt;br&gt;User\n    participant APP as Your&lt;br&gt;App\n    participant BE as Your&lt;br&gt;Backend\n    participant SDK as Aiuta&lt;br&gt;SDK\n    participant API as Aiuta&lt;br&gt;Backend\n    participant GS as Storage\n    note over GS: Aiuta or Yours\n\n    USR-&gt;&gt;SDK: Select image(s) to delete\n    activate SDK\n\n    SDK--&gt;&gt;USR: Show activity indicator\n    SDK-&gt;&gt;APP: Call deleteUploadedImages / deleteGeneratedImages\n    activate APP\n    APP-&gt;&gt;BE: Delete images\n    activate BE\n\n    opt user owned images \n        alt Aiuta storage\n            BE-&gt;&gt;API: Delete images by ID\n            activate API\n            API-xGS: Delete files\n            API--&gt;&gt;BE: Deletion response\n            deactivate API\n        else your storage\n            BE-xGS: Delete files\n        end\n    end\n    BE-&gt;&gt;BE: Remove images from the user's records\n\n    BE--&gt;&gt;APP: Acknowledge deletion\n    deactivate BE\n\n    APP--&gt;&gt;SDK: Acknowledge deletion\n    SDK--&gt;&gt;USR: Hide activity indicator\n    APP--&gt;&gt;SDK: Update observable history lists\n    deactivate APP\n\n    SDK-&gt;&gt;SDK: Update history display\n    SDK--&gt;&gt;USR: Show updated history\n    deactivate SDK</code></pre></p> <p>Important: Owner Type Handling</p> <p>When deleting images from the history, the behavior depends on the <code>ownerType</code></p> <ul> <li><code>user</code> images can be deleted from storage and removed from history</li> <li><code>aiuta</code> images should only be unlinked from user history, not deleted from storage</li> </ul> <p>This ensures that shared model images remain available for other users while user-generated content can be properly cleaned up</p> <p>The sequence diagram of adding newly uploaded and generated images to the user's history using custom data providers. <pre><code>sequenceDiagram\n    autonumber\n    actor USR as \u2800&lt;br&gt;User\n    participant APP as Your&lt;br&gt;App\n    participant BE as Your&lt;br&gt;Backend\n    participant SDK as Aiuta&lt;br&gt;SDK\n    participant API as Aiuta&lt;br&gt;Backend\n    participant GS as Storage\n    note over GS: Aiuta or Yours\n\n    APP-&gt;&gt;SDK: Provide configuration with observable data providers\n    activate SDK\n    SDK--&gt;&gt;SDK: Subscribe to observable&lt;br&gt;history lists changes\n    deactivate SDK\n\n    Note over SDK,API: After successful try-on generation\n    activate SDK\n    SDK-&gt;&gt;APP: Call addUploadedImages / addGeneratedImages\n    APP-&gt;&gt;BE: Link new images&lt;br&gt;to the user's history\n    APP--&gt;&gt;SDK: Update observable data providers\n    SDK-&gt;&gt;SDK: Update local history display\n    deactivate SDK\n\n    USR-&gt;&gt;SDK: Tap History Button / Change photo\n    activate SDK\n    SDK--&gt;&gt;USR: Display History Data\n    Note over SDK,USR: Shows list of generated / uploaded&lt;br&gt;images with most recent first\n\n    opt cache not exitst/expired\n        SDK-&gt;&gt;GS: Get images by the URL\n        GS--&gt;&gt;SDK: Images data\n        SDK-&gt;&gt;SDK: Cache images\n        deactivate SDK\n    end</code></pre></p>"}, {"location": "sdk/developer/configuration/features/onboarding/", "title": "Onboarding Scheme", "text": "<p>Sets up  the onboarding process to guide users through the SDK's features and capabilities.</p> <p></p>"}, {"location": "sdk/developer/configuration/features/onboarding/#onboarding-feature", "title": "Onboarding Feature", "text": "<pre><code>OnboardingFeature {\n  howItWorksPage: OnboardingHowItWorksPageFeature // (1)!\n  bestResultsPage: OnboardingBestResultsPageFeature | null // (2)!\n\n  strings {\n    onboardingButtonNext: String // (3)!\n    onboardingButtonStart: String // (4)!\n  }\n\n  shapes {\n    onboardingImageL: Shape // (5)!\n    onboardingImageS: Shape // (6)!\n  }\n\n  dataProvider: BuiltIn | Custom {\n    isOnboardingCompleted: Observable&lt;Bool&gt; // (7)!\n    completeOnboarding: Callback() // (8)!\n  }\n}\n</code></pre> <ol> <li> Configures the first page of onboarding that demonstrates how virtual try-on works through interactive examples.</li> <li> Sets up an optional page showing examples of photos that yield the best try-on results.</li> <li>Defines the text label for the navigation button to proceed to the next onboarding page.</li> <li>Specifies the text label for the button that completes onboarding and starts the main interface.</li> <li>Controls the shape configuration for large images displayed in the onboarding process.</li> <li>Sets the shape configuration for small images used in the onboarding interface.</li> <li>Provides an observable property that tracks whether the user has completed the onboarding process.</li> <li>Defines the callback function to mark onboarding as completed when the user finishes the process.</li> </ol>"}, {"location": "sdk/developer/configuration/features/onboarding/#slides", "title": "Slides", "text": ""}, {"location": "sdk/developer/configuration/features/onboarding/#how-it-works", "title": "How It Works", "text": "<pre><code>OnboardingHowItWorksPageFeature {\n  images {\n    onboardingHowItWorksItems: List&lt;{ // (6)!\n      itemPhoto: Image // (1)!\n      itemPreview: Image // (2)!\n    }&gt;\n  }\n\n  strings {\n    onboardingHowItWorksPageTitle: String | null // (3)!\n    onboardingHowItWorksTitle: String // (4)!\n    onboardingHowItWorksDescription: String // (5)!\n  }\n}\n</code></pre> <ol> <li>Defines the example photo showing a person wearing the item for the try-on demonstration.</li> <li>Specifies the flatlay image of the item with a transparent background for the try-on preview.</li> <li>Sets an optional title for the \"How It Works\" page at the top of the screen.</li> <li>Defines the main title displayed below the interactive try-on demonstration section.</li> <li>Configures the descriptive text explaining how the virtual try-on feature works.</li> <li>List of exactly 3 objects, each containing images for the interactive onboarding.</li> </ol>"}, {"location": "sdk/developer/configuration/features/onboarding/#best-results", "title": "Best Results", "text": "<pre><code>OnboardingBestResultsPageFeature {\n  images {\n    onboardingBestResultsGood: List&lt;Image&gt; // (1)!\n    onboardingBestResultsBad: List&lt;Image&gt; // (2)!\n  }\n\n  icons {\n    onboardingBestResultsGood24: Icon // (3)!\n    onboardingBestResultsBad24: Icon // (4)!\n  }\n\n  strings {\n    onboardingBestResultsPageTitle: String | null // (5)!\n    onboardingBestResultsTitle: String // (6)!\n    onboardingBestResultsDescription: String // (7)!\n  }\n\n  styles {\n    reduceOnboardingBestResultsShadows: Bool // (8)!\n  }\n}\n</code></pre> <ol> <li>List of exactly 2 example photos that demonstrate optimal conditions for virtual try-on results.</li> <li>List of exactly 2 of example photos showing conditions that may lead to suboptimal try-on results.</li> <li>Icon displayed next to good example photos to indicate positive results.</li> <li>Icon displayed next to bad example photos to indicate potential issues.</li> <li>Optional title for the \"Best Results\" page at the top of the screen.</li> <li>Main title displayed above the example photos section.</li> <li>Descriptive text explaining what makes a good photo for virtual try-on.</li> <li>Controls whether to reduce shadow effects on example photos for better visibility. </li> </ol> <p>Deprecated</p> <p>Examples of good source photos are now included into the Image Picker, so we recommend disabling this slide to avoid overwhelming the user with onboarding</p>"}, {"location": "sdk/developer/configuration/features/share/", "title": "Share Scheme", "text": "<p>Enables sharing capabilities for generated try-on images with customizable options.</p>"}, {"location": "sdk/developer/configuration/features/share/#share-feature", "title": "Share Feature", "text": "<pre><code>ShareFeature {\n  watermark: ShareWatermarkFeature | null // (1)!\n\n  icons {\n    share24: Icon // (2)!\n  }\n\n  strings {\n    shareButton: String // (3)!\n  }\n\n  dataProvider: null | Custom {\n    getShareText: Callback(productIds: List&lt;String&gt;) =&gt; String // (4)!\n  }\n}\n</code></pre> <ol> <li> Optional configuration for adding a watermark to shared content.</li> <li>Icon displayed for the share button in the interface.</li> <li>Label text for the share button in the fullscreen gallery.</li> <li>Optional <code>dataProvider</code> callback function that generates additional text to be shared along with the image.</li> </ol>"}, {"location": "sdk/developer/configuration/features/share/#watermark", "title": "Watermark", "text": "<pre><code>ShareWatermarkFeature {\n  images {\n    logo: Image // (1)!\n  }\n}\n</code></pre> <ol> <li>Logo image to be used as a watermark on shared content. </li> </ol>"}, {"location": "sdk/developer/configuration/features/share/#sequence-diagram", "title": "Sequence Diagram", "text": "<pre><code>sequenceDiagram\n    autonumber\n    actor USR as \u2800&lt;br&gt;User\n    participant APP as Your&lt;br&gt;App\n    participant BE as Your&lt;br&gt;Backend\n    participant SDK as Aiuta&lt;br&gt;SDK\n    participant API as Aiuta&lt;br&gt;Backend\n    participant GS as Storage\n    note over GS: Aiuta or Yours\n\n    Note over SDK,API: After successful try-on generation\n\n    USR-&gt;&gt;SDK: Tap Share button\n    opt Watermark\n      SDK-&gt;&gt;SDK: Draw logo on the image(s)\n    end\n    SDK-&gt;&gt;APP: Call getShareText (product IDs)\n    APP--&gt;&gt;SDK: Return share text\n    SDK--&gt;&gt;USR: Show system share dialog\n    Note over SDK,USR: Generated image and optional text to share\n    USR-&gt;&gt;SDK: Complete sharing\n</code></pre>"}, {"location": "sdk/developer/configuration/features/try-on/", "title": "Try On Scheme", "text": "<p>Configures the core virtual try-on functionality for trying products virtually.</p> <p> </p>"}, {"location": "sdk/developer/configuration/features/try-on/#try-on-feature", "title": "Try On Feature", "text": "<pre><code>TryOnFeature {\n  tryOn {\n    loadingPage: TryOnLoadingPageFeature // (1)!\n    inputImageValidation: TryOnInputImageValidationFeature // (2)!\n    cart: TryOnCartFeature // (3)!\n    fitDisclaimer: TryOnFitDisclaimerFeature | null // (4)!\n    feedback: TryOnFeedbackFeature | null // (5)!\n    generationsHistory: TryOnGenerationsHistoryFeature | null // (6)!\n    otherPhoto: TryOnWithOtherPhotoFeature | null // (7)!\n\n    settings {\n      isBackgroundExecutionAllowed: Bool // (8)!\n      tryGeneratePersonSegmentation: Bool // (9)!\n    }\n\n    icons {\n      tryOn20: Icon // (10)!\n    }\n\n    strings {\n      tryOnPageTitle: String // (11)!\n      tryOn: String // (12)!\n    }\n\n    styles {\n      tryOnButtonGradient: List&lt;Color&gt; | null // (13)!\n    }\n  }\n}\n</code></pre> <ol> <li> Configuration for the loading page displayed during the TryOn process.</li> <li> Configuration for validating input images before processing.</li> <li> Configuration for cart-related functionality in the TryOn interface.</li> <li> Optional configuration for displaying fit disclaimers to users.</li> <li> Optional configuration for collecting user feedback on TryOn results.</li> <li> Optional configuration for managing the history of generated TryOn results.</li> <li> Optional configuration for allowing users to continue with a different photo.</li> <li>Determines whether the SDK should wait for the generation results in the background when closed.</li> <li>Enables local person segmentation highlighting during loading on iOS 15+.</li> <li>Icon displayed for the TryOn magic button in the interface.</li> <li>Title text displayed at the top of the TryOn page.</li> <li>Label text used for the \"Try On\" buttons throughout the interface.</li> <li>Optional gradient colors for styling the TryOn button.</li> </ol>"}, {"location": "sdk/developer/configuration/features/try-on/#sequence-diagram", "title": "Sequence diagram", "text": "<p>The sequence diagram of executing a virtual try-on operation.</p> <pre><code>sequenceDiagram\n    autonumber\n    actor USR as \u2800&lt;br&gt;User\n    participant APP as Your&lt;br&gt;App\n    participant BE as Your&lt;br&gt;Backend\n    participant SDK as Aiuta&lt;br&gt;SDK\n    participant API as Aiuta&lt;br&gt;Backend\n    participant GS as Storage\n    note over GS: Aiuta or Yours\n\n    USR-&gt;&gt;SDK: Pick a Photo / Tap Try-on button in the SDK UI\n    activate SDK\n\n    SDK-&gt;&gt;API: Create operation&lt;br&gt;(image ID, product ID)\n    activate API\n    Note over SDK,API: Secure authenticated request\n    API--&gt;&gt;SDK: Operation ID\n\n    par\n        API-&gt;&gt;API: Generate image\n        API-&gt;&gt;GS: Save generated image\n        deactivate API\n        Note over API,GS: Anonymous.&lt;br&gt;The photo is associated with the&lt;br&gt;app entry, not the user entry\n    and\n        loop internal configuration delay\n            SDK-&gt;&gt;API: Request operation status\n            API--&gt;&gt;SDK: Operation details\n            Note over API,SDK: status, generated_images | error\n            SDK--&gt;&gt;SDK: Check operation status\n            Note over SDK: Repeat while&lt;br&gt;CREATED | IN_PROGRESS | PAUSED\n\n        end\n    end\n\n    critical Check operation status\n        option SUCCESS\n            SDK-&gt;&gt;SDK: Add images to the history\n            SDK-&gt;&gt;GS: Get result image by the URL\n            activate GS\n            GS--&gt;&gt;SDK: Image data\n            deactivate GS\n            SDK--&gt;&gt;USR: Present results\n            Note over SDK,USR: User may interact with results\n\n        option ABORTED\n            rect\n                SDK--&gt;&gt;USR: Report couldn't detect anyone\n            end\n            Note over SDK,USR: User may select other photo and start over\n\n        option FAILED | CANCELLED\n            rect\n                SDK--&gt;&gt;USR: Show something went wrong error\n                deactivate SDK\n            end\n            Note over SDK,USR: User may try again to start over\n    end</code></pre>"}, {"location": "sdk/developer/configuration/features/try-on/#sub-features", "title": "Sub Features", "text": ""}, {"location": "sdk/developer/configuration/features/try-on/#loading-page", "title": "Loading Page", "text": "<pre><code>TryOnLoadingPageFeature {\n  strings {\n    tryOnLoadingStatusUploadingImage: String // (1)!\n    tryOnLoadingStatusScanningBody: String // (2)!\n    tryOnLoadingStatusGeneratingOutfit: String // (3)!\n  }\n\n  styles {\n    loadingStatusBackgroundGradient: List&lt;Color&gt; | null // (4)!\n    loadingStatusStyle: primary | blurred | blurredWithOutline // (5)!\n  }\n}\n</code></pre> <ol> <li>Text displayed while uploading the user's image to the server.</li> <li>Text displayed while scanning and analyzing the body in the image.</li> <li>Text displayed while generating the virtual try-on outfit.</li> <li>Optional gradient colors for the loading status background.</li> <li>Visual style for the loading status indicator, either primary (solid) or blurred (with optional outline).</li> </ol>"}, {"location": "sdk/developer/configuration/features/try-on/#input-image-validation", "title": "Input Image Validation", "text": "<pre><code>TryOnInputImageValidationFeature {\n  strings {\n    invalidInputImageDescription: String // (1)!\n    invalidInputImageChangePhotoButton: String // (2)!\n  }\n}\n</code></pre> <ol> <li>Message displayed to users when their uploaded image fails validation.</li> <li>Label text for the button that allows users to select a different photo.</li> </ol>"}, {"location": "sdk/developer/configuration/features/try-on/#cart", "title": "Cart", "text": "<pre><code>TryOnCartFeature {\n  strings {\n    addToCart: String // (1)!\n  }\n\n  handler {\n    addToCartAction: Callback(String) // (2)!\n  }\n}\n</code></pre> <ol> <li>Label text for the button that adds the current product to the cart.</li> <li>Callback function that handles adding a product to the cart using its identifier.</li> </ol>"}, {"location": "sdk/developer/configuration/features/try-on/#fit-disclaimer", "title": "Fit Disclaimer", "text": "<pre><code>TryOnFitDisclaimerFeature {\n  icons {\n    info20: Icon | null // (1)!\n  }\n\n  strings {\n    fitDisclaimerTitle: String // (2)!\n    fitDisclaimerDescription: String // (3)!\n    fitDisclaimerButtonClose: String // (4)!\n  }\n\n  typography {\n    disclaimer: TextStyle // (5)!\n  }\n}\n</code></pre> <ol> <li>Optional icon displayed in the fit disclaimer to provide visual context.</li> <li>Title text displayed in the fit disclaimer message.</li> <li>Detailed description text explaining the fit disclaimer information.</li> <li>Label text for the button that dismisses the fit disclaimer.</li> <li>Defines the text style for the fit diclaimer label text.</li> </ol>"}, {"location": "sdk/developer/configuration/features/try-on/#feedback", "title": "Feedback", "text": "<pre><code>TryOnFeedbackFeature {\n  otherFeedback: TryOnFeedbackOtherFeature | null // (1)!\n\n  icons {\n    like36: Icon // (2)!\n    dislike36: Icon // (3)!\n    gratitude40: Icon // (4)!\n  }\n\n  strings {\n    feedbackOptions: List&lt;String&gt; // (5)!\n    feedbackTitle: String // (6)!\n    feedbackButtonSkip: String // (7)!\n    feedbackButtonSend: String // (8)!\n    feedbackGratitudeText: String // (9)!\n  }\n}\n</code></pre> <ol> <li> Optional configuration for allowing users to provide custom feedback on try-on results.</li> <li>Icon displayed for the \"Like\" feedback option.</li> <li>Icon displayed for the \"Dislike\" feedback option.</li> <li>Icon shown after feedback is submitted to express gratitude.</li> <li>List of available feedback options presented to users.</li> <li>Title text displayed in the feedback section.</li> <li>Label text for the button that allows users to skip providing feedback.</li> <li>Label text for the button that submits the user's feedback.</li> <li>Message displayed to users after they submit their feedback.</li> </ol>"}, {"location": "sdk/developer/configuration/features/try-on/#other-feedback", "title": "Other Feedback", "text": "<pre><code>TryOnFeedbackOtherFeature {\n  strings {\n    otherFeedbackTitle: String // (1)!\n    otherFeedbackButtonSend: String // (2)!\n    otherFeedbackButtonCancel: String // (3)!\n    otherFeedbackOptionOther: String // (4)!\n  }\n}\n</code></pre> <ol> <li>Title text displayed in the custom feedback section.</li> <li>Label text for the button that submits the custom feedback.</li> <li>Label text for the button that cancels the custom feedback.</li> <li>Text label for the option to provide custom feedback.</li> </ol>"}, {"location": "sdk/developer/configuration/features/try-on/#other-photo", "title": "Other Photo", "text": "<pre><code>TryOnWithOtherPhotoFeature {\n  icons {\n    changePhoto24: Icon // (1)!\n  }\n}\n</code></pre> <ol> <li>Icon displayed for the \"Change Photo\" action, allowing users to continue with a different photo. </li> </ol>"}, {"location": "sdk/developer/configuration/features/try-on/#generations-history", "title": "Generations History", "text": "<pre><code>TryOnGenerationsHistoryFeature {\n  icons {\n    history24: Icon // (1)!\n  }\n\n  strings {\n    generationsHistoryPageTitle: String // (2)!\n  }\n\n  dataProvider: BuiltIn | Custom {\n    generatedImages: Observable&lt;List&lt;GeneratedImage&gt;&gt; // (3)!\n    addGeneratedImages: Callback(List&lt;GeneratedImage&gt;) // (4)!\n    deleteGeneratedImages: Callback(List&lt;GeneratedImage&gt;) // (5)!\n  }\n}\n</code></pre> <ol> <li>Icon displayed for the History button in the page bar.</li> <li>Title text displayed at the top of the generations history page.</li> <li>Observable collection of previously generated try-on images.</li> <li>Callback function to add new generated images to the history.</li> <li>Callback function to remove images from the generations history.</li> </ol>"}, {"location": "sdk/developer/configuration/features/try-on/#generated-image", "title": "Generated Image", "text": "<pre><code>GeneratedImage {\n    id: String // (1)!\n    url: String // (2)!\n    ownerType: OwnerType // (3)!\n    productIds: List&lt;String&gt; // (4)!\n}\n</code></pre> <ol> <li>A unique string identifier assigned to the image by the Aiuta API, ensuring each image can be distinctly recognized and referenced within the system.</li> <li>The URL pointing to the location of the image resource, which can be accessed and retrieved by the SDK to present in the UI.</li> <li>The type of the image owner .</li> <li>A list of product identifiers that were utilized during the image generation process. Each identifier corresponds to a specific product involved in the try-on session, allowing for precise tracking and reference within the system.</li> </ol> <p>Generated images represent the results of try-on sessions. These images are generated based on either a photo uploaded by the user or a predefined model image provided by Aiuta.</p>"}, {"location": "sdk/developer/configuration/features/try-on/#owner-type", "title": "Owner Type", "text": "<pre><code>enum OwnerType {\n    user // (1)!\n    aiuta // (2)!\n}\n</code></pre> <ol> <li> <p>Image uploaded or generated by the user (using a camera or from a gallery).</p> <p>This image belongs to the user. When the user removes the image from the history, it may be deleted from the storage as well.</p> </li> <li> <p>Image of the model provided or generated by the Aiuta. </p> <p>This image could be linked to the user history, but it is not owned by the user, and can not be deleted from the storage, only unlinked from the user's history in case of removing.</p> </li> </ol> <p>Owner type primarily determines the source of origin of the image \u2014 whether it was generated by the user as a result of any chain of operations from upload to generation, possibly including re-generation. Alternatively, the image is not associated with the user's personal data and does not belong to them. This allows different approaches to be taken when deleting images from the history.</p>"}, {"location": "sdk/developer/configuration/features/try-on/#sequence-diagrams", "title": "Sequence Diagrams", "text": "Deleting Images from the HistoryAdding/Viewing Images in the History <p>The sequence diagram of removing images from the user's history using custom data providers. <pre><code>sequenceDiagram\n    autonumber\n    actor USR as \u2800&lt;br&gt;User\n    participant APP as Your&lt;br&gt;App\n    participant BE as Your&lt;br&gt;Backend\n    participant SDK as Aiuta&lt;br&gt;SDK\n    participant API as Aiuta&lt;br&gt;Backend\n    participant GS as Storage\n    note over GS: Aiuta or Yours\n\n    USR-&gt;&gt;SDK: Select image(s) to delete\n    activate SDK\n\n    SDK--&gt;&gt;USR: Show activity indicator\n    SDK-&gt;&gt;APP: Call deleteUploadedImages / deleteGeneratedImages\n    activate APP\n    APP-&gt;&gt;BE: Delete images\n    activate BE\n\n    opt user owned images \n        alt Aiuta storage\n            BE-&gt;&gt;API: Delete images by ID\n            activate API\n            API-xGS: Delete files\n            API--&gt;&gt;BE: Deletion response\n            deactivate API\n        else your storage\n            BE-xGS: Delete files\n        end\n    end\n    BE-&gt;&gt;BE: Remove images from the user's records\n\n    BE--&gt;&gt;APP: Acknowledge deletion\n    deactivate BE\n\n    APP--&gt;&gt;SDK: Acknowledge deletion\n    SDK--&gt;&gt;USR: Hide activity indicator\n    APP--&gt;&gt;SDK: Update observable history lists\n    deactivate APP\n\n    SDK-&gt;&gt;SDK: Update history display\n    SDK--&gt;&gt;USR: Show updated history\n    deactivate SDK</code></pre></p> <p>Important: Owner Type Handling</p> <p>When deleting images from the history, the behavior depends on the <code>ownerType</code></p> <ul> <li><code>user</code> images can be deleted from storage and removed from history</li> <li><code>aiuta</code> images should only be unlinked from user history, not deleted from storage</li> </ul> <p>This ensures that shared model images remain available for other users while user-generated content can be properly cleaned up</p> <p>The sequence diagram of adding newly uploaded and generated images to the user's history using custom data providers. <pre><code>sequenceDiagram\n    autonumber\n    actor USR as \u2800&lt;br&gt;User\n    participant APP as Your&lt;br&gt;App\n    participant BE as Your&lt;br&gt;Backend\n    participant SDK as Aiuta&lt;br&gt;SDK\n    participant API as Aiuta&lt;br&gt;Backend\n    participant GS as Storage\n    note over GS: Aiuta or Yours\n\n    APP-&gt;&gt;SDK: Provide configuration with observable data providers\n    activate SDK\n    SDK--&gt;&gt;SDK: Subscribe to observable&lt;br&gt;history lists changes\n    deactivate SDK\n\n    Note over SDK,API: After successful try-on generation\n    activate SDK\n    SDK-&gt;&gt;APP: Call addUploadedImages / addGeneratedImages\n    APP-&gt;&gt;BE: Link new images&lt;br&gt;to the user's history\n    APP--&gt;&gt;SDK: Update observable data providers\n    SDK-&gt;&gt;SDK: Update local history display\n    deactivate SDK\n\n    USR-&gt;&gt;SDK: Tap History Button / Change photo\n    activate SDK\n    SDK--&gt;&gt;USR: Display History Data\n    Note over SDK,USR: Shows list of generated / uploaded&lt;br&gt;images with most recent first\n\n    opt cache not exitst/expired\n        SDK-&gt;&gt;GS: Get images by the URL\n        GS--&gt;&gt;SDK: Images data\n        SDK-&gt;&gt;SDK: Cache images\n        deactivate SDK\n    end</code></pre></p>"}, {"location": "sdk/developer/configuration/features/welcome-screen/", "title": "Welcome Screen Scheme", "text": "<p>Configures an optional  welcome screen that introduces users to the SDK's functionality.</p> <p></p>"}, {"location": "sdk/developer/configuration/features/welcome-screen/#welcome-screen-feature", "title": "Welcome Screen Feature", "text": "<pre><code>WelcomeScreenFeature {\n  images {\n    welcomeBackground: Image // (1)!\n  }\n\n  icons {\n    welcome82: Icon // (2)!\n  }\n\n  strings {\n    welcomeTitle: String // (3)!\n    welcomeDescription: String // (4)!\n    welcomeButtonStart: String // (5)!\n  }\n\n  typography {\n    welcomeTitle: TextStyle // (6)!\n    welcomeDescription: TextStyle // (7)!\n  }\n}\n</code></pre> <ol> <li>Sets the background image that covers the entire welcome screen.</li> <li>Defines the main icon displayed in the center of the welcome screen above the title.</li> <li>Specifies the main title text displayed on the welcome screen.</li> <li>Configures the descriptive text that appears below the title on the welcome screen.</li> <li>Sets the text label for the button that initiates the onboarding process or main interface.</li> <li>Controls the text style for the welcome screen's main title.</li> <li>Defines the text style for the welcome screen's description text. </li> </ol>"}, {"location": "sdk/developer/configuration/features/wishlist/", "title": "Wishlist Scheme", "text": "<p>Integrates with the host app's wishlist functionality for product management.</p>"}, {"location": "sdk/developer/configuration/features/wishlist/#wishlist-feature", "title": "Wishlist Feature", "text": "<pre><code>WishlistFeature {\n  icons {\n    wishlist24: Icon // (1)!\n    wishlistFill24: Icon // (2)!\n  }\n\n  strings {\n    wishlistButtonAdd: String // (3)!\n  }\n\n  dataProvider {\n    wishlistProductIds: Observable&lt;List&lt;String&gt;&gt; // (4)!\n    setProductInWishlist: Callback(productId: String, inWishlist: Bool) // (5)!\n  }\n}\n</code></pre> <ol> <li>Icon displayed for the Wishlist button in its default state.</li> <li>Icon displayed for the Wishlist button when the product is in the wishlist.</li> <li>Label text for the \"Add to Wishlist\" button.</li> <li>Observable collection of product IDs currently in the wishlist.</li> <li>Callback function to add or remove a product from the wishlist. </li> </ol>"}, {"location": "sdk/developer/configuration/features/wishlist/#sequence-diagram", "title": "Sequence Diagram", "text": "<pre><code>sequenceDiagram\n    autonumber\n    actor USR as \u2800&lt;br&gt;User\n    participant APP as Your&lt;br&gt;App\n    participant BE as Your&lt;br&gt;Backend\n    participant SDK as Aiuta&lt;br&gt;SDK\n    participant API as Aiuta&lt;br&gt;Backend\n    participant GS as Storage\n    note over GS: Aiuta or Yours\n\n    Note over SDK,API: After successful try-on generation\n\n    USR-&gt;&gt;SDK: Tap Wishlist button\n    SDK-&gt;&gt;APP: Toggle setProductInWishlist (product ID)\n    APP-&gt;&gt;BE: Update wishlist\n    APP--&gt;&gt;SDK: Update observable wishlistProductIds\n    SDK-&gt;&gt;SDK: Update wishlist button state\n</code></pre>"}, {"location": "sdk/developer/configuration/ui/", "title": "User Interface Scheme", "text": "<p>The User Interface Scheme defines the configuration options for the presentation style, swipe-to-dismiss policy, and theme settings of the SDK's UI components.</p>"}, {"location": "sdk/developer/configuration/ui/#user-interface", "title": "User Interface", "text": "<pre><code>UserInterface {\n  presentationStyle: PresentationStyle\n  swipeToDismiss: SwipeToDismissPolicy\n  theme: Theme // (1)!\n}\n</code></pre> <ol> <li> Specifies the theme configuration settings that determine the appearance and style of the UI components within the SDK. This includes defining color schemes, typography, and other visual elements to ensure a cohesive and customizable user interface experience.</li> </ol>"}, {"location": "sdk/developer/configuration/ui/#presentationstyle", "title": "PresentationStyle", "text": "<pre><code>enum PresentationStyle {\n  fullScreen // (1)!\n  bottomSheet // (2)!\n  pageSheet // (3)!\n}\n</code></pre> <ol> <li> <p>Presents the SDK in full-screen mode. This style occupies the entire screen, hiding the parent view completely.</p> </li> <li> <p>Opens the SDK in a bottom sheet. </p> <p>Partial iOS support</p> <p>This mode is supported on iOS from version <code>16</code> onwards. For older versions, it defaults to <code>pageSheet</code>. Unlike <code>pageSheet</code>, the parent view remains fullscreen but is covered by the sheet, rather than being stacked behind it.</p> </li> <li> <p>The SDK appears in a page sheet, which partially covers the parent view, allowing users to see some of the underlying content while interacting with the SDK. Unlike a <code>bottomSheet</code>, which keeps parent view fullscreen, a page sheet stacking the parent view behind, slightly shrinking and moving it away from the screen edges.</p> <ul> <li>This mode is recommended starting from iOS 13. For more information, refer to Best practices from Apple's HIG .</li> <li>On Android, this mode behaves as a <code>bottomSheet</code>.</li> </ul> </li> </ol> <p>iOS and Flutter only</p> <p>Specifies the manner in which the SDK's UI overlays the application's existing UI. This setting determines the visual presentation style, such as whether the SDK UI appears as a full-screen overlay, or covers the application with a bottom sheet.</p>"}, {"location": "sdk/developer/configuration/ui/#swipetodismisspolicy", "title": "SwipeToDismissPolicy", "text": "<pre><code>enum SwipeToDismissPolicy {\n  allowAlways // (1)!\n  allowHeaderSwipeOnly // (2)!\n  protectTheNecessaryPages // (3)!\n}\n</code></pre> <ol> <li> <p>Allows the SDK to be dismissed at any time by swiping down anywhere on the screen.</p> <p>This policy provides the most flexibility for users, enabling them to close the SDK from any page or context.    </p> </li> <li> <p>Restricts dismissal to swiping down on the header area only.</p> <p>This policy limits the swipe-to-dismiss gesture to the header area, reducing the likelihood of accidental dismissals.</p> </li> <li> <p>Applies different swipe-to-dismiss policies based on the page context.</p> <ul> <li>On pages that are safe to close, such as onboarding or photo picker pages, the <code>allowAlways</code> policy is applied, allowing dismissal from anywhere on the screen.</li> <li>On critical pages, such as those waiting for generation or displaying results, the <code>allowHeaderSwipeOnly</code> policy is applied to prevent accidental dismissals.</li> </ul> <p>This policy provides a balance between user convenience and protecting critical workflows, ensuring that users can dismiss the SDK when appropriate while safeguarding important pages.    </p> </li> </ol> <p>iOS only</p> <p>This property specifies the policy for dismissing the SDK's user interface through a swipe gesture. It determines how and when the swipe-to-dismiss action can be performed by the user. The policy can vary, allowing for different levels of interaction, such as always allowing a swipe to dismiss, restricting it to certain conditions, or permitting it only when swiping from specific areas of the interface.</p>"}, {"location": "sdk/developer/configuration/ui/theme/", "title": "Theme Scheme", "text": "<p>Specifies the theme configuration settings that determine the appearance and style of the UI components within the SDK. This includes defining color schemes, typography, and other visual elements to ensure a cohesive and customizable user interface experience.</p>"}, {"location": "sdk/developer/configuration/ui/theme/#theme", "title": "Theme", "text": "<pre><code>Theme {\n  color: ColorTheme // (1)!\n  label: LabelTheme // (2)!\n  image: ImageTheme // (3)!\n  button: ButtonTheme // (4)!\n  pageBar: PageBarTheme // (5)!\n  bottomSheet: BottomSheetTheme // (6)!\n  activityIndicator: ActivityIndicatorTheme // (11)!\n  selectionSnackbar: SelectionSnackbarTheme // (7)!\n  errorSnackbar: ErrorSnackbarTheme // (8)!\n  productBar: ProductBarTheme // (9)!\n  powerBar: PowerBarTheme // (10)!\n}\n</code></pre> <ol> <li> <p> Defines the color scheme, brand colors, and various color states for UI elements.</p> <p></p> </li> <li> <p> Typography and text styling for different label types across the interface.</p> <p></p> </li> <li> <p> Shapes, sizes, and error state icon for image views.</p> <p></p> </li> <li> <p> Buttons styles, including typography and shape configurations for different button sizes.</p> <p> </p> </li> <li> <p> Navigation bar appearance, including title styling and navigation button icons.</p> <p></p> </li> <li> <p> Bottom sheet presentation, including grabber appearance and sheet shape for both main SDK and internal sheets.</p> <p></p> </li> <li> <p> Multi-selection interface for list views, including selection controls and action buttons.</p> <p></p> </li> <li> <p> Error message presentation, including error icons and retry button styling.</p> <p></p> </li> <li> <p> Product information display, including typography for product details and optional price styling.</p> <p></p> </li> <li> <p> \"Powered By Aiuta\" branding element appearance.</p> <p></p> </li> <li> <p> Appearance and customization of loading indicators.</p> <p></p> </li> </ol>"}, {"location": "sdk/developer/configuration/ui/theme/activity-indicator/", "title": "Activity Indicator Scheme", "text": "<p>Appearance and customization of loading indicators.</p> <p></p>"}, {"location": "sdk/developer/configuration/ui/theme/activity-indicator/#activity-indicator", "title": "Activity Indicator", "text": "<pre><code>ActivityIndicatorTheme {\n  icons {\n    loading14: Icon | null // (1)!\n  }\n\n  colors {\n    overlay: Color // (4)!\n  }\n\n  settings {\n    indicationDelay: Number // (2)!\n    spinDuration: Number // (3)!\n  }\n}\n</code></pre> <ol> <li> <p>Optional icon for the activity indicator. If not provided, the system's default indicator will be used.</p> <p> <sup>System activity indicator by default</sup></p> </li> <li> <p>The time in milliseconds before the activity indicator appears. If the task completes before this delay, the indicator will not be shown. Otherwise, the indicator will appear.</p> </li> <li> <p>The duration in milliseconds for one complete rotation of the activity indicator. This setting controls how fast the indicator spins, providing a visual cue of activity progress.</p> <p>The spin duration only applies when a custom icon is used for the activity indicator. If the system's default indicator is used, this setting will be ignored and the indicator will spin with the system default speed.</p> </li> <li> <p>Overlay color used to cover any view when it needs to be locked for an activity. The activity indicator will be placed at the center of this overlay. </p> </li> </ol>"}, {"location": "sdk/developer/configuration/ui/theme/bottom-sheet/", "title": "Bottom Sheet Scheme", "text": "<p>Bottom sheet presentation, including grabber appearance and sheet shape for both main SDK and internal sheets.</p> <p></p>"}, {"location": "sdk/developer/configuration/ui/theme/bottom-sheet/#bottom-sheet", "title": "Bottom Sheet", "text": "<pre><code>BottomSheetTheme {\n  shapes {\n    bottomSheet: Shape // (1)!\n    chipsButton: Shape // (2)!\n  }\n\n  grabber {\n    width: Number // (3)!\n    height: Number // (4)!\n    topPadding: Number // (5)!\n  }\n\n  settings {\n    extendDelimitersToTheRight: Bool // (6)!\n    extendDelimitersToTheLeft: Bool // (7)!\n  }\n}\n</code></pre> <ol> <li>Sets the shape configuration for the bottom sheet container, controlling its visual appearance.</li> <li>Configures the shape for chips-style buttons, determining their visual style.</li> <li>Controls the width of the grabber handle used for dragging the bottom sheet.</li> <li>Determines the height of the grabber handle for bottom sheet interaction.</li> <li>Sets the vertical padding between the grabber and the top of the bottom sheet.</li> <li>Controls whether the bottom sheet delimiters extend to the right edge.</li> <li>Determines whether the bottom sheet delimiters extend to the left edge. </li> </ol>"}, {"location": "sdk/developer/configuration/ui/theme/button/", "title": "Button Scheme", "text": "<p>Buttons styles, including typography and shape configurations for different button sizes.</p> <p> </p>"}, {"location": "sdk/developer/configuration/ui/theme/button/#button", "title": "Button", "text": "<pre><code>ButtonTheme {\n  typography {\n    buttonM: TextStyle // (1)!\n    buttonS: TextStyle // (2)!\n  }\n\n  shapes {\n    buttonM: Shape // (3)!\n    buttonS: Shape // (4)!\n  }\n}\n</code></pre> <ol> <li>Defines the text style for a regular medium-sized buttons.</li> <li>Specifies the text style for small buttons.</li> <li>Sets the shape configuration for medium buttons.</li> <li>Configures the shape for small buttons. </li> </ol>"}, {"location": "sdk/developer/configuration/ui/theme/color/", "title": "Color Scheme", "text": "<p>Defines the color scheme, brand colors, and various color states for UI elements.</p> <p></p>"}, {"location": "sdk/developer/configuration/ui/theme/color/#color-theme", "title": "Color Theme", "text": "<pre><code>ColorTheme {\n  scheme: ColorScheme // (1)!\n\n  brand: Color // (2)!\n  primary: Color // (3)!\n  secondary: Color // (4)!\n\n  onDark: Color // (5)!\n  onLight: Color // (6)!\n\n  background: Color // (7)!\n  screen: Color // (8)!\n  neutral: Color // (9)!\n  border: Color // (10)!\n}\n</code></pre> <ol> <li> <p>Defines whether the SDK uses a light or dark theme.     Provided colors should match the scheme.</p> </li> <li> <p>Main accent color for primary actions and highlights throughout the interface.</p> <p></p> <p>Default ARGB  <code>#FF4000FF</code></p> </li> <li> <p>Primary color used for main content labels and icons, and important information.</p> <p></p> <p>Default ARGB  <code>#FF000000</code></p> </li> <li> <p>Secondary color used for supporting content and less prominent information.</p> <p></p> <p>Default ARGB  <code>#FF9F9F9F</code></p> </li> <li> <p>Preferably light color in any scheme optimized for use on dark, brand, and neutral backgrounds.</p> <p></p> <p>Default ARGB  <code>#FFFFFFFF</code></p> </li> <li> <p>Preferably dark color in any scheme optimized for use on light backgrounds.</p> <p></p> <p>Default ARGB  <code>#FF000000</code></p> </li> <li> <p>Main background color used throughout the SDK interface.</p> <p>Default ARGB  <code>#FFFFFFFF</code></p> </li> <li> <p>Zero-elevation background color.</p> <p>For the full-screen mode in the <code>dark</code> scheme, this color is used as a page background color, while bottom sheets inside the SDK will still use the <code>background</code> color. In any scheme, it will be used for full-screen image galleries.</p> <p>It's actually supposed to be black or close to black in any scheme.</p> <p>Default ARGB  <code>#FF000000</code></p> </li> <li> <p>Neutral background color used for various UI components.</p> <p>Default ARGB  <code>#FFF2F2F7</code></p> </li> <li> <p>Color used for component borders and dividers.</p> <p>Default ARGB  <code>#FFE5E5EA</code></p> </li> </ol>"}, {"location": "sdk/developer/configuration/ui/theme/color/#color-scheme_1", "title": "Color Scheme", "text": "<pre><code>enum ColorScheme {\n  light // (1)!\n  dark // (2)!\n}\n</code></pre> <ol> <li> <p>Light theme with predominantly light colors in the design.</p> </li> <li> <p>Dark theme with predominantly dark colors in the design. </p> </li> </ol> <p>Affects the style of blur components</p> <p>On <code>iOS only</code> it affects the appearance of system screens (e.g., photo gallery, share activity, etc.) and ensures that their <code>UIUserInterfaceStyle</code> matches the selected style. For example, if the SDK is set to a light theme but the system theme on the device is dark, the system windows invoked by the SDK will still use the light theme.</p>"}, {"location": "sdk/developer/configuration/ui/theme/error/", "title": "Error Snackbar Scheme", "text": "<p>Error message presentation, including error icons and retry button styling.</p> <p></p>"}, {"location": "sdk/developer/configuration/ui/theme/error/#error-snackbar", "title": "Error Snackbar", "text": "<pre><code>ErrorSnackbarTheme {\n  strings {\n    defaultErrorMessage: String // (1)!\n    tryAgainButton: String // (2)!\n  }\n\n  icons {\n    error36: Icon // (3)!\n  }\n\n  colors {\n    errorBackground: Color // (4)!\n    errorPrimary: Color // (5)!\n  }\n}\n</code></pre> <ol> <li>Defines the default text message displayed when an error occurs in the interface.</li> <li>Specifies the text label for the retry action button in the error snackbar.</li> <li>Sets the icon displayed to indicate the error state in the snackbar.</li> <li>Controls the background color of the error snackbar component.</li> <li>Defines the primary color used for error-related elements in the snackbar. </li> </ol>"}, {"location": "sdk/developer/configuration/ui/theme/image/", "title": "Image Scheme", "text": "<p>Shapes, sizes, and error state icon for image views.</p> <p></p>"}, {"location": "sdk/developer/configuration/ui/theme/image/#image", "title": "Image", "text": "<pre><code>ImageTheme {\n  shapes {\n    imageL: Shape // (1)!\n    imageS: Shape // (2)!\n  }\n\n  icons {\n    imageError36: Icon // (3)!\n  }\n}\n</code></pre> <ol> <li>Defines the shape configuration for large image views, allowing customization of the visual appearance for prominent images.</li> <li>Specifies the shape configuration for small image views, enabling consistent styling for secondary or thumbnail images.</li> <li>Sets the icon to be displayed when an image fails to load, providing visual feedback for error states. </li> </ol>"}, {"location": "sdk/developer/configuration/ui/theme/label/", "title": "Label Scheme", "text": "<p>Typography and text styling for different label types across the interface.</p> <p></p>"}, {"location": "sdk/developer/configuration/ui/theme/label/#label", "title": "Label", "text": "<pre><code>LabelTheme {\n  typography {\n    titleL: TextStyle // (1)!\n    titleM: TextStyle // (2)!\n    regular: TextStyle // (3)!\n    subtle: TextStyle // (4)!\n  }\n}\n</code></pre> <ol> <li>Defines the text style for large titles, typically used for main headings and prominent text elements.</li> <li>Specifies the text style for medium titles, commonly used for section headers and secondary headings.</li> <li>Sets the text style for regular body text and standard content throughout the interface.</li> <li>Determines the text style for subtle or less prominent text, often used for secondary information and supporting content. </li> </ol>"}, {"location": "sdk/developer/configuration/ui/theme/page-bar/", "title": "Page Bar Scheme", "text": "<p>Navigation bar appearance, including title styling and navigation button icons.</p> <p></p>"}, {"location": "sdk/developer/configuration/ui/theme/page-bar/#page-bar", "title": "Page Bar", "text": "<pre><code>PageBarTheme {\n  typography {\n    pageTitle: TextStyle // (1)!\n  }\n\n  icons {\n    back24: Icon // (2)!\n    close24: Icon // (3)!\n  }\n\n  settings {\n    preferCloseButtonOnTheRight: Bool // (4)!\n  }\n}\n</code></pre> <ol> <li>Defines the text style for page titles in the navigation bar, controlling the appearance of header text.</li> <li>Specifies the icon used for the back navigation button.</li> <li>Sets the icon for the close button.</li> <li> <p>Controls the position of the close button, determining whether it appears on the right side of the navigation bar.</p> Default \u00a0 <code>false</code><code>true</code> <p></p> <p> </p> </li> </ol>"}, {"location": "sdk/developer/configuration/ui/theme/powered-by/", "title": "Power Bar Scheme", "text": "<p>\"Powered By Aiuta\" branding element appearance.</p> <p></p>"}, {"location": "sdk/developer/configuration/ui/theme/powered-by/#power-bar", "title": "Power Bar", "text": "<pre><code>PowerBarTheme {\n  strings {\n    poweredByAiuta: String // (1)!\n  }\n}\n</code></pre> <ol> <li>Defines the text label for the \"Powered By Aiuta\" branding element in the interface.</li> </ol>"}, {"location": "sdk/developer/configuration/ui/theme/product-bar/", "title": "Product Bar Scheme", "text": "<p>Product information display, including typography for product details and optional price styling.</p> <p></p>"}, {"location": "sdk/developer/configuration/ui/theme/product-bar/#product-bar", "title": "Product Bar", "text": "<pre><code>ProductBarTheme {\n  prices: ProductBarPricesTheme | null // (1)!\n\n  typography {\n    product: TextStyle // (2)!\n    brand: TextStyle // (3)!\n  }\n\n  icons {\n    arrow16: Icon // (4)!\n  }\n\n  settings {\n    applyProductFirstImageExtraPadding: Bool // (5)!\n  }\n}\n</code></pre> <ol> <li>Configures the price display settings for the product bar, including typography and colors for price elements.</li> <li>Defines the text style for product names in the product bar.</li> <li>Specifies the text style for brand names displayed in the product bar.</li> <li>Sets the icon used to indicate expandable product details in the compact view.</li> <li>Controls whether additional padding is applied to the first product image in the list.</li> </ol> <p>Product <code>imageUrls</code> and <code>applyProductFirstImageExtraPadding</code></p> <p>The flat lay image without paddings should be the first in the list of <code>imageUrls</code> in the Product if <code>applyProductFirstImageExtraPadding</code> is set to <code>true</code></p>"}, {"location": "sdk/developer/configuration/ui/theme/product-bar/#prices", "title": "Prices", "text": "<pre><code>ProductBarPricesTheme {\n  typography {\n    price: TextStyle // (1)!\n  }\n\n  colors {\n    discountedPrice: Color // (2)!\n  }\n}\n</code></pre> <ol> <li>Configures the text style specifically for price displays in the product bar.</li> <li>Defines the color used to highlight discounted prices in the product bar. </li> </ol> <p>Data required</p> <p>This feature only needs to be configured if you pass <code>price</code> in the Product</p>"}, {"location": "sdk/developer/configuration/ui/theme/selection/", "title": "Selection Snackbar Scheme", "text": "<p>Multi-selection interface for list views, including selection controls and action buttons.</p> <p></p>"}, {"location": "sdk/developer/configuration/ui/theme/selection/#selection-snackbar", "title": "Selection Snackbar", "text": "<pre><code>SelectionSnackbarTheme {\n  strings {\n    select: String // (1)!\n    cancel: String // (2)!\n    selectAll: String // (3)!\n    unselectAll: String // (4)!\n  }\n\n  icons {\n    trash24: Icon // (5)!\n    check20: Icon // (6)!\n  }\n\n  colors {\n    selectionBackground: Color // (7)!\n  }\n}\n</code></pre> <ol> <li>Defines the text label for the select action button in the selection interface.</li> <li>Specifies the text label for the cancel action button to dismiss the selection mode.</li> <li>Sets the text label for the select all action to choose all available items.</li> <li>Configures the text label for the unselect all action to deselect all chosen items.</li> <li>Specifies the icon used for the delete action in the selection interface.</li> <li>Sets the icon displayed to indicate selected items in the interface.</li> <li>Controls the background color of the selection snackbar component. </li> </ol>"}, {"location": "sdk/flutter/", "title": "Flutter SDK", "text": "<p>The Aiuta Flutter SDK provides a virtual try-on solution as a plug-in package  that includes platform-specific implementation code and depends of native SDKs for Android and iOS that uses Aiuta Virtual Try On API.</p> <ul> <li> <p>  General SDK Overview</p> <p>Expolore UI Pages, Sequence diagrams, Resources and Analytics</p> </li> <li> <p> Common Developer Section</p> <p>Learn how to setup Authentification, Configure UI and manage Features</p> </li> </ul>"}, {"location": "sdk/flutter/#requirements", "title": "Requirements", "text": "<pre><code>sdk: &gt;=3.1.0 &lt;4.0.0\nflutter: &gt;= 3.19.6\n</code></pre> AndroidiOS <pre><code>minSdk: 23\ntargetSdk: 36\nndkVersion: 27.0.12077973\n\nkotlin: 2.2.10\n\ncom.android.application: 8.9.1\n</code></pre> <pre><code>iOS: 13+\nswift: 5.10\n</code></pre> <p>Can be compiled for iOS <code>12+</code>, but the SDK will not be available for use Check availability at runtime if the target platform is iOS 12.</p>"}, {"location": "sdk/flutter/#quick-start", "title": "Quick Start", "text": "<ol> <li>Installation</li> <li>Configuration</li> <li>Basic Usage</li> </ol>"}, {"location": "sdk/flutter/#package-and-sources", "title": "Package and Sources", "text": "<ul> <li> Pub.dev package </li> <li> Plugin sources </li> <li> Android layer sources </li> <li> iOS layer sources </li> </ul>"}, {"location": "sdk/flutter/basic-usage/", "title": "Basic Usage", "text": "<p>This guide covers the fundamental usage of the Aiuta Flutter SDK in your application.</p>"}, {"location": "sdk/flutter/basic-usage/#checking-availability", "title": "Checking Availability", "text": "<pre><code>import 'package:aiuta_flutter/aiuta_flutter.dart';\n\nfinal isAvailable = await Aiuta.isAvailable;\n</code></pre> When might the SDK be unavailable? <p>Since iOS SDK requires iOS 13.0 or later to operate, but can be compiled for iOS 12.0, this will always completes with false if the iOS version is lower than 13.0.</p> <p>On Android this future will most likely completes with true as it can not be compiled with unsupported toolchains.</p> <p>Other platforms will return false.</p> <p>Additional checks for availability are performed in the native code, and may be extended in the future.</p>"}, {"location": "sdk/flutter/basic-usage/#initialization", "title": "Initialization", "text": "<p>First, make sure you've configured the SDK as described in the Configuration guide.</p> <pre><code>import 'package:aiuta_flutter/aiuta_flutter.dart';\n\nfinal aiuta = Aiuta(\n  configuration: AiutaConfiguration(...) // (1)!\n);\n</code></pre> <ol> <li> <p>Your configuration for Aiuta</p> <p> Please refer to the configuration scheme</p> </li> </ol>"}, {"location": "sdk/flutter/basic-usage/#virtual-try-on", "title": "Virtual Try-On", "text": "<p>To start the virtual try-on flow for a product:</p> <pre><code>class ProductScreen extends StatelessWidget {\n  final Aiuta aiuta;\n\n  Future&lt;void&gt; startTryOn() async {\n    try {\n      await aiuta.startTryonFlow(\n        product: AiutaProduct(...) // (1)!\n      );\n    } catch (e) {\n      // Handle errors\n    }\n  }\n\n  // ... rest of your widget\n}\n</code></pre> <ol> <li> <p>Your product info for Aiuta</p> <p>Please refer to the product scheme</p> </li> </ol> When does startTryonFlow Future completes? <p>The <code>startTryonFlow</code> Future completes when:</p> <ol> <li>The plugin has successfully connected to the native layer</li> <li>All parameters have been passed to the native layer</li> <li>The native layer has been configured and accepted the parameters</li> <li>The SDK UI has been displayed to the user</li> </ol> <p>This means the Future completes once the SDK UI is visible, not when the user completes or dismisses the try-on flow. To handle user completion, you should implement appropriate analytics listeners.</p> <p>Similarly, the <code>startHistoryFlow</code> method follows the same completion pattern - it completes when the history UI is displayed, not when the user finishes interacting with it.</p> What errors may occur and require handling? <p>The SDK may throw errors that generally indicate something completely wrong:</p> <ol> <li>The Flutter plugin cannot connect to the native SDK due to technical issues.</li> <li>The native SDK cannot parse the configuration or parameters sent from the plugin.</li> <li>The method is called on an unsupported platform without checking <code>isAvailable</code> first.</li> <li>The native SDK cannot find a valid UI context to display itself.</li> </ol> <p>These errors typically represent SDK issues rather than runtime conditions:</p> <ul> <li>They should never occur</li> <li>They cannot be fixed at runtime</li> <li>Retrying the operation is unlikely to succeed</li> <li>The best approach is to log and report them as bugs</li> </ul>"}, {"location": "sdk/flutter/basic-usage/#viewing-try-on-history", "title": "Viewing Try-On History", "text": "<p>To show the user's try-on history:</p> <pre><code>try {\n  await aiuta.startHistoryFlow();\n} catch (e) {\n  // Handle errors\n}\n</code></pre>"}, {"location": "sdk/flutter/basic-usage/#checking-state", "title": "Checking State", "text": "<p>You can check at any time whether the SDK UI is currently displayed:</p> <pre><code>final isDisplayed = await Aiuta.isForeground;\n</code></pre>"}, {"location": "sdk/flutter/basic-usage/#next-step", "title": "Next Step", "text": "<ul> <li> Try with test products</li> </ul>"}, {"location": "sdk/flutter/configuration/", "title": "Configuration Guide", "text": "<p>The Aiuta Flutter SDK is highly configurable to meet your specific needs.</p>"}, {"location": "sdk/flutter/configuration/#custom-configuration", "title": "Custom Configuration", "text": "<p>The SDK is configured using the <code>AiutaConfiguration</code> class, which contains several key components:</p> <pre><code>import 'package:aiuta_flutter/aiuta_flutter.dart';\n\nfinal configuration = AiutaConfiguration( // (1)!\n  auth: AiutaAuth(...), // (2)!\n  userInterface: AiutaUserInterfaceConfiguration(...), // (3)!\n  features: AiutaFeatures(...), // (4)!\n  analytics: AiutaAnalytics(...) | null, // (5)!\n  debugSettings: AiutaDebugSettings(...) // (6)!\n);\n\nfinal aiuta = Aiuta(configuration: configuration);\n</code></pre> <ol> <li>The main configuration class that initializes all SDK components. All required parameters must be provided, while analytics is optional</li> <li>Required: Handles API authentication and token management</li> <li>Required: Controls SDK presentation and visual appearance</li> <li>Required: Manages SDK features and their interactions</li> <li>Optional: Tracks SDK events and user interactions</li> <li>Required: Controls logging and validation behavior</li> </ol>"}, {"location": "sdk/flutter/configuration/#configuration-scheme", "title": "Configuration Scheme", "text": "<p>The Aiuta SDK for Flutter employs a standardized configuration scheme consistent with our other SDKs. Just as the primary <code>AiutaConfiguration</code> and its associated property class names have been modified to adhere to the naming conventions, all other internal classes will be updated similarly.</p> <p>Please refer to the configuration scheme</p>"}, {"location": "sdk/flutter/configuration/#next-step", "title": "Next Step", "text": "<ul> <li> Learn how to initialize and use the SDK</li> <li> Try with test configuration</li> </ul>"}, {"location": "sdk/flutter/installation/", "title": "Installation", "text": "<p>Use Aiuta Flutter SDK package  as a library to integrate into your application.</p>"}, {"location": "sdk/flutter/installation/#depend-on-it", "title": "Depend on it", "text": "<p>Run this command with Flutter:</p> <pre><code> $ flutter pub add aiuta_flutter\n</code></pre> <p>This will add a line like this to your package's <code>pubspec.yaml</code> (and run an implicit <code>flutter pub get</code>):</p> <pre><code>dependencies:\n  aiuta_flutter: ^4.2.1\n</code></pre> <p>Alternatively, your editor might support <code>flutter pub get</code>.Check the docs for your editor to learn more.</p>"}, {"location": "sdk/flutter/installation/#import-it", "title": "Import it", "text": "<p>Now in your Dart code, you can use:</p> <pre><code>import 'package:aiuta_flutter/aiuta_flutter.dart';\n</code></pre>"}, {"location": "sdk/flutter/installation/#next-step", "title": "Next Step", "text": "<ul> <li> Quick Test SDK Propely Integrated</li> <li> \u00a0 Initialize with Configuration</li> </ul>"}, {"location": "sdk/flutter/quick-test/", "title": "Quick Test", "text": "<p>This guide describes how to test the Aiuta SDK in your Flutter application after installation. It includes steps for setting up the configuration with a demo API key and using example products to start the TryOn.</p> <pre><code>import 'package:aiuta_flutter/aiuta_flutter.dart';\nimport 'package:aiuta_flutter/configuration/aiuta_configuration.dart';\nimport 'package:aiuta_flutter/configuration/analytics/aiuta_analytics.dart';\nimport 'package:aiuta_flutter/configuration/analytics/aiuta_analytics_handler.dart';\nimport 'package:aiuta_flutter/configuration/auth/aiuta_auth.dart';\nimport 'package:aiuta_flutter/configuration/features/try_on/cart/aiuta_try_on_cart_handler.dart';\nimport 'package:aiuta_flutter/models/product/aiuta_product.dart';\n</code></pre>"}, {"location": "sdk/flutter/quick-test/#init", "title": "Init", "text": "<p>For quick test purposes you can use demo <code>apiKey</code> auth</p> <pre><code>final aiuta = Aiuta(\n  configuration: AiutaConfiguration.builtIn(\n    auth: AiutaApiKeyAuth(apiKey: \"AIUTADEMO\"),\n    termsOfServiceUrl: \"https://aiuta.com/legal/terms-of-service.html\",\n    cartHandler: AiutaTryOnCartHandler(\n      addToCart: (productId) {\n        debugPrint(\"Add product id ${productId} to cart\");\n      },\n    ),\n    analytics: AiutaAnalytics(\n      handler: AiutaAnalyticsHandler(\n        onAnalyticsEvent: (event) {\n          debugPrint(\"$event: ${event.toJson()}\");\n        },\n      ),\n    ),\n  ),\n);\n</code></pre>"}, {"location": "sdk/flutter/quick-test/#start-tryon", "title": "Start TryOn", "text": "<p>You can use one of the following product examples that will work with the demo <code>apiKey</code></p> Product 1Product 2Product 3Product 4Product 5Product 6Product 7 <pre><code>aiuta.startTryonFlow(\n  product: AiutaProduct(\n    id: \"A155850CHBI9XXAM\",\n    title: \"Diesel T-Adjust Q8 Maglietta T-Shirt\",\n    brand: \"Sample Brand\",\n    imageUrls: [\n      \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-71f91730-50e3-4be0-8fc0-40e6461638ed.jpeg\",\n      \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-19ca29d4-81e1-4fdb-8c1f-893e60b447ce.jpeg\",\n      \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-b09df9e8-f2d7-4455-916d-9aa77855468b.jpeg\",\n      \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-f51ad642-aadf-441b-a441-60b93eb49924.jpeg\"\n    ],\n  ),\n);\n</code></pre> <p> </p> <pre><code>aiuta.startTryonFlow(\n  product: AiutaProduct(\n    id: \"A113020HGAM\",\n    title: \"T-Boggy-Megoval-D, T-shirt with maxi oval D embroidery\",\n    brand: \"Sample Brand\",\n    imageUrls: [\n      \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-c31c20b5-65a8-47fb-8eae-513dfc8d532d.jpeg\",\n      \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-1e909cd5-98dc-4797-b973-c2b6a7b488d6.jpeg\",\n      \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-6bbc2ab6-f043-4593-a0d5-0c8ce5704a70.jpeg\",\n      \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-a5cbd3bc-9fef-4e1a-9de9-a92aaa089d06.jpeg\"\n    ],\n  ),\n);\n</code></pre> <p> </p> <pre><code>aiuta.startTryonFlow(\n  product: AiutaProduct(\n    id: \"CUMU0213A5UTC543WDB62\",\n    title: \"Blue poplin bowling shirt with Wolves, Ravens and Doves print\",\n    brand: \"Sample Brand\",\n    imageUrls: [\n      \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-adfbbf56-49ee-48ea-8502-130a3fa2b44d.jpeg\",\n      \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-27bbf083-76aa-413e-b193-a598de4e609d.jpeg\",\n      \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-479125ac-345a-4d84-9498-2e3f7269e5bd.jpeg\",\n      \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-20277c58-5c93-47b2-a09b-5f2c5eb594b3.jpeg\",\n      \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-d2cfb4f4-6197-4cbe-8f97-27951258f717.jpeg\"\n    ],\n  ),\n);\n</code></pre> <p> </p> <pre><code>aiuta.startTryonFlow(\n  product: AiutaProduct(\n    id: \"CUJU0061A2USCV35MMN99\",\n    title: \"Black marble denim oversized shirt\",\n    brand: \"Sample Brand\",\n    imageUrls: [\n      \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-dc9b4ecf-fe5e-44f1-aab1-1fbf302417c8.jpeg\",\n      \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-74f8f923-f972-4df0-9623-fea4b408a215.jpeg\",\n      \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-bbd93821-2cde-4b16-919c-e6dfbe299809.jpeg\",\n      \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-7de4f5e5-a25d-4717-950c-d3ca57d18fae.jpeg\"\n    ],\n  ),\n);\n</code></pre> <p> </p> <pre><code>aiuta.startTryonFlow(\n  product: AiutaProduct(\n    id: \"POMG0072Q2UFH546ARW06\",\n    title: \"Long sleeved ivory polo shirt with intarsia Argyle detail\",\n    brand: \"Sample Brand\",\n    imageUrls: [\n      \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-c0b2aad9-fb9a-4f2a-b14a-39da25f54414.jpeg\",\n      \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-0a2ad54f-ad50-4060-b0bc-61d9d5b55cd8.jpeg\",\n      \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-94be633a-1e8d-42ad-92dc-94fe1056187c.jpeg\",\n      \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-bfb3638a-7d11-47a5-80b8-53eb8f2abe10.jpeg\"\n    ],\n  ),\n);\n</code></pre> <p> </p> <pre><code>aiuta.startTryonFlow(\n  product: AiutaProduct(\n    id: \"ABMA1361U0TW83900N60\",\n    title: \"Short grey wool dress with Marni Symbol\",\n    brand: \"Sample Brand\",\n    imageUrls: [\n      \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-b792c3ea-23ca-445d-8d27-9336bd2ca3cf.jpeg\",\n      \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-d53e585b-d1b9-479a-96be-eff9607faf6b.jpeg\",\n      \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-945ede81-29eb-4e3a-ac35-f9bacd13bd6f.jpeg\",\n      \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-8066087f-66c5-44e6-8eac-5ae7bf29bf77.jpeg\",\n      \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-fb6515ee-3278-487b-ab6b-57395c364f6e.jpeg\"\n    ],\n  ),\n);\n</code></pre> <p> </p> <pre><code>aiuta.startTryonFlow(\n  product: AiutaProduct(\n    id: \"GOMA0459S3UTP749WR00N99\",\n    title: \"Black taffeta wide skirt with Marni Symbol\",\n    brand: \"Sample Brand\",\n    imageUrls: [\n      \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-417b6e3d-9b3c-4d2d-aa2e-49d1c9223c1c.jpeg\",\n      \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-1302ebbc-8352-43bf-824f-cbe21f910689.jpeg\",\n      \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-545f9788-f961-4711-bb98-024c9b413f4e.jpeg\",\n      \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-cce0130e-f437-47d7-a867-26087fa18859.jpeg\"\n    ],\n  ),\n);\n</code></pre> <p> </p>"}, {"location": "sdk/flutter/quick-test/#show-history", "title": "Show History", "text": "<pre><code>aiuta.startHistoryFlow();\n</code></pre>"}, {"location": "sdk/flutter/quick-test/#next-step", "title": "Next Step", "text": "<ul> <li> Create your custom Configuration</li> </ul>"}, {"location": "sdk/flutter/migration/v4/", "title": "Migration to the SDK version 4", "text": "<p>This document provides an overview of the changes introduced in SDK version 4. It includes:</p> <ul> <li>updates in the management of user data \u2014 completion states, consents, and historical records;</li> <li>image ownership and changes the backend processes for deleting images upon user requests, which now take into account the ownership of the images;</li> <li>the general changes made to the configuration and features.</li> </ul> Why does version 4 come after version 1? <p>The Aiuta Flutter SDK has transitioned directly from version 1 to version 4, skipping versions 2 and 3. This decision aligns with our new policy to ensure that all mobile platforms \u2014 Android, iOS, and Flutter \u2014 are delivered simultaneously with the same functionality and based on a unified scheme. By synchronizing the version numbers across all platforms, we aim to provide a consistent and cohesive experience for developers working with our SDKs. The choice of version 4 as the next release was determined by the least common version number across Android, iOS, and Flutter, ensuring that all platforms are now aligned under the same versioning system. This unified approach simplifies the development process and ensures feature parity across different mobile environments.</p>"}, {"location": "sdk/flutter/migration/v4/#latest-publlished-version", "title": "Latest publlished version", "text": "<pre><code>4.2.1\n</code></pre>"}, {"location": "sdk/flutter/migration/v4/#platform-build-requirements", "title": "Platform &amp; Build Requirements", "text": "<ul> <li> <p> Android</p> <pre><code>minSdk: 23\ntargetSdk: 36\nndkVersion: 27.0.12077973\n\nkotlin: 2.2.10\n\ncom.android.application: 8.9.1\n</code></pre> </li> <li> <p> iOS</p> <pre><code>iOS: 12+\nswift: 5.10\nXcode: 15.3+\n</code></pre> </li> </ul>"}, {"location": "sdk/flutter/migration/v4/#configuration", "title": "Configuration", "text": "<p>SDK v4 introduces a new, unified way to configure the SDK using the AiutaConfiguration class. This approach provides a more flexible and modular configuration scheme for features and UI customization.</p> <p>Please see</p> <ul> <li>New common Configuration Scheme</li> <li>How to apply this scheme in Flutter</li> </ul>"}, {"location": "sdk/flutter/migration/v4/#data-management", "title": "Data management", "text": ""}, {"location": "sdk/flutter/migration/v4/#onboarding-completion-state", "title": "Onboarding completion state", "text": "<p>In this version, onboarding and the consent pages are not so tightly coupled. There are several configuration options when the SDK cannot determine whether to not show onboarding again based on the consent status only. Therefore, a <code>dataProvider</code> has been added to manage the onboarding state.</p> <p>Learn how it works and how to implement it:</p> <ul> <li>Onboarding page Data Management</li> <li><code>OnboardingFeature</code> scheme </li> </ul> How to determine this status for current users? <p>For existing users, you can set <code>isOnboardingCompleted</code> based on whether main <code>consent</code> was previously obtained, as consent was a mandatory final slide of the onboarding process in the first version.</p>"}, {"location": "sdk/flutter/migration/v4/#user-consents", "title": "User consents", "text": "<p>This version significantly expands the possibilities of how, when, and what to ask the user for consent. This required adding data models for consents and operating them with identifiers.</p> <p>For full context, see</p> <ul> <li><code>Consent</code> model sheme</li> <li>One of <code>Standalone</code> consent configuration and its <code>dataProviders</code></li> <li>Standalone consent page Data Management explaining how does the SDK decide when to request consent</li> </ul> How to map existing data? <p>If you did not have internal identifiers for consents and only stored the status, create one, for example, <code>main</code> and provide it in the list of received consents for the SDK depending on the state flag you stored earlier.</p> <p>If you already have internal identifiers, simply provide them to the SDK.</p>"}, {"location": "sdk/flutter/migration/v4/#users-history-images", "title": "Users' History Images", "text": "<p>Image data models have two key updates:</p> <ul> <li>Uploaded images and generated images are now distinguished by class - generated images must store their associated product IDs.</li> <li> <p>Both data models now have an owner type - this is to distinguish users' personal images from model images provided by Aiuta.</p> Do not delete <code>aiuta</code> owned image files <p>You should only link/unlink those images in the user's history.</p> </li> </ul> <p>To understand this change, see input image and generated image schemes and its <code>OwnerType</code>s</p> How to determine product identifiers for old images? <p>If you have not previously saved the connections between products and generated images, this data cannot be restored. But don't worry, just pass an empty list to the SDK, and this will only result in the absence of accompanying text/links when the user wants to share a previously generated image.</p>"}, {"location": "sdk/flutter/migration/v4/#resources", "title": "Resources", "text": "<p>Resources are now grouped by topic and feature. We have tried to keep the names the same, but in some cases localization and a few isolated instances have been renamed to better reflect their meaning.</p> <p>Built-in resources</p> <p>Please note that the image picker resources have been changed and best results slide images are no longer included in the standard set as this slide was deprecated.</p> <ul> <li>Icons</li> <li>Images</li> <li>Colors</li> <li>Shapes</li> <li>Typography</li> <li>Localization</li> </ul>"}, {"location": "sdk/flutter/migration/v4/#analytics", "title": "Analytics", "text": "<p>Analytics has been expanded and supplemented. Types have been simplified. </p> <p>Please refer to the complete list of analytics events</p>"}, {"location": "sdk/ios/", "title": "iOS SDK", "text": "<p>The Aiuta iOS SDK provides a virtual try-on solution as a native implementation built with <code>UIKit</code> and using the Aiuta Virtual Try On API.</p> <ul> <li> <p>  General SDK Overview</p> <p>Expolore UI Pages, Sequence diagrams, Resources and Analytics</p> </li> <li> <p> Common Developer Section</p> <p>Learn how to setup Authentification, Configure UI and manage Features</p> </li> </ul>"}, {"location": "sdk/ios/#requirements", "title": "Requirements", "text": "<pre><code>iOS: 13+\nswift: 5.10\n</code></pre>"}, {"location": "sdk/ios/#quick-start", "title": "Quick Start", "text": "<ol> <li>Installation</li> <li>Configuration</li> <li>Basic Usage</li> </ol>"}, {"location": "sdk/ios/#sources-and-demo", "title": "Sources and Demo", "text": "<ul> <li> iOS SDK Sources </li> <li> Demo Application</li> </ul>"}, {"location": "sdk/ios/basic-usage/", "title": "Basic Usage", "text": "<p>This guide covers the fundamental usage of the Aiuta iOS SDK in your application.</p> <pre><code>import AiutaSDK\n</code></pre>"}, {"location": "sdk/ios/basic-usage/#setup", "title": "Setup", "text": "<p>First, make sure you've configured the SDK as described in the Configuration guide.</p> <pre><code>await Aiuta.setup(configuration: Aiuta.Configuration) // (1)!\n</code></pre> <ol> <li> <p>Your configuration for Aiuta</p> <p>Please refer to the Configuration guide.</p> </li> </ol>"}, {"location": "sdk/ios/basic-usage/#virtual-try-on", "title": "Virtual Try-On", "text": "<p>To start the virtual try-on flow for a product:</p> <pre><code>await Aiuta.tryOn(product: Aiuta.Product) // (1)!\n</code></pre> <ol> <li> <p>Your product info for Aiuta</p> <p>Please refer to the product scheme</p> </li> </ol>"}, {"location": "sdk/ios/basic-usage/#generation-history", "title": "Generation History", "text": "<p>To show the user's try-on history:</p> <pre><code>await Aiuta.showHistory()\n</code></pre>"}, {"location": "sdk/ios/basic-usage/#current-state", "title": "Current State", "text": "<p>You can check at any time whether the SDK UI is currently displayed:</p> <pre><code>let isDisplayed = await Aiuta.isForeground\n</code></pre>"}, {"location": "sdk/ios/basic-usage/#next-step", "title": "Next Step", "text": "<ul> <li> Try with test products</li> </ul>"}, {"location": "sdk/ios/configuration/", "title": "Configuration Guide", "text": "<p>The Aiuta iOS SDK is highly configurable to meet your specific needs.</p>"}, {"location": "sdk/ios/configuration/#setting-up", "title": "Setting Up", "text": "<pre><code>await Aiuta.setup(configuration: Aiuta.Configuration)\n</code></pre> <p><code>Aiuta.Configuration</code> is an <code>enum</code> representing the configuration options for the Aiuta SDK. It contains several configuration presets that you can select depending on how detailed you want to customize the appearance and behavior of the SDK.</p> Default ConfigurationsCustom Configuration <p>These presets contain the default appearance, feature set, and behavior.</p> <pre><code>.debug(auth: Aiuta.Auth) // (1)!\n</code></pre> <ol> <li> <p>A default configuration for development and testing.</p> <p>This configuration is optimized for debug builds and includes all recommended features and settings for development purposes. It performs validation checks on the <code>Info.plist</code> file and triggers a <code>fatalError()</code> if any required keys are missing. This ensures that issues are caught early during development.</p> <ul> <li> auth required to authenticate Aiuta SDK to use API with your credentials. Supported authentication methods are <code>ApiKey</code> or <code>Jwt</code> + <code>subscriptionId</code>.</li> </ul> </li> </ol> <pre><code>.release(auth: Aiuta.Auth) // (1)!\n</code></pre> <ol> <li> <p>A default configuration for production use.</p> <p>This configuration is optimized for release builds and includes all recommended features and settings for production environments. It skips all validation checks to prioritize stability and performance. Use this configuration when deploying the application to end users.</p> <ul> <li> auth required to authenticate Aiuta SDK to use API with your credentials. Supported authentication methods are <code>ApiKey</code> or <code>Jwt</code> + <code>subscriptionId</code>.</li> </ul> </li> </ol> <pre><code>.custom(auth: Aiuta.Auth, // (1)!\n    userInterface: UserInterface = .default, // (2)!\n    features: Features = .default, // (3)!\n    analytics: Aiuta.Analytics = .none, // (4)!\n    debugSettings: DebugSettings = .release) // (5)!\n</code></pre> <ol> <li> <p>A fully customizable configuration for the SDK.</p> <p>This configuration allows developers to customize every aspect of the SDK, including authentication, user interface, features, analytics, and debug settings. Use this option to tailor the SDK to specific application requirements.</p> <ul> <li> auth required to authenticate Aiuta SDK to use API with your credentials. Supported authentication methods are <code>ApiKey</code> or <code>Jwt</code> + <code>subscriptionId</code>.</li> </ul> </li> <li> <p> userInterface configuration of the presentation style, swipe-to-dismiss policy, and UI components themes for the Aiuta SDK.</p> </li> <li> <p>Describes the set of  features  enabled in the SDK for the user and thier interaction with the app.</p> </li> <li> <p>Allows to receive  analytics events from the SDK and send them to your analytics provider.</p> </li> <li> <p> debugSettings controls the logging settings and validation policies for various parameters.</p> </li> </ol> <p>The Aiuta SDK for iOS employs a standardized configuration scheme for <code>custom</code> case consistent with our other SDKs. Just as the <code>Aiuta.Configuration</code> and its custom associated values have been modified to adhere to the naming conventions, all other nested cases will be conformed similarly.</p> <p>Please refer to the configuration scheme</p> <p>Example compliance with User Interface Scheme</p> <pre><code>enum Aiuta.Configuration.UserInterface {\n\n    case `default`\n\n    case custom(theme: Theme = .aiuta(scheme: .light),\n                presentationStyle: PresentationStyle = .pageSheet,\n                swipeToDismissPolicy: SwipeToDismissPolicy = .protectTheNecessaryPages)\n}\n</code></pre>"}, {"location": "sdk/ios/configuration/#next-step", "title": "Next Step", "text": "<ul> <li> Learn how to initialize and use the SDK</li> <li> Try with test configuration</li> </ul>"}, {"location": "sdk/ios/installation/", "title": "Installation", "text": "<p>Integrate Aiuta iOS SDK  into your application.</p>"}, {"location": "sdk/ios/installation/#depend-on-it", "title": "Depend on it", "text": "Swift Package ManagerCocoaPods <p>SwiftPM  distribution of the Aiuta iOS SDK supports minimum deployment <code>iOS 13</code></p> Need a lower minimum deployment? <p>If you need support of minimum deployment <code>iOS 12</code>, you are probably using some kind of cross-platform solution. In this case, please take a look at CocoaPods distribution, and also note that Aiuta provides a plugin-wrapper for Flutter. You can also use the Kotlin MultiPlatform version of the Android SDK.</p> Xcode<code>Package.swift</code> <ul> <li>File &gt; Add Package Dependencies...</li> <li>Enter Package URL: <pre><code>https://github.com/aiuta-com/aiuta-ios-sdk.git\n</code></pre></li> <li>Select Dependency Rule <code>Up to Next Major</code> with <code>4.2.3</code></li> <li>Add Package to your project</li> </ul> <p></p> <p>Add AiutaSdk <code>package</code> to the <code>dependencies</code> value of your <code>package</code></p> <pre><code>.package(url: \"https://github.com/aiuta-com/aiuta-ios-sdk.git\", from: \"4.2.3\")\n</code></pre> <p>Add AiutaSdk <code>product</code> to the <code>dependencies</code> value of your <code>target</code></p> <pre><code>.product(name: \"AiutaSdk\", package: \"aiuta-ios-sdk\")\n</code></pre> <p>CocoaPods  distribution of the Aiuta iOS SDK supports minimum deployment <code>iOS 12</code>, but it still available to operate only with <code>if #available(iOS 13.0.0, *)</code></p> <pre><code>source 'https://github.com/CocoaPods/Specs.git'\nplatform :ios, '12.0'\nuse_frameworks!\n\ntarget 'MyApp' do\n  pod 'AiutaSdk', '~&gt; 4.2.3'\nend\n</code></pre>"}, {"location": "sdk/ios/installation/#import-it", "title": "Import it", "text": "<p>Now in your Swift code, you can use:</p> <pre><code>import AiutaSdk\n</code></pre>"}, {"location": "sdk/ios/installation/#next-step", "title": "Next Step", "text": "<ul> <li> Quick Test SDK Propely Integrated</li> <li> Setup with Configuration</li> </ul>"}, {"location": "sdk/ios/quick-test/", "title": "Quick Test", "text": "<p>This guide describes how to test the Aiuta SDK in your iOS application after installation. It includes steps for setting up the configuration with a demo API key and using example products to start the TryOn.</p> <pre><code>import AiutaSdk\n</code></pre>"}, {"location": "sdk/ios/quick-test/#setup", "title": "Setup", "text": "<p>For quick test purposes you can use demo <code>apiKey</code> auth</p> <pre><code>await Aiuta.setup(configuration: .debug(auth: .apiKey(\"AIUTADEMO\")))\n</code></pre> <p>A good place to initialize third-party libraries is usually your application delegate's <code>application(_:didFinishLaunchingWithOptions:)</code> - you can setup Aiuta there or right before calling the try-on.</p>"}, {"location": "sdk/ios/quick-test/#start-tryon", "title": "Start TryOn", "text": "<p>You can use one of the following product examples that will work with the demo <code>apiKey</code></p> Product 1Product 2Product 3Product 4Product 5Product 6Product 7 <pre><code>let testProduct = Aiuta.Product(\n    id: \"A155850CHBI9XXAM\",\n    title: \"Diesel T-Adjust Q8 Maglietta T-Shirt\",\n    brand: \"Sample Brand\",\n    imageUrls: [\n      \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-71f91730-50e3-4be0-8fc0-40e6461638ed.jpeg\",\n      \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-19ca29d4-81e1-4fdb-8c1f-893e60b447ce.jpeg\",\n      \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-b09df9e8-f2d7-4455-916d-9aa77855468b.jpeg\",\n      \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-f51ad642-aadf-441b-a441-60b93eb49924.jpeg\"\n    ])\nawait Aiuta.tryOn(product: testProduct)\n</code></pre> <p> </p> <pre><code>let testProduct = Aiuta.Product(\n    id: \"A113020HGAM\",\n    title: \"T-Boggy-Megoval-D, T-shirt with maxi oval D embroidery\",\n    brand: \"Sample Brand\",\n    imageUrls: [\n      \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-c31c20b5-65a8-47fb-8eae-513dfc8d532d.jpeg\",\n      \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-1e909cd5-98dc-4797-b973-c2b6a7b488d6.jpeg\",\n      \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-6bbc2ab6-f043-4593-a0d5-0c8ce5704a70.jpeg\",\n      \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-a5cbd3bc-9fef-4e1a-9de9-a92aaa089d06.jpeg\"\n    ])\nawait Aiuta.tryOn(product: testProduct)\n</code></pre> <p> </p> <pre><code>let testProduct = Aiuta.Product(\n    id: \"CUMU0213A5UTC543WDB62\",\n    title: \"Blue poplin bowling shirt with Wolves, Ravens and Doves print\",\n    brand: \"Sample Brand\",\n    imageUrls: [\n      \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-adfbbf56-49ee-48ea-8502-130a3fa2b44d.jpeg\",\n      \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-27bbf083-76aa-413e-b193-a598de4e609d.jpeg\",\n      \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-479125ac-345a-4d84-9498-2e3f7269e5bd.jpeg\",\n      \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-20277c58-5c93-47b2-a09b-5f2c5eb594b3.jpeg\",\n      \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-d2cfb4f4-6197-4cbe-8f97-27951258f717.jpeg\"\n    ])\nawait Aiuta.tryOn(product: testProduct)\n</code></pre> <p> </p> <pre><code>let testProduct = Aiuta.Product(\n    id: \"CUJU0061A2USCV35MMN99\",\n    title: \"Black marble denim oversized shirt\",\n    brand: \"Sample Brand\",\n    imageUrls: [\n      \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-dc9b4ecf-fe5e-44f1-aab1-1fbf302417c8.jpeg\",\n      \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-74f8f923-f972-4df0-9623-fea4b408a215.jpeg\",\n      \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-bbd93821-2cde-4b16-919c-e6dfbe299809.jpeg\",\n      \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-7de4f5e5-a25d-4717-950c-d3ca57d18fae.jpeg\"\n    ])\nawait Aiuta.tryOn(product: testProduct)\n</code></pre> <p> </p> <pre><code>let testProduct = Aiuta.Product(\n    id: \"POMG0072Q2UFH546ARW06\",\n    title: \"Long sleeved ivory polo shirt with intarsia Argyle detail\",\n    brand: \"Sample Brand\",\n    imageUrls: [\n      \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-c0b2aad9-fb9a-4f2a-b14a-39da25f54414.jpeg\",\n      \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-0a2ad54f-ad50-4060-b0bc-61d9d5b55cd8.jpeg\",\n      \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-94be633a-1e8d-42ad-92dc-94fe1056187c.jpeg\",\n      \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-bfb3638a-7d11-47a5-80b8-53eb8f2abe10.jpeg\"\n    ])\nawait Aiuta.tryOn(product: testProduct)\n</code></pre> <p> </p> <pre><code>let testProduct = Aiuta.Product(\n    id: \"ABMA1361U0TW83900N60\",\n    title: \"Short grey wool dress with Marni Symbol\",\n    brand: \"Sample Brand\",\n    imageUrls: [\n      \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-b792c3ea-23ca-445d-8d27-9336bd2ca3cf.jpeg\",\n      \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-d53e585b-d1b9-479a-96be-eff9607faf6b.jpeg\",\n      \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-945ede81-29eb-4e3a-ac35-f9bacd13bd6f.jpeg\",\n      \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-8066087f-66c5-44e6-8eac-5ae7bf29bf77.jpeg\",\n      \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-fb6515ee-3278-487b-ab6b-57395c364f6e.jpeg\"\n    ])\nawait Aiuta.tryOn(product: testProduct)\n</code></pre> <p> </p> <pre><code>let testProduct = Aiuta.Product(\n    id: \"GOMA0459S3UTP749WR00N99\",\n    title: \"Black taffeta wide skirt with Marni Symbol\",\n    brand: \"Sample Brand\",\n    imageUrls: [\n      \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-417b6e3d-9b3c-4d2d-aa2e-49d1c9223c1c.jpeg\",\n      \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-1302ebbc-8352-43bf-824f-cbe21f910689.jpeg\",\n      \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-545f9788-f961-4711-bb98-024c9b413f4e.jpeg\",\n      \"https://storage.googleapis.com/aiuta_prod_external_api_images/external_api/user/web_tools/uploaded_images/user_image-cce0130e-f437-47d7-a867-26087fa18859.jpeg\"\n    ])\nawait Aiuta.tryOn(product: testProduct)\n</code></pre> <p> </p>"}, {"location": "sdk/ios/quick-test/#show-history", "title": "Show History", "text": "<pre><code>await Aiuta.showHistory()\n</code></pre>"}, {"location": "sdk/ios/quick-test/#next-step", "title": "Next Step", "text": "<ul> <li> Create your custom Configuration</li> </ul>"}, {"location": "sdk/web/", "title": "Web SDK", "text": "<p>The Aiuta Web SDK provides a virtual try-on solution for your fashion e-commerce platform using Aiuta Virtual Try On API.</p> <ul> <li> <p>  General SDK Overview</p> <p>Expolore UI Pages, Sequence diagrams, Resources and Analytics</p> </li> <li> <p> Common Developer Section</p> <p>Learn how to setup Authentification, Configure UI and manage Features</p> </li> </ul> <p>Limited support</p> <p>The Web SDK is currently under active development and only supports a small subset of configuration and styling options. Read more here.</p>"}, {"location": "sdk/web/#quick-start", "title": "Quick Start", "text": "<pre><code>&lt;script src=\"https://static.aiuta.com/sdk/1.0.4/index.umd.js\"&gt;&lt;/script&gt;\n\n&lt;script&gt;\n  const aiuta = new Aiuta({\n    auth: { // (1)!\n      subscriptionId: 'your_subscription_id', // (2)!\n      getJwt: async (params) =&gt; {\n        return 'JWT_from_your_backend' // (3)!\n      },\n    },\n    userInterface: {  // (4)!\n      theme: {\n        customCssUrl: 'https://your-domain.com/aiuta-custom.css', // (5)!\n      },\n    },\n    analytics: {  // (6)!\n      handler: {\n        onAnalyticsEvent: (event) =&gt; {\n          console.log('Aiuta Event:', event) // (7)!\n        },\n      },\n    },\n  })\n\n  aiuta.tryOn('your_product_id') // (8)!\n&lt;/script&gt;\n</code></pre> <ol> <li> <p> auth required to authenticate Aiuta SDK to use API with your credentials. Supported authentication methods are <code>ApiKey</code> or <code>Jwt</code> + <code>subscriptionId</code>.</p> </li> <li> <p>Should be provided for the SDK to make unsecured requests related to your account.</p> <p>Please see Obtaining credentials for instructions on how to get your <code>subscriptionId</code></p> </li> <li> <p>The implementation of this method should securely generate the JWT on the server side and subsequently return it to the SDK.</p> <p>Please see <code>getJwt</code> section of JwtAuth for more information on how it works</p> </li> <li> <p> userInterface optional customization of user interface.</p> </li> <li> <p>Optional URL to the CSS file with styles configuration for the Web SDK App.</p> <p>CORS</p> <p>The CSS file provided by <code>customCssUrl</code> must be accessible for loading by a cross-origin iframe hosted on <code>static.aiuta.com</code></p> <p>This means the server hosting your CSS must send appropriate CORS headers (e.g., <code>Access-Control-Allow-Origin: https://static.aiuta.com</code>) to allow the SDK iframe to fetch and apply your custom styles.</p> <p>Please see Custom CSS for styling options and Localization for text customization</p> </li> <li> <p>Optional configuration to handle analytics events generated by the SDK.</p> </li> <li> <p>Callback function that processes analytics events generated by the SDK, allowing integration with external analytics services or custom event handling.</p> </li> <li> <p>Open SDK UI to start try on flow with selected product identifier.</p> <p>Please note that you should obtain information about the availability of the virtual try-on feature for each of your products from your backend, as the SDK does not receive information about product availability and will attempt to launch a virtual try-on with any product you provide, which may result in an error if that product has not been trained by Aiuta.</p> </li> </ol>"}, {"location": "sdk/web/#sources-and-demo", "title": "Sources and Demo", "text": "<ul> <li> Sources </li> <li> Demo</li> </ul>"}, {"location": "sdk/web/demo/", "title": "Web SDK Demo", "text": "<p>This page shows how Aiuta Web SDK can be used in your fashion e-commerce platform. Click the \u201cTry on\u201d button in the sample catalog to see the virtual try-on feature in action.</p> <p></p> <ul> <li> <p></p> <p>Try on</p> <p>Diesel T-Adjust Q8 Maglietta T-Shirt</p> </li> <li> <p></p> <p>Try on</p> <p>T-Boggy-Megoval-D, T-shirt with maxi oval D embroidery</p> </li> <li> <p></p> <p>Try on</p> <p>Blue poplin bowling shirt with Wolves, Ravens and Doves print</p> </li> <li> <p></p> <p>Try on</p> <p>Black marble denim oversized shirt</p> </li> <li> <p></p> <p>Try on</p> <p>Long sleeved ivory polo shirt with intarsia Argyle detail</p> </li> <li> <p></p> <p>Try on</p> <p>Short grey wool dress with Marni Symbol</p> </li> <li> <p></p> <p>Try on</p> <p>Black taffeta wide skirt with Marni Symbol</p> </li> <li> <p></p> <p>Try on</p> <p>Grey cashmere colour block polo shirt with Marni Symbol</p> </li> <li> <p></p> <p>Try on</p> <p>Blue nappa shorts</p> </li> <li> <p></p> <p>Try on</p> <p>The Siena Cotton Knit Polo Top</p> </li> <li> <p></p> <p>Try on</p> <p>Jace Plisse Top</p> </li> <li> <p></p> <p>Try on</p> <p>Jude Stretch High-Rise Croppd Wide-Leg Jeans</p> </li> <li> <p></p> <p>Try on</p> <p>Strapless draped sateen mini dress</p> </li> <li> <p></p> <p>Try on</p> <p>Power poplin shirt</p> </li> <li> <p></p> <p>Try on</p> <p>BLANKNYC</p> </li> <li> <p></p> <p>Try on</p> <p>BOSS</p> </li> <li> <p></p> <p>Try on</p> <p>TOCCIN X RTR</p> </li> <li> <p></p> <p>Try on</p> <p>Linen Peasant Blouse</p> </li> <li> <p></p> <p>Try on</p> <p>Cotton Poplin Maxi Skirt</p> </li> <li> <p></p> <p>Try on</p> <p>crystal snake track suit</p> </li> <li> <p></p> <p>Try on</p> <p>Packer coat</p> </li> <li> <p></p> <p>Try on</p> <p>cotton-silk polo shirt</p> </li> <li> <p></p> <p>Try on</p> <p>checkered short-sleeved shirt</p> </li> <li> <p></p> <p>Try on</p> <p>printed bowling shirt</p> </li> <li> <p></p> <p>Try on</p> <p>Giles linen shirt</p> </li> <li> <p></p> <p>Try on</p> <p>Classic Wool Suit</p> </li> </ul>"}, {"location": "sdk/web/configuration/custom-css/", "title": "Custom CSS Configuration", "text": "<p>The Web SDK supports custom CSS styling through the <code>customCssUrl</code> parameter in the configuration. This allows you to customize the appearance of UI components to match your brand and design system.</p>"}, {"location": "sdk/web/configuration/custom-css/#configuration", "title": "Configuration", "text": "<p>Custom CSS is configured in the <code>userInterface</code> section of the SDK configuration as shown in the Web SDK documentation:</p> <pre><code>const aiuta = new Aiuta({\n  userInterface: {\n    theme: {\n      customCssUrl: 'https://your-domain.com/path/to/aiuta-custom.css',\n    },\n  },\n})\n</code></pre> <p>Cross-Origin Access Required</p> <p>Your custom CSS file must be accessible for loading from the Aiuta SDK iframe hosted on <code>static.aiuta.com</code>. Make sure to configure proper CORS headers on your server:</p> <pre><code>Access-Control-Allow-Origin: https://static.aiuta.com\nAccess-Control-Allow-Methods: GET\nAccess-Control-Allow-Headers: Content-Type\n</code></pre> <p>Alternatively, you can allow all origins during development (not recommended for production):</p> <pre><code>Access-Control-Allow-Origin: *\n</code></pre>"}, {"location": "sdk/web/configuration/custom-css/#css-variables", "title": "CSS Variables", "text": "<p>The Web SDK uses CSS custom properties (variables) that you can override in your custom CSS file. All variables follow the <code>--aiuta-</code> prefix pattern, adhering to the naming convention from the general theme documentation.</p>"}, {"location": "sdk/web/configuration/custom-css/#color-scheme", "title": "Color Scheme", "text": "<pre><code>:root {\n  /* Brand &amp; Primary Colors */\n  --aiuta-color-brand: #000000;\n  --aiuta-color-try-on: #4000ff;\n  --aiuta-color-primary: #000000;\n  --aiuta-color-secondary: #9f9f9f;\n\n  /* Contextual Colors (FOR USE ON SPECIFIC BACKGROUNDS ONLY) */\n  --aiuta-color-on-dark: #ffffff; /* White text for use ON dark/brand backgrounds */\n  --aiuta-color-on-light: #000000; /* Dark text for use ON light backgrounds (use sparingly) */\n\n  /* Background Colors */\n  --aiuta-color-background: #ffffff;\n  --aiuta-color-neutral: #f2f2f7;\n  --aiuta-color-border: #e5e5ea;\n\n  /* Selection */\n  --aiuta-color-selection-background: #000000;\n\n  /* Error */\n  --aiuta-color-error-background: #ef5754;\n\n  /* Screen dim for modals */\n  --aiuta-color-screen-dim: rgba(0, 0, 0, 0.7);\n}\n</code></pre>"}, {"location": "sdk/web/configuration/custom-css/#typography", "title": "Typography", "text": "<p>The Web SDK uses CSS classes for typography styling. You can override these classes in your custom CSS:</p> <pre><code>/* Global font family */\n:root {\n  --aiuta-typeface:\n    'Roboto', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Helvetica Neue', Arial, 'Noto Sans',\n    sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n}\n\n/* Page Title */\n.aiuta-page-title {\n  font-size: 17px;\n  font-weight: 500;\n  line-height: 22px;\n}\n\n/* Titles */\n.aiuta-title-l {\n  font-size: 24px;\n  font-weight: 700;\n  line-height: normal;\n}\n\n.aiuta-title-m {\n  font-size: 20px;\n  font-weight: 600;\n  line-height: normal;\n}\n\n/* Labels */\n.aiuta-label-regular {\n  font-size: 16px;\n  font-weight: 400;\n  line-height: 20px;\n}\n\n.aiuta-label-subtle {\n  font-size: 13px;\n  font-weight: 400;\n  line-height: 18px;\n}\n\n.aiuta-label-disclaimer {\n  font-size: 11px;\n  font-weight: 400;\n  line-height: 18px;\n  letter-spacing: 0.22px;\n}\n\n/* Buttons */\n.aiuta-button-m {\n  font-size: 17px;\n  font-weight: 500;\n  line-height: 18px;\n}\n\n.aiuta-button-s {\n  font-size: 14px;\n  font-weight: 500;\n  line-height: 18px;\n  letter-spacing: -0.14px;\n}\n</code></pre>"}, {"location": "sdk/web/configuration/custom-css/#component-shapes", "title": "Component Shapes", "text": "<p>The Web SDK uses CSS classes for component shapes. You can override these classes in your custom CSS:</p> <pre><code>/* Shape for desktop app container and modal popups */\n.aiuta-modal {\n  border-radius: 24px;\n  box-shadow:\n    0 8px 28px -6px rgba(0, 0, 0, 0.12),\n    0 18px 88px -4px rgba(0, 0, 0, 0.14);\n}\n\n/* Button Medium Shape */\n.aiuta-button-m {\n  border: none;\n  border-radius: 12px;\n}\n\n/* Button Small Shape */\n.aiuta-button-s {\n  border: none;\n  border-radius: 8px;\n}\n\n/* Image Large Shape */\n.aiuta-image-l {\n  border-radius: 24px;\n}\n\n/* Image Medium Shape */\n.aiuta-image-m {\n  border-radius: 16px;\n}\n\n/* Image Small Shape */\n.aiuta-image-s {\n  border-radius: 8px;\n}\n</code></pre>"}, {"location": "sdk/web/configuration/custom-css/#component-specific-colors", "title": "Component-Specific Colors", "text": "<p>These colors are already included in the main color scheme above, but are highlighted here for component-specific customization:</p> <pre><code>:root {\n  /* Selection components */\n  --aiuta-color-selection-background: #000000;\n\n  /* Error components */\n  --aiuta-color-error-background: #ef5754;\n\n  /* Modal overlays */\n  --aiuta-color-screen-dim: rgba(0, 0, 0, 0.7);\n}\n</code></pre>"}, {"location": "sdk/web/configuration/custom-css/#example-custom-css", "title": "Example Custom CSS", "text": "<p>Here's an example of a custom CSS file that overrides the brand color, typeface, and some component styling:</p> <pre><code>:root {\n  /* Override brand color to match your brand */\n  --aiuta-color-brand: #ff6b35;\n  --aiuta-color-try-on: #ff6b35;\n\n  /* Set custom typeface for all text */\n  --aiuta-typeface: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;\n\n  /* Customize primary text color */\n  --aiuta-color-primary: #1a1a1a;\n\n  /* Customize background colors */\n  --aiuta-color-background: #fafafa;\n  --aiuta-color-neutral: #f0f0f0;\n}\n\n/* Override button styling */\n.aiuta-button-m {\n  border-radius: 16px;\n  font-weight: 600;\n}\n\n.aiuta-button-s {\n  border-radius: 12px;\n  font-weight: 600;\n}\n\n/* Customize image shapes */\n.aiuta-image-l {\n  border-radius: 20px;\n}\n\n/* Override typography */\n.aiuta-title-l {\n  font-weight: 800;\n  font-size: 28px;\n}\n</code></pre>"}, {"location": "sdk/web/configuration/custom-css/#typography-system", "title": "Typography System", "text": "<p>The Web SDK uses a unified typography system with both CSS variables and classes:</p> <ul> <li>CSS Variable Control: Change <code>--aiuta-typeface</code> to update the font family across all SDK components</li> <li>CSS Class Customization: Override individual typography classes (<code>.aiuta-title-l</code>, <code>.aiuta-button-m</code>, etc.) for specific styling</li> <li>Consistent Appearance: All components use the same base font family by default</li> <li>Flexible Customization: Mix CSS variables for global changes with class overrides for specific elements</li> <li>Fallback Support: The default typeface includes Roboto and system fonts for optimal cross-platform compatibility</li> </ul>"}, {"location": "sdk/web/configuration/custom-css/#notes", "title": "Notes", "text": "<ul> <li>CSS Variables: All CSS variables are optional - only override the ones you need to customize</li> <li>CSS Classes: You can override any of the typography and shape classes to customize specific components</li> <li>Fallback Behavior: The SDK will fall back to default values for any variables or classes not defined in your custom CSS</li> <li>Global Font Control: The <code>--aiuta-typeface</code> variable applies to all text elements automatically</li> <li>HTTPS Requirement: Make sure your custom CSS file is accessible via HTTPS when using the SDK in production</li> <li>Cross-Device Testing: Test your customizations across different devices and screen sizes to ensure compatibility</li> <li>Import Order: Your custom CSS should be loaded after the SDK's default styles to ensure proper override behavior</li> </ul>"}, {"location": "sdk/web/configuration/custom-css/#roadmap", "title": "Roadmap", "text": "<p>We're continuously working to expand the Web SDK's styling capabilities:</p> <ol> <li> <p>Extended Styling System: Expand the CSS variable system to provide greater alignment with the general configuration scheme, including support for all theme components and advanced styling options available on other platforms.</p> </li> <li> <p>Granular Element Customization: Add the ability to fully customize specific elements on specific SDK pages with complete CSS capabilities, allowing developers to target individual components and pages for maximum design flexibility.</p> </li> </ol>"}, {"location": "sdk/web/configuration/limited-support/", "title": "Limited Configuration Support", "text": "<p>The Web SDK currently has limited configuration support compared to the general configuration scheme. While the full configuration structure is available on other platforms (Android, iOS, Flutter), the Web SDK implementation focuses on essential features for web integration.</p>"}, {"location": "sdk/web/configuration/limited-support/#configuration-support-status", "title": "Configuration Support Status", "text": "Configuration Support Status Description <code>auth</code> \u2705 Full Complete auth support with both API key and JWT methods <code>analytics</code> \u2705 Full Analytics event handling with custom callbacks <code>userInterface</code> \u26a0\ufe0f Partial Custom CSS styling + localization strings for UI components <code>features</code> \u26a0\ufe0f Partial Localization strings and image customization for key features <code>debugSettings</code> \u26a0\ufe0f Basic Simple logging enable/disable setting"}, {"location": "sdk/web/configuration/limited-support/#whats-available", "title": "What's Available", "text": "<p>The Web SDK supports comprehensive functionality for virtual try-on experiences:</p>"}, {"location": "sdk/web/configuration/limited-support/#full-support", "title": "\u2705 Full Support", "text": "<ul> <li>Authentication: Both API key and JWT-based authentication with callback support</li> <li>Analytics: Complete analytics event tracking with custom event handlers</li> </ul>"}, {"location": "sdk/web/configuration/limited-support/#partial-support", "title": "\u26a0\ufe0f Partial Support", "text": "<ul> <li>User Interface:</li> <li>Custom CSS styling and theme configuration</li> <li>Localization strings for UI components (SelectionSnackbar, ErrorSnackbar, PoweredBy)</li> <li>Features:</li> <li>Localization strings for key features (Onboarding, ImagePicker, TryOn, Share, Consent)</li> <li>Image customization for onboarding screens</li> <li>Consent management with multiple consent types</li> <li>Debug Settings: Basic logging enable/disable functionality</li> </ul>"}, {"location": "sdk/web/configuration/limited-support/#features-configuration", "title": "Features Configuration", "text": "<ul> <li>\u2705 Onboarding: Complete localization and image customization</li> <li>\u2705 Image Picker: Localization for upload flows and QR functionality</li> <li>\u2705 Try-On: Localization for try-on process and validation messages</li> <li>\u2705 Share: Localization for sharing functionality</li> <li>\u2705 Consent: Multi-consent management with required/optional types</li> <li>\u274c Feature Toggles: Individual feature enable/disable not supported</li> <li>\u274c Advanced Workflows: Custom try-on flows not configurable</li> </ul>"}, {"location": "sdk/web/configuration/limited-support/#future-roadmap", "title": "Future Roadmap", "text": "<p>We're continuously working to expand Web SDK configuration support to match the full feature set available on mobile platforms.</p>"}, {"location": "sdk/web/configuration/localization/", "title": "Localization Configuration", "text": "<p>The Web SDK supports comprehensive localization for UI components and features. You can customize text strings and images to match your brand and language requirements.</p>"}, {"location": "sdk/web/configuration/localization/#configuration-structure", "title": "Configuration Structure", "text": "<p>Localization is configured through two main sections:</p> <ul> <li><code>userInterface</code> - Basic UI component strings</li> <li><code>features</code> - Feature-specific strings and images</li> </ul> <pre><code>const aiuta = new Aiuta({\n  auth: {\n    subscriptionId: 'your_subscription_id',\n    getJwt: async (params) =&gt; 'your_jwt_token',\n  },\n  userInterface: {\n    theme: {\n      selectionSnackbar: {\n        strings: {\n          select: 'Select',\n          cancel: 'Cancel',\n          selectAll: 'Select All',\n          unselectAll: 'Unselect All',\n        },\n      },\n      errorSnackbar: {\n        strings: {\n          defaultErrorMessage: 'Something went wrong.\\nPlease try again later',\n          tryAgainButton: 'Try Again',\n        },\n      },\n      poweredBy: {\n        strings: {\n          poweredByAiuta: 'Powered by Aiuta',\n        },\n      },\n    },\n  },\n  features: {\n    onboarding: {\n      strings: {\n        onboardingButtonNext: 'Next',\n        onboardingButtonStart: 'Start',\n      },\n      howItWorksPage: {\n        strings: {\n          onboardingHowItWorksTitle: 'Try on before buying',\n          onboardingHowItWorksDescription: 'Upload a photo and see how items look on you',\n        },\n        images: {\n          onboardingHowItWorksItems: [\n            {\n              itemPhoto: 'https://example.com/item1-photo.jpg',\n              itemPreview: 'https://example.com/item1-preview.png',\n            },\n            {\n              itemPhoto: 'https://example.com/item2-photo.jpg',\n              itemPreview: 'https://example.com/item2-preview.png',\n            },\n            {\n              itemPhoto: 'https://example.com/item3-photo.jpg',\n              itemPreview: 'https://example.com/item3-preview.png',\n            },\n          ],\n          onboardingHowItWorksDesktop: 'https://example.com/how-it-works-desktop.png',\n        },\n      },\n      bestResultsPage: {\n        strings: {\n          onboardingBestResultsTitle: 'For the best results',\n          onboardingBestResultsDescription:\n            'Use a photo with good lighting, stand straight on a plain background',\n        },\n        images: {\n          onboardingBestResultsDesktop: 'https://example.com/best-results-desktop.png',\n          onboardingBestResultsMobile: 'https://example.com/best-results-mobile.png',\n        },\n      },\n    },\n    imagePicker: {\n      strings: {\n        imagePickerUploadButton: 'Upload a photo of you',\n        uploadsHistoryButtonNewPhoto: '+ Upload new photo',\n      },\n      uploadsHistory: {\n        strings: {\n          uploadsHistoryTitle: 'Previously used photos',\n          uploadsHistoryButtonChangePhoto: 'Change photo',\n        },\n      },\n      qrUpload: {\n        strings: {\n          qrUploadNextButton: 'Next',\n          qrUploadSuccessTitle: 'Your photo has been uploaded',\n          qrUploadNextHint: 'It will appear within a few seconds',\n        },\n      },\n      qrPrompt: {\n        strings: {\n          qrPromptHint: 'Scan the QR code',\n          qrPromptOr: 'Or',\n          qrPromptUploadButton: 'Click here to upload',\n        },\n      },\n    },\n    tryOn: {\n      strings: {\n        tryOnPageTitle: 'Virtual Try On',\n        tryOn: 'Try On',\n      },\n      loadingPage: {\n        strings: {\n          tryOnLoadingStatusScanningBody: 'Scanning your body',\n          tryOnLoadingStatusGeneratingOutfit: 'Generating outfit',\n        },\n      },\n      inputImageValidation: {\n        strings: {\n          invalidInputImageDescription: \"We couldn't detect anyone in this photo\",\n          invalidInputImageChangePhotoButton: 'Change photo',\n          noPeopleDetectedDescription: \"We couldn't detect anyone in this photo. For best results, please upload a well-lit photo of an adult standing straight in front of a pale background.\",\n          tooManyPeopleDetectedDescription: \"We detected multiple people in this photo. For best results, please upload a well-lit photo of an adult standing straight in front of a pale background.\",\n          childDetectedDescription: \"It looks like this photo might be of a child. For best results, please upload a well-lit photo of an adult standing straight in front of a pale background.\"\n        },\n      },\n      fitDisclaimer: {\n        strings: {\n          fitDisclaimerTitle: 'Results may vary from real-life fit',\n        },\n      },\n      generationsHistory: {\n        strings: {\n          generationsHistoryPageTitle: 'History',\n        },\n      },\n    },\n    share: {\n      strings: {\n        shareButton: 'Share',\n        sharePageTitle: 'Share with',\n        copyButton: 'Copy',\n        downloadButton: 'Download',\n      },\n    },\n    consent: {\n      strings: {\n        consentTitle: 'Consent',\n        consentDescriptionHtml:\n          'In order to try on items digitally, you agree to allow Aiuta to process your photo. Your data will be processed according to the Aiuta &lt;a href=\"https://aiuta.com/legal/terms-of-service.html\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;Terms of Use&lt;/a&gt;',\n        consentButtonAccept: 'Accept',\n      },\n      data: {\n        consents: [\n          {\n            id: 'main',\n            type: 'explicitRequired',\n            html: 'I agree to allow Aiuta to process my photo',\n          },\n          {\n            id: 'age-verification',\n            type: 'explicitRequired',\n            html: 'I confirm that I am 18 years of age or older',\n          },\n        ],\n      },\n    },\n  },\n})\n</code></pre>"}, {"location": "sdk/web/configuration/localization/#key-features", "title": "Key Features", "text": "<ul> <li>User Interface Components: Localize basic UI elements like selection controls, error messages, and attribution</li> <li>Onboarding Flow: Customize text and images for the introduction screens</li> <li>Image Picker: Localize photo upload and management interfaces</li> <li>Try-On Process: Customize text for the virtual try-on experience</li> <li>Share Functionality: Localize sharing options and actions</li> <li>Consent Management: Support multiple consent types with HTML content</li> </ul>"}, {"location": "sdk/web/configuration/localization/#notes", "title": "Notes", "text": "<ul> <li>All strings are optional - The SDK provides English defaults for all text</li> <li>Multi-line text - Use <code>\\n</code> for line breaks in strings like error messages</li> <li>HTML content - Consent descriptions support HTML tags for links and formatting</li> <li>Image requirements - Custom images must be HTTPS URLs accessible from <code>static.aiuta.com</code></li> <li>Fallback behavior - Missing strings or images automatically fall back to SDK defaults</li> </ul>"}, {"location": "shopify/", "title": "Aiuta Virtual Try-On Shopify App", "text": "<p>Aiuta Try-On allows shoppers to see how clothes fit and look on them in real time, answering the key question: \u201cWill this item suit me?\u201d</p>"}, {"location": "shopify/#links", "title": "Links", "text": "<ul> <li> View in the Shopify app store</li> <li> Open demo store</li> </ul>"}, {"location": "shopify/#benefits", "title": "Benefits", "text": "<p>The app integrates seamlessly with your product pages, enhancing customer confidence and reducing returns. Perfect for brands of any size looking to drive engagement and conversions!</p> <ul> <li>Realistic &amp; Quick Virtual Try-On solution</li> <li>Fit Optimization that adapts clothing visuals to different body types</li> <li>Seamless Integration in just 2 steps</li> </ul>"}, {"location": "team/docs/convention/", "title": "Documentation Convention", "text": "<p>Our team uses this public documentation to build our products. It serves as a single source of truth to ensure consistent implementation across different platforms. We strive to adhere to consistent principles to maintain a coherent structure. Work on the convention is still ongoing.</p>"}, {"location": "team/docs/convention/#check-before-publishing", "title": "Check before publishing", "text": "<p>Documentation is published automatically when merged into the <code>main</code> branch. Therefore, before merging a pull request, please check locally</p> <ul> <li>ZERO Warning policy\u00a0 (1)</li> <li>the documentation is easy to read</li> <li>it adheres to accepted conventions</li> <li>you like it</li> </ul> <ol> <li> <p>Strict mode</p>   MKDocs configuration has <code>strict</code> parameter set to <code>true</code>. This will cause MkDocs to abort the build on any warnings. </li> </ol> How to set up a local preview? <p>To build and preview the documentation locally, you'll need to install Material for MKDocs  along with the required plugins:</p> <pre><code>pip install \\\n  mkdocs-material \\\n  mkdocs-minify-plugin \\\n  mkdocs-include-markdown-plugin \\\n  mkdocs-exclude-search \\\n  mkdocs-macros-plugin \\\n  mkdocs-redirects \\\n  requests\n</code></pre> <p>Once everything is installed, navigate to the root of your <code>docs</code> repository clone and run</p> <pre><code>mkdocs serve\n</code></pre> <p>Strict mode</p> <p>MKDocs configuration has <code>strict</code> parameter set to <code>true</code>. This will cause MkDocs to abort the build on any warnings. If you need to temporarily bypass this, run <code>mkdocs serve --no-strict</code></p> <p>You should see output like</p> <pre><code>INFO    -  [10:46:26] Serving on http://127.0.0.1:8000/\n</code></pre> <p>Open that URL in your browser to view the documentation.</p> API rate limit exceeded <p>If you see <code>&lt;version&gt;</code> instead of actual SDK version numbers, the GitHub API may have rejected request due to rate limiting.</p> <p>To fix this, generate a GitHub Personal Access Token and authorize your requests:</p> <ol> <li>Go to https://github.com/settings/tokens.</li> <li>Click \"Generate new token (classic)\".</li> <li>Fill in the following:</li> <li>Note: <code>Docs GitHub API Access</code></li> <li>Scopes:<ul> <li>\u2705 <code>public_repo</code> if you're accessing only public repositories, or</li> <li>\u2705 <code>repo</code> if you're accessing private ones</li> </ul> </li> <li>Copy the generated token <code>ghp_...</code> \u2014 it will be shown only once.</li> </ol> <p>Then, in your terminal:</p> <pre><code>export GITHUB_TOKEN=ghp_your_token_here\nmkdocs serve\n</code></pre> <p>This will authorize your GitHub API requests and avoid the default 60-requests-per-hour limit.</p>"}, {"location": "team/docs/convention/#links", "title": "Links", "text": ""}, {"location": "team/docs/convention/#external", "title": "External", "text": "<p>New tab/window</p> <p>Always add  <pre><code>{:target=\"_blank\"}\n</code></pre> for an external link to open it in a new tab or window</p>"}, {"location": "team/docs/convention/#visual-mark", "title": "Visual mark", "text": "<p>Always visually mark links that lead outside the documentation site. There are two options:</p> Explicit external link iconCall to action title when using card grids <p>Add this icon to the end of the link title</p> <pre><code>:octicons-link-external-24:\n</code></pre> <p>Example</p> <pre><code>[aiuta.com :octicons-link-external-24:](https://aiuta.com){:target=\"_blank\"}\n</code></pre> <p> aiuta.com  </p> <p>When grouping links into blocks with <code>grid cards</code>  you can omit the icon if you use an explicit action in the link title, such as \"Open\", \"Download\", etc.</p> <p>Example</p> <pre><code>&lt;div class=\"grid cards\" markdown&gt;\n\n- :fontawesome-brands-google-play: [Get it on __Google Play__](https://play.google.com/store/apps/details?id=com.aiuta.fashionsdk.demo){:target=\"_blank\"}\n- :fontawesome-brands-shopify: [View in the __Shopify__ app store](https://shopify.aiuta.com){:target=\"_blank\"}\n\n&lt;/div&gt;\n</code></pre> <ul> <li> Get it on Google Play</li> <li> View in the Shopify app store</li> </ul>"}, {"location": "team/docs/convention/#internal", "title": "Internal", "text": ""}, {"location": "team/docs/convention/#use-root-relative-links", "title": "Use root-relative links", "text": "<p>This leads to the same result but is easier to maintain in the future.</p> <p>Root is <code>/docs</code></p>  Root-relative Relative <p><pre><code>[About SDK](/sdk/index.md)\n\n![img](/media/about.png){ width=100 }\n</code></pre> About SDK <p> </p> <p><pre><code>[About SDK](../../sdk/index.md)\n\n![img](../../media/about.png){ width=100 }\n</code></pre> About SDK <p> </p>"}, {"location": "team/docs/convention/#custom-doc-admonition", "title": "Custom <code>doc</code> admonition", "text": "<p>If you want to specifically highlight links as references to other parts of the documentation, use a custom <code>doc</code> admonition  that has some special style settings</p> Single linkMultiple links <p>Example</p> <pre><code>!!! doc \"To understand this, see [that](#)\"\n</code></pre> <p>To understand this, see that</p> <p> </p> <p>Example</p> <pre><code>!!! doc \"For full context, see\"\n\n    - [this](#)\n    - maybe [that](#)\n    - and something [more](#)\n</code></pre> <p>For full context, see</p> <ul> <li>this</li> <li>maybe that</li> <li>and something more</li> </ul>"}, {"location": "team/docs/convention/#sources", "title": "Sources", "text": "<p>Always provide links to sources and packages, if available, giving preference to <code>grid cards</code> .</p> <p>Example</p> <p><pre><code>&lt;div class=\"grid cards\" markdown&gt;\n\n- :fontawesome-brands-flutter: [Pub.dev package :octicons-link-external-24:](https://pub.dev/packages/aiuta_flutter){:target=\"_blank\"}\n- :fontawesome-brands-github: [Plugin sources :octicons-link-external-24:](https://github.com/aiuta-com/flutter-sdk){:target=\"_blank\"}\n\n&lt;/div&gt;\n</code></pre> <ul> <li> Pub.dev package </li> <li> Plugin sources </li> </ul> <p> </p>"}, {"location": "team/docs/convention/#code-blocks", "title": "Code blocks", "text": "<p>Instead of comments, give preference to annotations , which can be much more detailed and contain active links, images, and instructions. Describe things in detail, keeping the code clean and free of comments. Don't forget to specify default values in the <code>example</code> admonition , if applicable.</p> <p>Example</p> <pre><code>``` typescript\nFoo {\n  bar: Bar // (1)!\n}\n```\n\n1.  Here is annotaion with [link](#), image\n\n    ![image](/media/images/imagePickerSample1.png){ width=50 }\n\n    !!! example \"\"\n        and default value\n</code></pre> <p> <pre><code>Foo {\n  bar: Bar // (1)!\n}\n</code></pre> <ol> <li> <p>Here is annotaion with link, image</p> <p></p> <p>and default value</p> </li> </ol>"}, {"location": "team/docs/convention/#schemes", "title": "Schemes", "text": "<p>To describe a language-independent scheme or data model use a code block with <code>typescript</code> highlighting where</p> <ul> <li>omit key constructs such as <code>class</code>, <code>new</code>, etc., that are redundant for the description</li> <li>avoid traling commas and semicolons, as well as colons between property definitions and opening brackets, cluttering up the scheme</li> <li>prefer <code>PascalCase</code> for types and <code>camelCase</code> for properties (1)</li> <li>define collections as <code>List&lt;&gt;</code> and <code>Map&lt;&gt;</code></li> <li>denote enumerated / sealed types with  <code>|</code>, combined with tabs for their schemes</li> <li>indicate optional fields with <code>| null</code></li> <li>indent with 2 spaces</li> </ul> <ol> <li>except for the API, which uses <code>snake_case</code></li> </ol> <p>Example</p> <p><pre><code>``` typescript\nFoo {\n  fooProperty1: String\n  fooProperty2: Number | null\n  fooProperty3: Bar1 | Bar2 | null\n\n  fooEmbeddedeType {\n    fooEmbeddedeTypeProperty1: String\n  }\n}\n```\n\n=== \"Bar1\"\n    ``` typescript\n    Bar1 {\n      bar1Property1: List&lt;Bool&gt;\n    }\n    ```\n\n=== \"Bar2\"\n    ``` typescript\n    Bar2 {\n      bar2Property1: Map&lt;String, Bool&gt;\n    }\n    ```    \n</code></pre> <pre><code>Foo {\n  fooProperty1: String\n  fooProperty2: Number | null\n  fooProperty3: Bar1 | Bar2 | null\n\n  fooEmbeddedeType {\n    fooEmbeddedeTypeProperty1: String\n  }\n}\n</code></pre> Bar1Bar2 <pre><code>Bar1 {\n  bar1Property1: List&lt;Bool&gt;\n}\n</code></pre> <pre><code>Bar2 {\n  bar2Property1: Map&lt;String, Bool&gt;\n}\n</code></pre>"}, {"location": "team/docs/convention/#templates", "title": "Templates", "text": "<p>If several pages of your documentation contain identical sections regarding repetitive reminders, a list of some questions, or system requirements, please create templates and include them with the <code>include-markdown</code> plugin</p> <p>Example</p> <p>Remove spaces in <code>{ %</code> <code>% }</code>. Careful, it works inside code blocks also.</p> <pre><code>{ % include-markdown \"sdk/templates/flutter/requirements.md\" % }\n</code></pre> <p> <pre><code>sdk: &gt;=3.1.0 &lt;4.0.0\nflutter: &gt;= 3.19.6\n</code></pre> </p> <p><code>include</code> macros</p> <p>The <code>macros</code> plugin also provides its own <code>include</code> with the same syntax, but in the case of complex pages and nested indents, it often breaks the page layout, whereas <code>include-markdown</code> does not have this issue.</p>"}, {"location": "team/docs/convention/#appearance", "title": "Appearance", "text": "<p>Keep documentation clean, uncluttered, divided into sections, use visual indicators to draw attention to specific areas (icons, admonitions, grid cards mentioned earlier).</p>"}, {"location": "team/docs/convention/#dark-theme", "title": "Dark theme", "text": "<p>Let's respect people who prefer dark themes</p> <ul> <li>provide a contrasting alternative for monochrome images that cannot be colored, add <code>#only-light</code> or <code>#only-dark</code> at the end of the resource path</li> <li>define a contrasting background with <code>stylesheets/aiuta.css</code> for anything that has no alternative in the dark version</li> </ul> <p>Example</p> Markdown<code>stylesheets/aiuta.css</code> <pre><code>&lt;!-- good in both themes --&gt;\n\n:material-format-color-text:{ .cl-aiuta }\n![back24](/media/icons/back24.png#only-light){ width=12 } \n![back24](/media/icons/on-dark/back24.png#only-dark){ width=12 }\n![close24](/media/icons/close24.png#only-light){ width=12 } \n![close24](/media/icons/on-dark/close24.png#only-dark){ width=12 }\n\n&lt;!-- bad in a dark theme  --&gt;\n\n:material-format-color-text:{ .cl-selection-background }\n![back24](/media/icons/back24.png){ width=12 }\n![close24](/media/icons/close24.png){ width=12 }\n</code></pre> <pre><code>.cl-aiuta {\n  color: #4000FF;\n}\n\n/* Light background for dark colors to contrast */\n.cl-primary,\n.cl-aiuta {\n  background-color: #FFFFFF;\n  border-radius: 6px;\n}\n</code></pre> <p> <p> </p> <p> </p> <p>Swich docs to a dark theme using / toggle in the header to see the difference</p>"}, {"location": "team/docs/convention/#custom-icons", "title": "Custom icons", "text": "<p>If you need a special icon, you couldn't find a suitable one among the huge number available icons , and want to export yours from Figma and place it in the <code>overrides/.icons</code> directory, please edit the exported <code>svg</code> file manually, replacing the fill color (usually <code>white</code> or <code>black</code> for icons) with the <code>currentColor</code> to match current typeface color.</p> <p>Example</p>  Original Figma export Your fix <pre><code>&lt;svg width=\"29\" height=\"29\" viewBox=\"0 0 29 29\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"&gt;\n&lt;rect width=\"29\" height=\"29\" rx=\"4\" fill=\"white\"/&gt;\n&lt;/svg&gt;\n</code></pre> <pre><code>&lt;svg width=\"29\" height=\"29\" viewBox=\"0 0 29 29\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"&gt;\n&lt;rect width=\"29\" height=\"29\" rx=\"4\" fill=\"currentColor\"/&gt;\n&lt;/svg&gt;\n</code></pre> <p>In the current version of Figma, you can set the <code>currentColor</code> as a value but it will unfortunately be replaced with some explicit color, probaly <code>#CCCCCC</code></p> How to use custom icons? <p>Custom icons, which are located in the <code>overrides/.icons</code> directory, will be available to use by putting the valid path between two colons, and replacing <code>/</code> with <code>-</code></p> <p>Example</p> <p><pre><code>:aiuta-logo: :aiuta-favicon:\n</code></pre> </p>"}, {"location": "team/docs/convention/#common-sense", "title": "Common sense", "text": "<p>Use it.</p>"}, {"location": "team/docs/local-build/", "title": "Local Build", "text": "<p>To build and preview the documentation locally, you'll need to install Material for MKDocs  along with the required plugins:</p> <pre><code>pip install \\\n  mkdocs-material \\\n  mkdocs-minify-plugin \\\n  mkdocs-include-markdown-plugin \\\n  mkdocs-exclude-search \\\n  mkdocs-macros-plugin \\\n  mkdocs-redirects \\\n  requests\n</code></pre> <p>Once everything is installed, navigate to the root of your <code>docs</code> repository clone and run</p> <pre><code>mkdocs serve\n</code></pre> <p>Strict mode</p> <p>MKDocs configuration has <code>strict</code> parameter set to <code>true</code>. This will cause MkDocs to abort the build on any warnings. If you need to temporarily bypass this, run <code>mkdocs serve --no-strict</code></p> <p>You should see output like</p> <pre><code>INFO    -  [10:46:26] Serving on http://127.0.0.1:8000/\n</code></pre> <p>Open that URL in your browser to view the documentation.</p> API rate limit exceeded <p>If you see <code>&lt;version&gt;</code> instead of actual SDK version numbers, the GitHub API may have rejected request due to rate limiting.</p> <p>To fix this, generate a GitHub Personal Access Token and authorize your requests:</p> <ol> <li>Go to https://github.com/settings/tokens.</li> <li>Click \"Generate new token (classic)\".</li> <li>Fill in the following:</li> <li>Note: <code>Docs GitHub API Access</code></li> <li>Scopes:<ul> <li>\u2705 <code>public_repo</code> if you're accessing only public repositories, or</li> <li>\u2705 <code>repo</code> if you're accessing private ones</li> </ul> </li> <li>Copy the generated token <code>ghp_...</code> \u2014 it will be shown only once.</li> </ol> <p>Then, in your terminal:</p> <pre><code>export GITHUB_TOKEN=ghp_your_token_here\nmkdocs serve\n</code></pre> <p>This will authorize your GitHub API requests and avoid the default 60-requests-per-hour limit.</p>"}, {"location": "team/docs/swagger-ui/", "title": "Swagger UI", "text": "<p>To use Swagger UI, <code>dist 5.22.0</code>  has been built into the docs and a special <code>swagger-ui.html</code> template has been added to provide:</p> <ul> <li>Swagger UI Bundle with its <code>swagger-ui-bundle.js</code> and <code>swagger-ui.css</code></li> <li>Additional <code>swagger-ui.extra.css</code> to syncronize styles with Material for MkDocs</li> <li>Default <code>deepLinking</code> enabled, models collapsed and single <code>dom_id</code> specified</li> </ul>"}, {"location": "team/docs/swagger-ui/#adding-a-swagger-ui-page", "title": "Adding a Swagger UI page", "text": "<p>Required dependencies are included in the <code>swagger-ui.html</code> template, just </p> <ol> <li>Use this template as described below</li> <li>Initialize <code>SwaggerUI</code> with the necessary parameters</li> </ol> <pre><code>---\n# title: You page title &lt;!-- (1)! --&gt;\ntemplate: swagger-ui.html &lt;!-- (2)! --&gt;\nhide:\n#   - navigation &lt;!-- (3)! --&gt;\n  - toc &lt;!-- (4)! --&gt;\n---\n&lt;!-- (5)! --&gt;\n&lt;script&gt;\n  SwaggerUI({\n    url: \"openapi.json\" // (6)!\n  });\n&lt;/script&gt;\n</code></pre> <ol> <li> <p>Optionally title your page accodring to the <code>info.title</code> from yours <code>openapi.json</code></p> <p>By default, the page title will be the same as the name of the corresponding <code>nav</code> element from <code>mkdocs.yml</code></p> </li> <li> <p>Use this template to have a embedded <code>swagger-ui-bundle</code> and custom styles applied to match Material for MkDocs theme</p> </li> <li>Consider hiding the navigation to increase the width of the Swagger UI interface</li> <li>Preferably hide the table of contents, especially if you do not have any additional content on the page</li> <li> <p>You can add any markdown content here if you want. Swagger UI will be displayed below this content, regardless of the script location.</p> <p>Warning</p> <p>The <code>swagger-ui.html</code> template does not insert an implicit <code>h1</code> header for the page, as the Swagger UI has its own header that has the same style.</p> <p>Therefore, if you add your own markdown content above the Swagger UI, add an explicit <pre><code># Page header\n</code></pre></p> </li> <li> <p>Provide required root-related path or an external link to the <code>openapi.json</code> and optionally configure anything you want</p> <p>Swagger UI Configuration </p> <p>The <code>swagger-ui.html</code> template has  <pre><code>&lt;div id=\"swagger-ui\"&gt;&lt;/div&gt;\n</code></pre> to embed single Swagger UI below page content and  adds this default values to the <code>SwaggerUI</code> configuration:</p> <ul> <li><code>dom_id: '#swagger-ui'</code> for the general usecase with single Swagger UI per page</li> <li><code>deepLinking: true</code>, so if for some reason you don't want to use deep links, disable them explicitly</li> <li><code>defaultModelsExpandDepth: 0</code> to collapse models</li> </ul> <p>You can override them in this configuration object</p> </li> </ol> <p>Example</p> <p>See API Reference page</p> <p>Do not use <code>SwaggerUIBundle</code></p> <p>Always use custom <code>SwaggerUI</code> wrapper from the <code>swagger-ui.html</code> template as it is compartible with instant loading  and initializes <code>SwaggerUIBundle</code> internally when possible</p> <p>Multiple Swagger UI on a single page</p> <p>By default, there is only one Swagger UI below optional markdown content per page. If you need more, add new <code>div</code> inside your markdown content manually, specifying its <code>id</code> and passing this <code>id</code> as <code>dom_id</code> to the <code>SwaggerUI</code></p>"}, {"location": "team/sdk/analytics/", "title": "SDK Analytics", "text": ""}, {"location": "team/sdk/analytics/#api-endpoint", "title": "API Endpoint", "text": "<p><pre><code>https://api.aiuta.com/analytics/v1\n</code></pre> Append paths <code>/ios-sdk-analytics</code>, <code>/android-sdk-analytics</code>, etc.</p>"}, {"location": "team/sdk/analytics/#event-scheme", "title": "Event Scheme", "text": "<pre><code>{\n  data {\n    type: String // (1)!\n    event: String | null // (2)!\n    pageId: String | null // (3)!\n    productIds: List&lt;String&gt; | null // (4)!\n    parameter1...N: Any | null // (5)!\n  }\n\n  env {\n    platform: ios | android | web\n    sdkVersion: String\n    hostId: String // (6)!\n    hostVersion: String | null // (7)!\n    installationId: String // (8)!\n  }\n\n  localDateTime: String // (9)!\n}\n</code></pre> <ol> <li>Primary event type</li> <li>Some events of public type may contain a detailed field, indicating which specific <code>event</code> of this <code>type</code> occurred</li> <li>Events of public type are always linked to some page</li> <li>Current active priduct/sku ids</li> <li>Any other additional event parameter in the flattened structure</li> <li>Host Android application id / iOS bundle id</li> <li>Host application version if possible</li> <li>UUID of installation written in the SDK local storage generated and saved if it does not exist there</li> <li>ISO-8601 date time string when the event occurred on the device</li> </ol>"}, {"location": "team/sdk/analytics/#event-types", "title": "Event Types", "text": "<p>See all events tracked</p>"}, {"location": "team/sdk/api-endpoints/", "title": "API Endpoints", "text": "<p>Use the following base URLs to make SDK or direct API calls:</p>"}, {"location": "team/sdk/api-endpoints/#try-on-base-url", "title": "Try-On base URL", "text": "<pre><code>https://api.aiuta.com/digital-try-on/v1\n</code></pre> <p>Append paths like <code>/uploaded_images</code>, <code>/sku_images_operations</code>, etc.</p>"}, {"location": "team/sdk/api-endpoints/#analytics-url", "title": "Analytics URL", "text": "<pre><code>https://api.aiuta.com/analytics/v1\n</code></pre> <p>Append paths like <code>/ios-sdk-analytics</code>, <code>/android-sdk-analytics</code>, etc.</p> <p>Use for custom analytics calls from the SDK.</p>"}, {"location": "team/sdk/subscription-details/", "title": "Subscription Details", "text": "<p>This scheme describes internal configuration / subscription details that SDK will request by calling <code>/subscription_details</code>.</p> <code>Etag</code> and caching <ul> <li>The SDK should store the <code>Etag</code> value from the response in local storage alongside the cached data. </li> <li>On subsequent requests the SDK should include cached <code>Etag</code> value in the <code>if-none-match</code> header. </li> <li>If the configuration hasn't changed, the server will respond with a <code>304</code> status code. Otherwise, it will return the updated configuration and a new <code>Etag</code> that shoul be updated in the storage for the further requests.</li> </ul> Convert from <code>snake_case</code> <p>While API uses <code>snake_case</code> for field names, the SDK schemes adhere to a <code>camelCase</code> convention.</p>"}, {"location": "team/sdk/subscription-details/#scheme", "title": "Scheme", "text": "<pre><code>SubscriptionDetails {\n  poweredBySticker: PoweredBySticker | null // (1)!\n  retryCounts: RetryCounts | null // (2)!\n  operationDelaysSequence: List&lt;OperationDelay&gt; | null // (3)!\n}\n</code></pre> <ol> <li> <p>Controls the behavior of the \u201cPowered by Aiuta\u201d label that may be present on some SDK screens (e.g. the progress animation screen).</p> <p>Defaults</p> <pre><code>urlIos: null\nurlAndroid: null\nisVisible: false\n</code></pre> </li> <li> <p>Specifies the number of additional attempts if an error occurs on a particular action before the user is shown an error telling them that something went wrong (the user can click the try again button to restart the process).</p> <p>Defaults</p> <pre><code>photoUpload: 2\noperationStart: 0\noperationStatus: 2\nresultDownload: 2\n</code></pre> </li> <li> <p>Sequence of delays before requesting the generation operation status. </p> <p>If the sequence does not contain a value with an <code>infinite</code> mode and ends before a successful result is obtained, the operation will fail with a timeout error, the user will be shown a \"something went wrong\" error.</p> <p>Defaults</p> <pre><code>[\n  {\n    mode: recurring\n    delay: 1\n    repeat: 4\n  },\n  {\n    mode: recurring\n    delay: 0.5\n    repeat: 20\n  },\n  {\n    mode: infinite\n    delay: 3\n  }\n]\n</code></pre> </li> </ol>"}, {"location": "team/sdk/subscription-details/#powered-by-sticker", "title": "Powered By Sticker", "text": "<pre><code>PoweredBySticker {\n  urlIos: String | null // (1)!\n  urlAndroid: String | null // (2)!\n  isVisible: true | false | null // (3)!\n}\n</code></pre> <ol> <li> <p>URL for iOS to open by click on the \"powered by\" label. If not specified the label interaction is disabled.</p> <p>Default is <code>null</code> and \"powered by\" label is not interactive.</p> </li> <li> <p>URL for Android to open by click on the \"powered by\" label. If not specified the label interaction is disabled.</p> <p>Default is <code>null</code> and \"powered by\" label is not interactive.</p> </li> <li> <p>The only value to \"powered by\" label be visible is explicit <code>true</code> in the subscription details. In any other case \"powered by\" is hidden.</p> <p>Default is <code>false</code> and \"powered by\" label is hidden.</p> </li> </ol>"}, {"location": "team/sdk/subscription-details/#retry-counts", "title": "Retry Counts", "text": "<pre><code>RetryCounts {\n  photoUpload: Int | null // (1)!\n  operationStart: Int | null // (2)!\n  operationStatus: Int | null // (3)!\n  resultDownload: Int | null // (4)!\n}\n</code></pre> <ol> <li> <p>Number of retries for photo uploading</p> <p><code>2</code> by default</p> </li> <li> <p>Number of network request retries to start try-on operation, has no effect if the server responds with error</p> <p><code>0</code> by default</p> </li> <li> <p>Number of network request retries per loop to check operation status, if the server responded, the number of retries will reset in the next loop after the delay in the <code>operationDelaysSequence</code></p> <p><code>2</code> by default</p> </li> <li> <p>Number of retries to load the generated image</p> <p><code>2</code> by default</p> </li> </ol>"}, {"location": "team/sdk/subscription-details/#operation-delays", "title": "Operation Delays", "text": "<code>recurring</code> mode<code>infinite</code> mode <pre><code>OperationDelay {\n  mode: recurring // (1)!\n  delay: Double // (2)!\n  repeat: Int // (3)!\n}\n</code></pre> <ol> <li> <p><code>recurring</code> delay will be repeated a specified <code>repeat</code> number of times. </p> </li> <li> <p>Delay in seconds before next request the operation status.</p> </li> <li> <p>Number of repeates for the <code>recurring</code> delay. </p> </li> </ol> <pre><code>OperationDelay {\n  mode: infinite // (1)!\n  delay: Double // (2)!\n}\n</code></pre> <ol> <li> <p><code>infinite</code> delay will repeat infinitely.</p> </li> <li> <p>Delay in seconds before next request the operation status.</p> </li> </ol> <p>Timeout error</p> <p>If the sequence does not contain a value with an <code>infinite</code> mode and ends before a successful result is obtained, the operation will fail with a timeout error, the user will be shown a \"something went wrong\" error.</p>"}]}